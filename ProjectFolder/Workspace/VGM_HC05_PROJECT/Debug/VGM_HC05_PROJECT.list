
VGM_HC05_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b318  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800b4a8  0800b4a8  0001b4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b554  0800b554  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b554  0800b554  0001b554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b55c  0800b55c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b55c  0800b55c  0001b55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b560  0800b560  0001b560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004810  20000094  0800b5f8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048a4  0800b5f8  000248a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002907d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005273  00000000  00000000  00049141  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e28  00000000  00000000  0004e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c08  00000000  00000000  000501e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027dd9  00000000  00000000  00051de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b8bb  00000000  00000000  00079bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddb68  00000000  00000000  0009547c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172fe4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008048  00000000  00000000  00173060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b490 	.word	0x0800b490

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800b490 	.word	0x0800b490

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	200000b0 	.word	0x200000b0
 8000500:	20000104 	.word	0x20000104

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b08e      	sub	sp, #56	; 0x38
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fd75 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f839 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f977 	bl	8000804 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000516:	f000 f8b7 	bl	8000688 <MX_I2C1_Init>
  MX_I2S3_Init();
 800051a:	f000 f8e3 	bl	80006e4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800051e:	f000 f911 	bl	8000744 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f945 	bl	80007b0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <main+0x70>)
 8000528:	f107 041c 	add.w	r4, r7, #28
 800052c:	461d      	mov	r5, r3
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800053a:	f107 031c 	add.w	r3, r7, #28
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f008 f9a6 	bl	8008892 <osThreadCreate>
 8000546:	4602      	mov	r2, r0
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <main+0x74>)
 800054a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Appl_Task1 */
  osThreadDef(Appl_Task1, Application_Task1, osPriorityIdle, 0, 512);
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <main+0x78>)
 800054e:	463c      	mov	r4, r7
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Appl_Task1Handle = osThreadCreate(osThread(Appl_Task1), NULL);
 800055e:	463b      	mov	r3, r7
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f008 f995 	bl	8008892 <osThreadCreate>
 8000568:	4602      	mov	r2, r0
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <main+0x7c>)
 800056c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800056e:	f008 f989 	bl	8008884 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x6e>
 8000574:	0800b4b4 	.word	0x0800b4b4
 8000578:	20004078 	.word	0x20004078
 800057c:	0800b4dc 	.word	0x0800b4dc
 8000580:	200041b0 	.word	0x200041b0

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b098      	sub	sp, #96	; 0x60
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f00a feb9 	bl	800b30a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b31      	ldr	r3, [pc, #196]	; (8000680 <SystemClock_Config+0xfc>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	4a30      	ldr	r2, [pc, #192]	; (8000680 <SystemClock_Config+0xfc>)
 80005c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c4:	6413      	str	r3, [r2, #64]	; 0x40
 80005c6:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <SystemClock_Config+0xfc>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <SystemClock_Config+0x100>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <SystemClock_Config+0x100>)
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0x100>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000602:	2308      	movs	r3, #8
 8000604:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000606:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fae3 	bl	8003be4 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000624:	f000 fa6c 	bl	8000b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	2105      	movs	r1, #5
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fd3c 	bl	80040c4 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000652:	f000 fa55 	bl	8000b00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000656:	2301      	movs	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800065a:	23c0      	movs	r3, #192	; 0xc0
 800065c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	4618      	mov	r0, r3
 8000668:	f003 ff50 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000672:	f000 fa45 	bl	8000b00 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3760      	adds	r7, #96	; 0x60
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f002 fcb5 	bl	8003034 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 fa16 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000407c 	.word	0x2000407c
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_I2S3_Init+0x54>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <MX_I2S3_Init+0x58>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2S3_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_I2S3_Init+0x54>)
 800070c:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <MX_I2S3_Init+0x5c>)
 800070e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_I2S3_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2S3_Init+0x54>)
 8000724:	f002 fdbe 	bl	80032a4 <HAL_I2S_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800072e:	f000 f9e7 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20004168 	.word	0x20004168
 800073c:	40003c00 	.word	0x40003c00
 8000740:	00017700 	.word	0x00017700

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f003 fff7 	bl	8004788 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f9ae 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200040d0 	.word	0x200040d0
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f004 fa70 	bl	8004ccc <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f985 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20004128 	.word	0x20004128
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b71      	ldr	r3, [pc, #452]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a70      	ldr	r2, [pc, #448]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000824:	f043 0310 	orr.w	r3, r3, #16
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b6e      	ldr	r3, [pc, #440]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b6a      	ldr	r3, [pc, #424]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a69      	ldr	r2, [pc, #420]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b67      	ldr	r3, [pc, #412]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b63      	ldr	r3, [pc, #396]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a62      	ldr	r2, [pc, #392]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b60      	ldr	r3, [pc, #384]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b5c      	ldr	r3, [pc, #368]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a5b      	ldr	r2, [pc, #364]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b59      	ldr	r3, [pc, #356]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b55      	ldr	r3, [pc, #340]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a54      	ldr	r2, [pc, #336]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b52      	ldr	r3, [pc, #328]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b4e      	ldr	r3, [pc, #312]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a4d      	ldr	r2, [pc, #308]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2108      	movs	r1, #8
 80008c6:	4848      	ldr	r0, [pc, #288]	; (80009e8 <MX_GPIO_Init+0x1e4>)
 80008c8:	f000 fe8e 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	4846      	ldr	r0, [pc, #280]	; (80009ec <MX_GPIO_Init+0x1e8>)
 80008d2:	f000 fe89 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008dc:	4844      	ldr	r0, [pc, #272]	; (80009f0 <MX_GPIO_Init+0x1ec>)
 80008de:	f000 fe83 	bl	80015e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e2:	2308      	movs	r3, #8
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	483b      	ldr	r0, [pc, #236]	; (80009e8 <MX_GPIO_Init+0x1e4>)
 80008fa:	f000 fcc3 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4835      	ldr	r0, [pc, #212]	; (80009ec <MX_GPIO_Init+0x1e8>)
 8000916:	f000 fcb5 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091a:	2308      	movs	r3, #8
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092a:	2305      	movs	r3, #5
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	482d      	ldr	r0, [pc, #180]	; (80009ec <MX_GPIO_Init+0x1e8>)
 8000936:	f000 fca5 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	2301      	movs	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_GPIO_Init+0x1f0>)
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	482a      	ldr	r0, [pc, #168]	; (80009f8 <MX_GPIO_Init+0x1f4>)
 800094e:	f000 fc99 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000952:	2304      	movs	r3, #4
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4825      	ldr	r0, [pc, #148]	; (80009fc <MX_GPIO_Init+0x1f8>)
 8000966:	f000 fc8d 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097c:	2305      	movs	r3, #5
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	481d      	ldr	r0, [pc, #116]	; (80009fc <MX_GPIO_Init+0x1f8>)
 8000988:	f000 fc7c 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000990:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_GPIO_Init+0x1ec>)
 80009a6:	f000 fc6d 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009aa:	2320      	movs	r3, #32
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_GPIO_Init+0x1ec>)
 80009be:	f000 fc61 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_GPIO_Init+0x1f0>)
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0x1e4>)
 80009d6:	f000 fc55 	bl	8001284 <HAL_GPIO_Init>

}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	; 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	10120000 	.word	0x10120000
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400

08000a00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000a08:	f00a f938 	bl	800ac7c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f007 ff8c 	bl	800892a <osDelay>
 8000a12:	e7fb      	b.n	8000a0c <StartDefaultTask+0xc>

08000a14 <Application_Task1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Application_Task1 */
void Application_Task1(void const * argument)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Application_Task1 */
	stm32Uart_RxInterruptEnable(&huart2,1);
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4826      	ldr	r0, [pc, #152]	; (8000ab8 <Application_Task1+0xa4>)
 8000a20:	f005 fd70 	bl	8006504 <stm32Uart_RxInterruptEnable>
	stm32Uart_TxInterruptEnable(&huart2,0);
 8000a24:	2100      	movs	r1, #0
 8000a26:	4824      	ldr	r0, [pc, #144]	; (8000ab8 <Application_Task1+0xa4>)
 8000a28:	f005 fd8c 	bl	8006544 <stm32Uart_TxInterruptEnable>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f007 ff7c 	bl	800892a <osDelay>
    if(Appl_u8UartRxCompleteFlag)
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <Application_Task1+0xa8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d015      	beq.n	8000a68 <Application_Task1+0x54>
    {
    	Appl_u8UartRxCompleteFlag = 0;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <Application_Task1+0xa8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
    	if(vishwaUartRX_buffer[0] == 0x31)
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <Application_Task1+0xac>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b31      	cmp	r3, #49	; 0x31
 8000a4a:	d109      	bne.n	8000a60 <Application_Task1+0x4c>
    	{
    		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a50:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <Application_Task1+0xb0>)
 8000a52:	f000 fde2 	bl	800161a <HAL_GPIO_TogglePin>
    		memset(&vishwaUartRX_buffer,0,sizeof(vishwaUartRX_buffer));
 8000a56:	2201      	movs	r2, #1
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4819      	ldr	r0, [pc, #100]	; (8000ac0 <Application_Task1+0xac>)
 8000a5c:	f00a fc55 	bl	800b30a <memset>

    	}
    	stm32Uart_RxInterruptEnable(&huart2,1);
 8000a60:	2101      	movs	r1, #1
 8000a62:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <Application_Task1+0xa4>)
 8000a64:	f005 fd4e 	bl	8006504 <stm32Uart_RxInterruptEnable>
    }

    if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_SET)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <Application_Task1+0xb4>)
 8000a6c:	f000 fda4 	bl	80015b8 <HAL_GPIO_ReadPin>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d1da      	bne.n	8000a2c <Application_Task1+0x18>
    {
    	if(Appl_u8UartTxCompleteFlag == 1)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <Application_Task1+0xb8>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d1d5      	bne.n	8000a2c <Application_Task1+0x18>
    	{
    		Appl_u8UartTxCompleteFlag = 0;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <Application_Task1+0xb8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
        	stm32Uart_RxInterruptEnable(&huart2,0);
 8000a86:	2100      	movs	r1, #0
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <Application_Task1+0xa4>)
 8000a8a:	f005 fd3b 	bl	8006504 <stm32Uart_RxInterruptEnable>
        	vishwaUartTX_buffer[0] = 0x41;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <Application_Task1+0xbc>)
 8000a90:	2241      	movs	r2, #65	; 0x41
 8000a92:	701a      	strb	r2, [r3, #0]
        	vishwaUartTX_buffer[1] = 0x42;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <Application_Task1+0xbc>)
 8000a96:	2242      	movs	r2, #66	; 0x42
 8000a98:	705a      	strb	r2, [r3, #1]
        	vishwaUartTX_buffer[2] = 0x0A;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <Application_Task1+0xbc>)
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	709a      	strb	r2, [r3, #2]
        	Appl_u8TxLength = 3;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <Application_Task1+0xc0>)
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	701a      	strb	r2, [r3, #0]
        	TxByteCount=0;
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <Application_Task1+0xc4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
        	stm32Uart_TxInterruptEnable(&huart2,1);
 8000aac:	2101      	movs	r1, #1
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <Application_Task1+0xa4>)
 8000ab0:	f005 fd48 	bl	8006544 <stm32Uart_TxInterruptEnable>
    osDelay(1);
 8000ab4:	e7ba      	b.n	8000a2c <Application_Task1+0x18>
 8000ab6:	bf00      	nop
 8000ab8:	20004128 	.word	0x20004128
 8000abc:	2000031d 	.word	0x2000031d
 8000ac0:	2000030c 	.word	0x2000030c
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	20000009 	.word	0x20000009
 8000ad0:	20000310 	.word	0x20000310
 8000ad4:	2000031c 	.word	0x2000031c
 8000ad8:	2000031b 	.word	0x2000031b

08000adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aee:	f000 faa5 	bl	800103c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010000 	.word	0x40010000

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <Error_Handler+0x6>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_MspInit+0x54>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <HAL_MspInit+0x54>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x54>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_MspInit+0x54>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_MspInit+0x54>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_MspInit+0x54>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	f06f 0001 	mvn.w	r0, #1
 8000b4e:	f000 fb6f 	bl	8001230 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_I2C_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12c      	bne.n	8000bdc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b9e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba4:	2312      	movs	r3, #18
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <HAL_I2C_MspInit+0x8c>)
 8000bbc:	f000 fb62 	bl	8001284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40005400 	.word	0x40005400
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020400 	.word	0x40020400

08000bf0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <HAL_I2S_MspInit+0xc0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d14a      	bne.n	8000ca8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <HAL_I2S_MspInit+0xc4>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a26      	ldr	r2, [pc, #152]	; (8000cb4 <HAL_I2S_MspInit+0xc4>)
 8000c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <HAL_I2S_MspInit+0xc4>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <HAL_I2S_MspInit+0xc4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <HAL_I2S_MspInit+0xc4>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_I2S_MspInit+0xc4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_I2S_MspInit+0xc4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <HAL_I2S_MspInit+0xc4>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_I2S_MspInit+0xc4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c66:	2310      	movs	r3, #16
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c76:	2306      	movs	r3, #6
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <HAL_I2S_MspInit+0xc8>)
 8000c82:	f000 faff 	bl	8001284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c86:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c98:	2306      	movs	r3, #6
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <HAL_I2S_MspInit+0xcc>)
 8000ca4:	f000 faee 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40003c00 	.word	0x40003c00
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_SPI_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12b      	bne.n	8000d3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d1a:	23e0      	movs	r3, #224	; 0xe0
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_SPI_MspInit+0x8c>)
 8000d36:	f000 faa5 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	; 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40013000 	.word	0x40013000
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_UART_MspInit+0x94>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d133      	bne.n	8000dda <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000daa:	230c      	movs	r3, #12
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_UART_MspInit+0x9c>)
 8000dc6:	f000 fa5d 	bl	8001284 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2105      	movs	r1, #5
 8000dce:	2026      	movs	r0, #38	; 0x26
 8000dd0:	f000 fa2e 	bl	8001230 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dd4:	2026      	movs	r0, #38	; 0x26
 8000dd6:	f000 fa47 	bl	8001268 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004400 	.word	0x40004400
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	2019      	movs	r0, #25
 8000e06:	f000 fa13 	bl	8001230 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e0a:	2019      	movs	r0, #25
 8000e0c:	f000 fa2c 	bl	8001268 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e18:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e2c:	f107 0210 	add.w	r2, r7, #16
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f003 fb36 	bl	80044a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e3c:	f003 fb20 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 8000e40:	4603      	mov	r3, r0
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e48:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <HAL_InitTick+0xa8>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0c9b      	lsrs	r3, r3, #18
 8000e50:	3b01      	subs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_InitTick+0xac>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_InitTick+0xb0>)
 8000e58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_InitTick+0xac>)
 8000e5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_InitTick+0xac>)
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_InitTick+0xac>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_InitTick+0xac>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <HAL_InitTick+0xac>)
 8000e76:	f003 fceb 	bl	8004850 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d104      	bne.n	8000e8a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <HAL_InitTick+0xac>)
 8000e82:	f003 fd1a 	bl	80048ba <HAL_TIM_Base_Start_IT>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3730      	adds	r7, #48	; 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	431bde83 	.word	0x431bde83
 8000e9c:	200041b4 	.word	0x200041b4
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ed6:	f003 fd14 	bl	8004902 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200041b4 	.word	0x200041b4

08000ee4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <OTG_FS_IRQHandler+0x10>)
 8000eea:	f000 fe41 	bl	8001b70 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200045dc 	.word	0x200045dc

08000ef8 <USART2_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART2_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
	stm32Uart_IRQHandler(&huart2);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <USART2_IRQHandler+0x10>)
 8000efe:	f005 f9fd 	bl	80062fc <stm32Uart_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20004128 	.word	0x20004128

08000f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f14:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <_sbrk+0x5c>)
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <_sbrk+0x60>)
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <_sbrk+0x64>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <_sbrk+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d207      	bcs.n	8000f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f3c:	f00a f9a0 	bl	800b280 <__errno>
 8000f40:	4602      	mov	r2, r0
 8000f42:	230c      	movs	r3, #12
 8000f44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e009      	b.n	8000f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <_sbrk+0x64>)
 8000f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20020000 	.word	0x20020000
 8000f6c:	00000400 	.word	0x00000400
 8000f70:	20000304 	.word	0x20000304
 8000f74:	200048a8 	.word	0x200048a8

08000f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <SystemInit+0x28>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f82:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <SystemInit+0x28>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SystemInit+0x28>)
 8000f8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f92:	609a      	str	r2, [r3, #8]
#endif
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000faa:	e003      	b.n	8000fb4 <LoopCopyDataInit>

08000fac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fb2:	3104      	adds	r1, #4

08000fb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fbc:	d3f6      	bcc.n	8000fac <CopyDataInit>
  ldr  r2, =_sbss
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fc0:	e002      	b.n	8000fc8 <LoopFillZerobss>

08000fc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc4:	f842 3b04 	str.w	r3, [r2], #4

08000fc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fcc:	d3f9      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fce:	f7ff ffd3 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f00a f95b 	bl	800b28c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fa95 	bl	8000504 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fe0:	0800b564 	.word	0x0800b564
  ldr  r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe8:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8000fec:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8000ff0:	200048a4 	.word	0x200048a4

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <HAL_Init+0x40>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_Init+0x40>)
 800100e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_Init+0x40>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f8fa 	bl	800121a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fee2 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fd6c 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023c00 	.word	0x40023c00

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	200041f4 	.word	0x200041f4

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200041f4 	.word	0x200041f4

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000008 	.word	0x20000008

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff4c 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001242:	f7ff ff61 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001246:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	f7ff ffb1 	bl	80011b4 <NVIC_EncodePriority>
 8001252:	4602      	mov	r2, r0
 8001254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff80 	bl	8001160 <__NVIC_SetPriority>
}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff54 	bl	8001124 <__NVIC_EnableIRQ>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e16b      	b.n	8001578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 815a 	bne.w	8001572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d00b      	beq.n	80012de <HAL_GPIO_Init+0x5a>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d2:	2b11      	cmp	r3, #17
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b12      	cmp	r3, #18
 80012dc:	d130      	bne.n	8001340 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0xfc>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b12      	cmp	r3, #18
 800137e:	d123      	bne.n	80013c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0203 	and.w	r2, r3, #3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80b4 	beq.w	8001572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_GPIO_Init+0x308>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a5e      	ldr	r2, [pc, #376]	; (800158c <HAL_GPIO_Init+0x308>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_GPIO_Init+0x308>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001426:	4a5a      	ldr	r2, [pc, #360]	; (8001590 <HAL_GPIO_Init+0x30c>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_GPIO_Init+0x310>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d02b      	beq.n	80014aa <HAL_GPIO_Init+0x226>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <HAL_GPIO_Init+0x314>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d025      	beq.n	80014a6 <HAL_GPIO_Init+0x222>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4f      	ldr	r2, [pc, #316]	; (800159c <HAL_GPIO_Init+0x318>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x21e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_GPIO_Init+0x31c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x21a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4d      	ldr	r2, [pc, #308]	; (80015a4 <HAL_GPIO_Init+0x320>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x216>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4c      	ldr	r2, [pc, #304]	; (80015a8 <HAL_GPIO_Init+0x324>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x212>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <HAL_GPIO_Init+0x328>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x20e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4a      	ldr	r2, [pc, #296]	; (80015b0 <HAL_GPIO_Init+0x32c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x20a>
 800148a:	2307      	movs	r3, #7
 800148c:	e00e      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800148e:	2308      	movs	r3, #8
 8001490:	e00c      	b.n	80014ac <HAL_GPIO_Init+0x228>
 8001492:	2306      	movs	r3, #6
 8001494:	e00a      	b.n	80014ac <HAL_GPIO_Init+0x228>
 8001496:	2305      	movs	r3, #5
 8001498:	e008      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800149a:	2304      	movs	r3, #4
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800149e:	2303      	movs	r3, #3
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014aa:	2300      	movs	r3, #0
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	f002 0203 	and.w	r2, r2, #3
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014bc:	4934      	ldr	r1, [pc, #208]	; (8001590 <HAL_GPIO_Init+0x30c>)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_GPIO_Init+0x330>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ee:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <HAL_GPIO_Init+0x330>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_GPIO_Init+0x330>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001518:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <HAL_GPIO_Init+0x330>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_GPIO_Init+0x330>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <HAL_GPIO_Init+0x330>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_GPIO_Init+0x330>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800156c:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_GPIO_Init+0x330>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3301      	adds	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f ae90 	bls.w	80012a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	3724      	adds	r7, #36	; 0x24
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40023800 	.word	0x40023800
 8001590:	40013800 	.word	0x40013800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020400 	.word	0x40020400
 800159c:	40020800 	.word	0x40020800
 80015a0:	40020c00 	.word	0x40020c00
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40021400 	.word	0x40021400
 80015ac:	40021800 	.word	0x40021800
 80015b0:	40021c00 	.word	0x40021c00
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e001      	b.n	80015da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001604:	e003      	b.n	800160e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	041a      	lsls	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	401a      	ands	r2, r3
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	429a      	cmp	r2, r3
 8001632:	d104      	bne.n	800163e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	041a      	lsls	r2, r3, #16
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800163c:	e002      	b.n	8001644 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	b08f      	sub	sp, #60	; 0x3c
 8001654:	af0a      	add	r7, sp, #40	; 0x28
 8001656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e054      	b.n	800170c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d106      	bne.n	8001682 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f009 fb51 	bl	800ad24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2203      	movs	r2, #3
 8001686:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 ff4f 	bl	8005544 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	687e      	ldr	r6, [r7, #4]
 80016ae:	466d      	mov	r5, sp
 80016b0:	f106 0410 	add.w	r4, r6, #16
 80016b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c4:	1d33      	adds	r3, r6, #4
 80016c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c8:	6838      	ldr	r0, [r7, #0]
 80016ca:	f003 fec9 	bl	8005460 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 ff46 	bl	8005566 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	687e      	ldr	r6, [r7, #4]
 80016e2:	466d      	mov	r5, sp
 80016e4:	f106 0410 	add.w	r4, r6, #16
 80016e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f8:	1d33      	adds	r3, r6, #4
 80016fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016fc:	6838      	ldr	r0, [r7, #0]
 80016fe:	f004 f859 	bl	80057b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001714 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af04      	add	r7, sp, #16
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4603      	mov	r3, r0
 8001724:	70fb      	strb	r3, [r7, #3]
 8001726:	460b      	mov	r3, r1
 8001728:	70bb      	strb	r3, [r7, #2]
 800172a:	4613      	mov	r3, r2
 800172c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_HCD_HC_Init+0x28>
 8001738:	2302      	movs	r3, #2
 800173a:	e07f      	b.n	800183c <HAL_HCD_HC_Init+0x128>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	333d      	adds	r3, #61	; 0x3d
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	440b      	add	r3, r1
 8001766:	3338      	adds	r3, #56	; 0x38
 8001768:	787a      	ldrb	r2, [r7, #1]
 800176a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	3340      	adds	r3, #64	; 0x40
 800177c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800177e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3339      	adds	r3, #57	; 0x39
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	333f      	adds	r3, #63	; 0x3f
 80017a4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	78bb      	ldrb	r3, [r7, #2]
 80017ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017b2:	b2d8      	uxtb	r0, r3
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	333a      	adds	r3, #58	; 0x3a
 80017c2:	4602      	mov	r2, r0
 80017c4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da0a      	bge.n	80017e4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	333b      	adds	r3, #59	; 0x3b
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	e009      	b.n	80017f8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	333b      	adds	r3, #59	; 0x3b
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	333c      	adds	r3, #60	; 0x3c
 8001808:	f897 2020 	ldrb.w	r2, [r7, #32]
 800180c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	787c      	ldrb	r4, [r7, #1]
 8001814:	78ba      	ldrb	r2, [r7, #2]
 8001816:	78f9      	ldrb	r1, [r7, #3]
 8001818:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	4623      	mov	r3, r4
 800182a:	f004 f945 	bl	8005ab8 <USB_HC_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}

08001844 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_HCD_HC_Halt+0x1e>
 800185e:	2302      	movs	r3, #2
 8001860:	e00f      	b.n	8001882 <HAL_HCD_HC_Halt+0x3e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fb81 	bl	8005f7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4603      	mov	r3, r0
 800189c:	70fb      	strb	r3, [r7, #3]
 800189e:	460b      	mov	r3, r1
 80018a0:	70bb      	strb	r3, [r7, #2]
 80018a2:	4613      	mov	r3, r2
 80018a4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	333b      	adds	r3, #59	; 0x3b
 80018b6:	78ba      	ldrb	r2, [r7, #2]
 80018b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	333f      	adds	r3, #63	; 0x3f
 80018ca:	787a      	ldrb	r2, [r7, #1]
 80018cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018ce:	7c3b      	ldrb	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d114      	bne.n	80018fe <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	3342      	adds	r3, #66	; 0x42
 80018e4:	2203      	movs	r2, #3
 80018e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	333d      	adds	r3, #61	; 0x3d
 80018f8:	7f3a      	ldrb	r2, [r7, #28]
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e009      	b.n	8001912 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	3342      	adds	r3, #66	; 0x42
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001912:	787b      	ldrb	r3, [r7, #1]
 8001914:	2b03      	cmp	r3, #3
 8001916:	f200 80d6 	bhi.w	8001ac6 <HAL_HCD_HC_SubmitRequest+0x23a>
 800191a:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <HAL_HCD_HC_SubmitRequest+0x94>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	08001931 	.word	0x08001931
 8001924:	08001ab1 	.word	0x08001ab1
 8001928:	0800199d 	.word	0x0800199d
 800192c:	08001a27 	.word	0x08001a27
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001930:	7c3b      	ldrb	r3, [r7, #16]
 8001932:	2b01      	cmp	r3, #1
 8001934:	f040 80c9 	bne.w	8001aca <HAL_HCD_HC_SubmitRequest+0x23e>
 8001938:	78bb      	ldrb	r3, [r7, #2]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 80c5 	bne.w	8001aca <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001940:	8b3b      	ldrh	r3, [r7, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	440b      	add	r3, r1
 8001954:	3351      	adds	r3, #81	; 0x51
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	3351      	adds	r3, #81	; 0x51
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10a      	bne.n	8001986 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3342      	adds	r3, #66	; 0x42
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001984:	e0a1      	b.n	8001aca <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	3342      	adds	r3, #66	; 0x42
 8001996:	2202      	movs	r2, #2
 8001998:	701a      	strb	r2, [r3, #0]
      break;
 800199a:	e096      	b.n	8001aca <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800199c:	78bb      	ldrb	r3, [r7, #2]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d120      	bne.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	3351      	adds	r3, #81	; 0x51
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10a      	bne.n	80019ce <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	3342      	adds	r3, #66	; 0x42
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019cc:	e07e      	b.n	8001acc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	3342      	adds	r3, #66	; 0x42
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
      break;
 80019e2:	e073      	b.n	8001acc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	440b      	add	r3, r1
 80019f2:	3350      	adds	r3, #80	; 0x50
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10a      	bne.n	8001a10 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3342      	adds	r3, #66	; 0x42
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
      break;
 8001a0e:	e05d      	b.n	8001acc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3342      	adds	r3, #66	; 0x42
 8001a20:	2202      	movs	r2, #2
 8001a22:	701a      	strb	r2, [r3, #0]
      break;
 8001a24:	e052      	b.n	8001acc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a26:	78bb      	ldrb	r3, [r7, #2]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d120      	bne.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	3351      	adds	r3, #81	; 0x51
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10a      	bne.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	3342      	adds	r3, #66	; 0x42
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a56:	e039      	b.n	8001acc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	3342      	adds	r3, #66	; 0x42
 8001a68:	2202      	movs	r2, #2
 8001a6a:	701a      	strb	r2, [r3, #0]
      break;
 8001a6c:	e02e      	b.n	8001acc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	3350      	adds	r3, #80	; 0x50
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3342      	adds	r3, #66	; 0x42
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
      break;
 8001a98:	e018      	b.n	8001acc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3342      	adds	r3, #66	; 0x42
 8001aaa:	2202      	movs	r2, #2
 8001aac:	701a      	strb	r2, [r3, #0]
      break;
 8001aae:	e00d      	b.n	8001acc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	3342      	adds	r3, #66	; 0x42
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
      break;
 8001ac4:	e002      	b.n	8001acc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001ac6:	bf00      	nop
 8001ac8:	e000      	b.n	8001acc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001aca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	3344      	adds	r3, #68	; 0x44
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	8b39      	ldrh	r1, [r7, #24]
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4403      	add	r3, r0
 8001af0:	3348      	adds	r3, #72	; 0x48
 8001af2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	335c      	adds	r3, #92	; 0x5c
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	334c      	adds	r3, #76	; 0x4c
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	440b      	add	r3, r1
 8001b2a:	3339      	adds	r3, #57	; 0x39
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	335d      	adds	r3, #93	; 0x5d
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	3338      	adds	r3, #56	; 0x38
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	18d1      	adds	r1, r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f004 f8b4 	bl	8005ccc <USB_HC_StartXfer>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop

08001b70 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fdd1 	bl	800572e <USB_GetMode>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	f040 80ef 	bne.w	8001d72 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fdb5 	bl	8005708 <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80e5 	beq.w	8001d70 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fdac 	bl	8005708 <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bba:	d104      	bne.n	8001bc6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fd9c 	bl	8005708 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bda:	d104      	bne.n	8001be6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001be4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fd8c 	bl	8005708 <USB_ReadInterrupts>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bfa:	d104      	bne.n	8001c06 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fd7c 	bl	8005708 <USB_ReadInterrupts>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d103      	bne.n	8001c22 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fd6e 	bl	8005708 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c36:	d115      	bne.n	8001c64 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c40:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d108      	bne.n	8001c64 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f009 f8e4 	bl	800ae20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 fe64 	bl	800592c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fd4d 	bl	8005708 <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c78:	d102      	bne.n	8001c80 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f001 f966 	bl	8002f4c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fd3f 	bl	8005708 <USB_ReadInterrupts>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d106      	bne.n	8001ca2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f009 f8a7 	bl	800ade8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fd2e 	bl	8005708 <USB_ReadInterrupts>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cb6:	d138      	bne.n	8001d2a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 f94b 	bl	8005f58 <USB_HC_ReadInterrupt>
 8001cc2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e025      	b.n	8001d16 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d018      	beq.n	8001d10 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf4:	d106      	bne.n	8001d04 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8cf 	bl	8001ea0 <HCD_HC_IN_IRQHandler>
 8001d02:	e005      	b.n	8001d10 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fcfd 	bl	800270a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3d4      	bcc.n	8001cca <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fcea 	bl	8005708 <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d101      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x1d2>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_HCD_IRQHandler+0x1d4>
 8001d42:	2300      	movs	r3, #0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d014      	beq.n	8001d72 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0210 	bic.w	r2, r2, #16
 8001d56:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f001 f84b 	bl	8002df4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0210 	orr.w	r2, r2, #16
 8001d6c:	619a      	str	r2, [r3, #24]
 8001d6e:	e000      	b.n	8001d72 <HAL_HCD_IRQHandler+0x202>
      return;
 8001d70:	bf00      	nop
    }
  }
}
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_HCD_Start+0x16>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e013      	b.n	8001db6 <HAL_HCD_Start+0x3e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 fbc1 	bl	8005522 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 fe24 	bl	80059f4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_HCD_Stop+0x16>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e00d      	b.n	8001df0 <HAL_HCD_Stop+0x32>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fa05 	bl	80061f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fdcb 	bl	80059a0 <USB_ResetPort>
 8001e0a:	4603      	mov	r3, r0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	335c      	adds	r3, #92	; 0x5c
 8001e30:	781b      	ldrb	r3, [r3, #0]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	334c      	adds	r3, #76	; 0x4c
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 fe0d 	bl	8005a94 <USB_GetCurrentFrame>
 8001e7a:	4603      	mov	r3, r0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fde8 	bl	8005a66 <USB_GetHostSpeed>
 8001e96:	4603      	mov	r3, r0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d119      	bne.n	8001f04 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001edc:	461a      	mov	r2, r3
 8001ede:	2304      	movs	r3, #4
 8001ee0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	0151      	lsls	r1, r2, #5
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	440a      	add	r2, r1
 8001ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	60d3      	str	r3, [r2, #12]
 8001f02:	e0ce      	b.n	80020a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1a:	d12c      	bne.n	8001f76 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	335d      	adds	r3, #93	; 0x5d
 8001f40:	2207      	movs	r2, #7
 8001f42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	0151      	lsls	r1, r2, #5
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	440a      	add	r2, r1
 8001f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 f803 	bl	8005f7a <USB_HC_Halt>
 8001f74:	e095      	b.n	80020a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d109      	bne.n	8001fa0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	6093      	str	r3, [r2, #8]
 8001f9e:	e080      	b.n	80020a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d134      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	0151      	lsls	r1, r2, #5
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	440a      	add	r2, r1
 8001fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	335d      	adds	r3, #93	; 0x5d
 8001fe6:	2205      	movs	r2, #5
 8001fe8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	461a      	mov	r2, r3
 800200a:	2308      	movs	r3, #8
 800200c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f003 ffae 	bl	8005f7a <USB_HC_Halt>
 800201e:	e040      	b.n	80020a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d134      	bne.n	80020a2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	0151      	lsls	r1, r2, #5
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	440a      	add	r2, r1
 800204e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f003 ff89 	bl	8005f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002074:	461a      	mov	r2, r3
 8002076:	2310      	movs	r3, #16
 8002078:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	335d      	adds	r3, #93	; 0x5d
 800208a:	2208      	movs	r2, #8
 800208c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	461a      	mov	r2, r3
 800209c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b8:	d122      	bne.n	8002100 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	0151      	lsls	r1, r2, #5
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	440a      	add	r2, r1
 80020d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 ff48 	bl	8005f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	461a      	mov	r2, r3
 80020f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020fe:	e300      	b.n	8002702 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	f040 80fd 	bne.w	8002312 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3348      	adds	r3, #72	; 0x48
 8002130:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	0159      	lsls	r1, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	440b      	add	r3, r1
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002144:	1ad1      	subs	r1, r2, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4403      	add	r3, r0
 8002154:	334c      	adds	r3, #76	; 0x4c
 8002156:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	335d      	adds	r3, #93	; 0x5d
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	3358      	adds	r3, #88	; 0x58
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	461a      	mov	r2, r3
 800218e:	2301      	movs	r3, #1
 8002190:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	333f      	adds	r3, #63	; 0x3f
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	333f      	adds	r3, #63	; 0x3f
 80021b8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d121      	bne.n	8002202 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	0151      	lsls	r1, r2, #5
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	440a      	add	r2, r1
 80021d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fec6 	bl	8005f7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	461a      	mov	r2, r3
 80021fc:	2310      	movs	r3, #16
 80021fe:	6093      	str	r3, [r2, #8]
 8002200:	e070      	b.n	80022e4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	333f      	adds	r3, #63	; 0x3f
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d12a      	bne.n	800226e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	0151      	lsls	r1, r2, #5
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	440a      	add	r2, r1
 800222e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002236:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	335c      	adds	r3, #92	; 0x5c
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	b2d8      	uxtb	r0, r3
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	335c      	adds	r3, #92	; 0x5c
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4601      	mov	r1, r0
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f008 fde8 	bl	800ae3c <HAL_HCD_HC_NotifyURBChange_Callback>
 800226c:	e03a      	b.n	80022e4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	333f      	adds	r3, #63	; 0x3f
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d12f      	bne.n	80022e4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	335c      	adds	r3, #92	; 0x5c
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	3350      	adds	r3, #80	; 0x50
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f083 0301 	eor.w	r3, r3, #1
 80022ae:	b2d8      	uxtb	r0, r3
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	3350      	adds	r3, #80	; 0x50
 80022c0:	4602      	mov	r2, r0
 80022c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	b2d8      	uxtb	r0, r3
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	335c      	adds	r3, #92	; 0x5c
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	4601      	mov	r1, r0
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f008 fdac 	bl	800ae3c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	3350      	adds	r3, #80	; 0x50
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	f083 0301 	eor.w	r3, r3, #1
 80022fa:	b2d8      	uxtb	r0, r3
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	3350      	adds	r3, #80	; 0x50
 800230c:	4602      	mov	r2, r0
 800230e:	701a      	strb	r2, [r3, #0]
}
 8002310:	e1f7      	b.n	8002702 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b02      	cmp	r3, #2
 8002326:	f040 811a 	bne.w	800255e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	0151      	lsls	r1, r2, #5
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	440a      	add	r2, r1
 8002340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002344:	f023 0302 	bic.w	r3, r3, #2
 8002348:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	335d      	adds	r3, #93	; 0x5d
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d10a      	bne.n	8002376 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	335c      	adds	r3, #92	; 0x5c
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	e0d9      	b.n	800252a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	335d      	adds	r3, #93	; 0x5d
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d10a      	bne.n	80023a2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	335c      	adds	r3, #92	; 0x5c
 800239c:	2205      	movs	r2, #5
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e0c3      	b.n	800252a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	335d      	adds	r3, #93	; 0x5d
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b06      	cmp	r3, #6
 80023b6:	d00a      	beq.n	80023ce <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	335d      	adds	r3, #93	; 0x5d
 80023c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d156      	bne.n	800247c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3358      	adds	r3, #88	; 0x58
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	1c59      	adds	r1, r3, #1
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4403      	add	r3, r0
 80023f0:	3358      	adds	r3, #88	; 0x58
 80023f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	440b      	add	r3, r1
 8002402:	3358      	adds	r3, #88	; 0x58
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d914      	bls.n	8002434 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	3358      	adds	r3, #88	; 0x58
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	335c      	adds	r3, #92	; 0x5c
 800242e:	2204      	movs	r2, #4
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	e009      	b.n	8002448 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	335c      	adds	r3, #92	; 0x5c
 8002444:	2202      	movs	r2, #2
 8002446:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800245e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002466:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e056      	b.n	800252a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	335d      	adds	r3, #93	; 0x5d
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d123      	bne.n	80024da <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	335c      	adds	r3, #92	; 0x5c
 80024a2:	2202      	movs	r2, #2
 80024a4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024bc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024c4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	461a      	mov	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	e027      	b.n	800252a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	335d      	adds	r3, #93	; 0x5d
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b07      	cmp	r3, #7
 80024ee:	d11c      	bne.n	800252a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	3358      	adds	r3, #88	; 0x58
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	1c59      	adds	r1, r3, #1
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4403      	add	r3, r0
 8002512:	3358      	adds	r3, #88	; 0x58
 8002514:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	335c      	adds	r3, #92	; 0x5c
 8002526:	2204      	movs	r2, #4
 8002528:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	461a      	mov	r2, r3
 8002538:	2302      	movs	r3, #2
 800253a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	b2d8      	uxtb	r0, r3
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	335c      	adds	r3, #92	; 0x5c
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4601      	mov	r1, r0
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f008 fc70 	bl	800ae3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800255c:	e0d1      	b.n	8002702 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d13e      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	0151      	lsls	r1, r2, #5
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	440a      	add	r2, r1
 800258a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	3358      	adds	r3, #88	; 0x58
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1c59      	adds	r1, r3, #1
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4403      	add	r3, r0
 80025b6:	3358      	adds	r3, #88	; 0x58
 80025b8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	440b      	add	r3, r1
 80025c8:	335d      	adds	r3, #93	; 0x5d
 80025ca:	2206      	movs	r2, #6
 80025cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fcce 	bl	8005f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	461a      	mov	r2, r3
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	6093      	str	r3, [r2, #8]
}
 80025f0:	e087      	b.n	8002702 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b10      	cmp	r3, #16
 8002606:	d17c      	bne.n	8002702 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	333f      	adds	r3, #63	; 0x3f
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d122      	bne.n	8002664 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	3358      	adds	r3, #88	; 0x58
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	0151      	lsls	r1, r2, #5
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	440a      	add	r2, r1
 8002648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fc8c 	bl	8005f7a <USB_HC_Halt>
 8002662:	e045      	b.n	80026f0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	333f      	adds	r3, #63	; 0x3f
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	440b      	add	r3, r1
 8002688:	333f      	adds	r3, #63	; 0x3f
 800268a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800268c:	2b02      	cmp	r3, #2
 800268e:	d12f      	bne.n	80026f0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	3358      	adds	r3, #88	; 0x58
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d121      	bne.n	80026f0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	335d      	adds	r3, #93	; 0x5d
 80026bc:	2203      	movs	r2, #3
 80026be:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	0151      	lsls	r1, r2, #5
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	440a      	add	r2, r1
 80026d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fc45 	bl	8005f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fc:	461a      	mov	r2, r3
 80026fe:	2310      	movs	r3, #16
 8002700:	6093      	str	r3, [r2, #8]
}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d119      	bne.n	800276e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	461a      	mov	r2, r3
 8002748:	2304      	movs	r3, #4
 800274a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	0151      	lsls	r1, r2, #5
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	440a      	add	r2, r1
 8002762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800276c:	e33e      	b.n	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b20      	cmp	r3, #32
 8002782:	d141      	bne.n	8002808 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	461a      	mov	r2, r3
 8002792:	2320      	movs	r3, #32
 8002794:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	333d      	adds	r3, #61	; 0x3d
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	f040 831f 	bne.w	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	333d      	adds	r3, #61	; 0x3d
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	335c      	adds	r3, #92	; 0x5c
 80027d2:	2202      	movs	r2, #2
 80027d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	0151      	lsls	r1, r2, #5
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	440a      	add	r2, r1
 80027ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f003 fbba 	bl	8005f7a <USB_HC_Halt>
}
 8002806:	e2f1      	b.n	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b40      	cmp	r3, #64	; 0x40
 800281c:	d13f      	bne.n	800289e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	335d      	adds	r3, #93	; 0x5d
 800282e:	2204      	movs	r2, #4
 8002830:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	333d      	adds	r3, #61	; 0x3d
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	3358      	adds	r3, #88	; 0x58
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	0151      	lsls	r1, r2, #5
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	440a      	add	r2, r1
 8002870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fb78 	bl	8005f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	461a      	mov	r2, r3
 8002898:	2340      	movs	r3, #64	; 0x40
 800289a:	6093      	str	r3, [r2, #8]
}
 800289c:	e2a6      	b.n	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b4:	d122      	bne.n	80028fc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	0151      	lsls	r1, r2, #5
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	440a      	add	r2, r1
 80028cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 fb4a 	bl	8005f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	461a      	mov	r2, r3
 80028f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f8:	6093      	str	r3, [r2, #8]
}
 80028fa:	e277      	b.n	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	d135      	bne.n	800297e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	3358      	adds	r3, #88	; 0x58
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	0151      	lsls	r1, r2, #5
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	440a      	add	r2, r1
 800293c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f003 fb12 	bl	8005f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	461a      	mov	r2, r3
 8002964:	2301      	movs	r3, #1
 8002966:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	335d      	adds	r3, #93	; 0x5d
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
}
 800297c:	e236      	b.n	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b08      	cmp	r3, #8
 8002992:	d12b      	bne.n	80029ec <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	461a      	mov	r2, r3
 80029a2:	2308      	movs	r3, #8
 80029a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	0151      	lsls	r1, r2, #5
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	440a      	add	r2, r1
 80029bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 fad2 	bl	8005f7a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	440b      	add	r3, r1
 80029e4:	335d      	adds	r3, #93	; 0x5d
 80029e6:	2205      	movs	r2, #5
 80029e8:	701a      	strb	r2, [r3, #0]
}
 80029ea:	e1ff      	b.n	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d155      	bne.n	8002aae <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	3358      	adds	r3, #88	; 0x58
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	335d      	adds	r3, #93	; 0x5d
 8002a26:	2203      	movs	r2, #3
 8002a28:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	333d      	adds	r3, #61	; 0x3d
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d114      	bne.n	8002a6a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	333c      	adds	r3, #60	; 0x3c
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	333d      	adds	r3, #61	; 0x3d
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	0151      	lsls	r1, r2, #5
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	440a      	add	r2, r1
 8002a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fa70 	bl	8005f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	6093      	str	r3, [r2, #8]
}
 8002aac:	e19e      	b.n	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d12b      	bne.n	8002b1c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	0151      	lsls	r1, r2, #5
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	440a      	add	r2, r1
 8002ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ade:	f043 0302 	orr.w	r3, r3, #2
 8002ae2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fa43 	bl	8005f7a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	335d      	adds	r3, #93	; 0x5d
 8002b04:	2206      	movs	r2, #6
 8002b06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	6093      	str	r3, [r2, #8]
}
 8002b1a:	e167      	b.n	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	d135      	bne.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	0151      	lsls	r1, r2, #5
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	440a      	add	r2, r1
 8002b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b4e:	f043 0302 	orr.w	r3, r3, #2
 8002b52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f003 fa0b 	bl	8005f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	461a      	mov	r2, r3
 8002b72:	2310      	movs	r3, #16
 8002b74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	461a      	mov	r2, r3
 8002b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	335d      	adds	r3, #93	; 0x5d
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	701a      	strb	r2, [r3, #0]
}
 8002b9e:	e125      	b.n	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f040 811a 	bne.w	8002dec <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	0151      	lsls	r1, r2, #5
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	440a      	add	r2, r1
 8002bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd2:	f023 0302 	bic.w	r3, r3, #2
 8002bd6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	335d      	adds	r3, #93	; 0x5d
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d137      	bne.n	8002c5e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	335c      	adds	r3, #92	; 0x5c
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	333f      	adds	r3, #63	; 0x3f
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d00b      	beq.n	8002c30 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	333f      	adds	r3, #63	; 0x3f
 8002c28:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	f040 80c5 	bne.w	8002dba <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3351      	adds	r3, #81	; 0x51
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	f083 0301 	eor.w	r3, r3, #1
 8002c46:	b2d8      	uxtb	r0, r3
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	3351      	adds	r3, #81	; 0x51
 8002c58:	4602      	mov	r2, r0
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e0ad      	b.n	8002dba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	335d      	adds	r3, #93	; 0x5d
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d10a      	bne.n	8002c8a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	335c      	adds	r3, #92	; 0x5c
 8002c84:	2202      	movs	r2, #2
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e097      	b.n	8002dba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	335d      	adds	r3, #93	; 0x5d
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d10a      	bne.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	335c      	adds	r3, #92	; 0x5c
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e081      	b.n	8002dba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	335d      	adds	r3, #93	; 0x5d
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d10a      	bne.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	335c      	adds	r3, #92	; 0x5c
 8002cdc:	2205      	movs	r2, #5
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e06b      	b.n	8002dba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	335d      	adds	r3, #93	; 0x5d
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d00a      	beq.n	8002d0e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	335d      	adds	r3, #93	; 0x5d
 8002d08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d155      	bne.n	8002dba <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3358      	adds	r3, #88	; 0x58
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1c59      	adds	r1, r3, #1
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4403      	add	r3, r0
 8002d30:	3358      	adds	r3, #88	; 0x58
 8002d32:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	440b      	add	r3, r1
 8002d42:	3358      	adds	r3, #88	; 0x58
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d914      	bls.n	8002d74 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	3358      	adds	r3, #88	; 0x58
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	335c      	adds	r3, #92	; 0x5c
 8002d6e:	2204      	movs	r2, #4
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e009      	b.n	8002d88 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	335c      	adds	r3, #92	; 0x5c
 8002d84:	2202      	movs	r2, #2
 8002d86:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d9e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2302      	movs	r3, #2
 8002dca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	b2d8      	uxtb	r0, r3
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	335c      	adds	r3, #92	; 0x5c
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	4601      	mov	r1, r0
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f008 f828 	bl	800ae3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dec:	bf00      	nop
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	0c5b      	lsrs	r3, r3, #17
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e28:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d003      	beq.n	8002e38 <HCD_RXQLVL_IRQHandler+0x44>
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	f000 8082 	beq.w	8002f3a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e36:	e083      	b.n	8002f40 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d07f      	beq.n	8002f3e <HCD_RXQLVL_IRQHandler+0x14a>
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3344      	adds	r3, #68	; 0x44
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d074      	beq.n	8002f3e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	3344      	adds	r3, #68	; 0x44
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	b292      	uxth	r2, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f002 fc21 	bl	80056b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	3344      	adds	r3, #68	; 0x44
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	18d1      	adds	r1, r2, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4403      	add	r3, r0
 8002e98:	3344      	adds	r3, #68	; 0x44
 8002e9a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	334c      	adds	r3, #76	; 0x4c
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	18d1      	adds	r1, r2, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4403      	add	r3, r0
 8002ec0:	334c      	adds	r3, #76	; 0x4c
 8002ec2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HCD_RXQLVL_IRQHandler+0x154>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d031      	beq.n	8002f3e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ef0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ef8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	3350      	adds	r3, #80	; 0x50
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	f083 0301 	eor.w	r3, r3, #1
 8002f22:	b2d8      	uxtb	r0, r3
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	440b      	add	r3, r1
 8002f32:	3350      	adds	r3, #80	; 0x50
 8002f34:	4602      	mov	r2, r0
 8002f36:	701a      	strb	r2, [r3, #0]
      break;
 8002f38:	e001      	b.n	8002f3e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002f3e:	bf00      	nop
  }
}
 8002f40:	bf00      	nop
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	1ff80000 	.word	0x1ff80000

08002f4c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f78:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d10b      	bne.n	8002f9c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f007 ff38 	bl	800ae04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f043 0302 	orr.w	r3, r3, #2
 8002f9a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d132      	bne.n	800300c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f043 0308 	orr.w	r3, r3, #8
 8002fac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d126      	bne.n	8003006 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d113      	bne.n	8002fe8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fca:	d106      	bne.n	8002fda <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 fcaa 	bl	800592c <USB_InitFSLSPClkSel>
 8002fd8:	e011      	b.n	8002ffe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 fca3 	bl	800592c <USB_InitFSLSPClkSel>
 8002fe6:	e00a      	b.n	8002ffe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ffc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f007 ff2e 	bl	800ae60 <HAL_HCD_PortEnabled_Callback>
 8003004:	e002      	b.n	800300c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f007 ff38 	bl	800ae7c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b20      	cmp	r3, #32
 8003014:	d103      	bne.n	800301e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f043 0320 	orr.w	r3, r3, #32
 800301c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003024:	461a      	mov	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6013      	str	r3, [r2, #0]
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e11f      	b.n	8003286 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd fd80 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2224      	movs	r2, #36	; 0x24
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003098:	f001 f9de 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 800309c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4a7b      	ldr	r2, [pc, #492]	; (8003290 <HAL_I2C_Init+0x25c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d807      	bhi.n	80030b8 <HAL_I2C_Init+0x84>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a7a      	ldr	r2, [pc, #488]	; (8003294 <HAL_I2C_Init+0x260>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	bf94      	ite	ls
 80030b0:	2301      	movls	r3, #1
 80030b2:	2300      	movhi	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	e006      	b.n	80030c6 <HAL_I2C_Init+0x92>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a77      	ldr	r2, [pc, #476]	; (8003298 <HAL_I2C_Init+0x264>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	bf94      	ite	ls
 80030c0:	2301      	movls	r3, #1
 80030c2:	2300      	movhi	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0db      	b.n	8003286 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a72      	ldr	r2, [pc, #456]	; (800329c <HAL_I2C_Init+0x268>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	0c9b      	lsrs	r3, r3, #18
 80030d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a64      	ldr	r2, [pc, #400]	; (8003290 <HAL_I2C_Init+0x25c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d802      	bhi.n	8003108 <HAL_I2C_Init+0xd4>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	3301      	adds	r3, #1
 8003106:	e009      	b.n	800311c <HAL_I2C_Init+0xe8>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	4a63      	ldr	r2, [pc, #396]	; (80032a0 <HAL_I2C_Init+0x26c>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	3301      	adds	r3, #1
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	430b      	orrs	r3, r1
 8003122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800312e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4956      	ldr	r1, [pc, #344]	; (8003290 <HAL_I2C_Init+0x25c>)
 8003138:	428b      	cmp	r3, r1
 800313a:	d80d      	bhi.n	8003158 <HAL_I2C_Init+0x124>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e59      	subs	r1, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fbb1 f3f3 	udiv	r3, r1, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003150:	2b04      	cmp	r3, #4
 8003152:	bf38      	it	cc
 8003154:	2304      	movcc	r3, #4
 8003156:	e04f      	b.n	80031f8 <HAL_I2C_Init+0x1c4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d111      	bne.n	8003184 <HAL_I2C_Init+0x150>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1e58      	subs	r0, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	440b      	add	r3, r1
 800316e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003172:	3301      	adds	r3, #1
 8003174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e012      	b.n	80031aa <HAL_I2C_Init+0x176>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	0099      	lsls	r1, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Init+0x17e>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e022      	b.n	80031f8 <HAL_I2C_Init+0x1c4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10e      	bne.n	80031d8 <HAL_I2C_Init+0x1a4>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1e58      	subs	r0, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	440b      	add	r3, r1
 80031c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d6:	e00f      	b.n	80031f8 <HAL_I2C_Init+0x1c4>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e58      	subs	r0, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	0099      	lsls	r1, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	6809      	ldr	r1, [r1, #0]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6911      	ldr	r1, [r2, #16]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68d2      	ldr	r2, [r2, #12]
 8003232:	4311      	orrs	r1, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	430b      	orrs	r3, r1
 800323a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	000186a0 	.word	0x000186a0
 8003294:	001e847f 	.word	0x001e847f
 8003298:	003d08ff 	.word	0x003d08ff
 800329c:	431bde83 	.word	0x431bde83
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e128      	b.n	8003508 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a90      	ldr	r2, [pc, #576]	; (8003510 <HAL_I2S_Init+0x26c>)
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7fd fc8d 	bl	8000bf0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032ec:	f023 030f 	bic.w	r3, r3, #15
 80032f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2202      	movs	r2, #2
 80032f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d060      	beq.n	80033c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800330a:	2310      	movs	r3, #16
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e001      	b.n	8003314 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003310:	2320      	movs	r3, #32
 8003312:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b20      	cmp	r3, #32
 800331a:	d802      	bhi.n	8003322 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003322:	2001      	movs	r0, #1
 8003324:	f001 f9d4 	bl	80046d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003328:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003332:	d125      	bne.n	8003380 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d010      	beq.n	800335e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	fbb2 f2f3 	udiv	r2, r2, r3
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	461a      	mov	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	3305      	adds	r3, #5
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	e01f      	b.n	800339e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	fbb2 f2f3 	udiv	r2, r2, r3
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	461a      	mov	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	3305      	adds	r3, #5
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	e00e      	b.n	800339e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fbb2 f2f3 	udiv	r2, r2, r3
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	461a      	mov	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	fbb2 f3f3 	udiv	r3, r2, r3
 800339a:	3305      	adds	r3, #5
 800339c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4a5c      	ldr	r2, [pc, #368]	; (8003514 <HAL_I2S_Init+0x270>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	08db      	lsrs	r3, r3, #3
 80033a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	e003      	b.n	80033cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033c4:	2302      	movs	r3, #2
 80033c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d902      	bls.n	80033d8 <HAL_I2S_Init+0x134>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	2bff      	cmp	r3, #255	; 0xff
 80033d6:	d907      	bls.n	80033e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	f043 0210 	orr.w	r2, r3, #16
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e08f      	b.n	8003508 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	ea42 0103 	orr.w	r1, r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003406:	f023 030f 	bic.w	r3, r3, #15
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6851      	ldr	r1, [r2, #4]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6892      	ldr	r2, [r2, #8]
 8003412:	4311      	orrs	r1, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68d2      	ldr	r2, [r2, #12]
 8003418:	4311      	orrs	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6992      	ldr	r2, [r2, #24]
 800341e:	430a      	orrs	r2, r1
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800342a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d161      	bne.n	80034f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a38      	ldr	r2, [pc, #224]	; (8003518 <HAL_I2S_Init+0x274>)
 8003438:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a37      	ldr	r2, [pc, #220]	; (800351c <HAL_I2S_Init+0x278>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <HAL_I2S_Init+0x1a4>
 8003444:	4b36      	ldr	r3, [pc, #216]	; (8003520 <HAL_I2S_Init+0x27c>)
 8003446:	e001      	b.n	800344c <HAL_I2S_Init+0x1a8>
 8003448:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	4932      	ldr	r1, [pc, #200]	; (800351c <HAL_I2S_Init+0x278>)
 8003454:	428a      	cmp	r2, r1
 8003456:	d101      	bne.n	800345c <HAL_I2S_Init+0x1b8>
 8003458:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_I2S_Init+0x27c>)
 800345a:	e001      	b.n	8003460 <HAL_I2S_Init+0x1bc>
 800345c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003460:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003464:	f023 030f 	bic.w	r3, r3, #15
 8003468:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2b      	ldr	r2, [pc, #172]	; (800351c <HAL_I2S_Init+0x278>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_I2S_Init+0x1d4>
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_I2S_Init+0x27c>)
 8003476:	e001      	b.n	800347c <HAL_I2S_Init+0x1d8>
 8003478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800347c:	2202      	movs	r2, #2
 800347e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a25      	ldr	r2, [pc, #148]	; (800351c <HAL_I2S_Init+0x278>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_I2S_Init+0x1ea>
 800348a:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_I2S_Init+0x27c>)
 800348c:	e001      	b.n	8003492 <HAL_I2S_Init+0x1ee>
 800348e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349e:	d003      	beq.n	80034a8 <HAL_I2S_Init+0x204>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e001      	b.n	80034b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	b299      	uxth	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80034ca:	4303      	orrs	r3, r0
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	430b      	orrs	r3, r1
 80034d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80034d2:	4313      	orrs	r3, r2
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	897b      	ldrh	r3, [r7, #10]
 80034d8:	4313      	orrs	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a0d      	ldr	r2, [pc, #52]	; (800351c <HAL_I2S_Init+0x278>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_I2S_Init+0x24c>
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <HAL_I2S_Init+0x27c>)
 80034ee:	e001      	b.n	80034f4 <HAL_I2S_Init+0x250>
 80034f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f4:	897a      	ldrh	r2, [r7, #10]
 80034f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	0800361b 	.word	0x0800361b
 8003514:	cccccccd 	.word	0xcccccccd
 8003518:	08003731 	.word	0x08003731
 800351c:	40003800 	.word	0x40003800
 8003520:	40003400 	.word	0x40003400

08003524 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	1c9a      	adds	r2, r3, #2
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10e      	bne.n	80035b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ffb8 	bl	8003524 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	b292      	uxth	r2, r2
 80035d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	1c9a      	adds	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10e      	bne.n	8003612 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003602:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff93 	bl	8003538 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b04      	cmp	r3, #4
 8003634:	d13a      	bne.n	80036ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d109      	bne.n	8003654 <I2S_IRQHandler+0x3a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d102      	bne.n	8003654 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ffb4 	bl	80035bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d126      	bne.n	80036ac <I2S_IRQHandler+0x92>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b20      	cmp	r3, #32
 800366a:	d11f      	bne.n	80036ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800367a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f043 0202 	orr.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff50 	bl	800354c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d136      	bne.n	8003726 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d109      	bne.n	80036d6 <I2S_IRQHandler+0xbc>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d102      	bne.n	80036d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff45 	bl	8003560 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d122      	bne.n	8003726 <I2S_IRQHandler+0x10c>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d11b      	bne.n	8003726 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	f043 0204 	orr.w	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ff13 	bl	800354c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4aa2      	ldr	r2, [pc, #648]	; (80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800374a:	4ba2      	ldr	r3, [pc, #648]	; (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800374c:	e001      	b.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800374e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a9b      	ldr	r2, [pc, #620]	; (80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d101      	bne.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003768:	4b9a      	ldr	r3, [pc, #616]	; (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800376a:	e001      	b.n	8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800376c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377c:	d004      	beq.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f040 8099 	bne.w	80038ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d107      	bne.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f925 	bl	80039ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d107      	bne.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9c8 	bl	8003b4c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b40      	cmp	r3, #64	; 0x40
 80037c4:	d13a      	bne.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d035      	beq.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7e      	ldr	r2, [pc, #504]	; (80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037da:	4b7e      	ldr	r3, [pc, #504]	; (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037dc:	e001      	b.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4979      	ldr	r1, [pc, #484]	; (80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ea:	428b      	cmp	r3, r1
 80037ec:	d101      	bne.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037ee:	4b79      	ldr	r3, [pc, #484]	; (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037f0:	e001      	b.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800380a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff fe88 	bl	800354c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b08      	cmp	r3, #8
 8003844:	f040 80be 	bne.w	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80b8 	beq.w	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003862:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a59      	ldr	r2, [pc, #356]	; (80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800386e:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003870:	e001      	b.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4954      	ldr	r1, [pc, #336]	; (80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800387e:	428b      	cmp	r3, r1
 8003880:	d101      	bne.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003882:	4b54      	ldr	r3, [pc, #336]	; (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003884:	e001      	b.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800388e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f043 0204 	orr.w	r2, r3, #4
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff fe4a 	bl	800354c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038b8:	e084      	b.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d107      	bne.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8be 	bl	8003a50 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f8fd 	bl	8003ae8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d12f      	bne.n	8003958 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02a      	beq.n	8003958 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003910:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a2e      	ldr	r2, [pc, #184]	; (80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800391c:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800391e:	e001      	b.n	8003924 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4929      	ldr	r1, [pc, #164]	; (80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800392c:	428b      	cmp	r3, r1
 800392e:	d101      	bne.n	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003932:	e001      	b.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003938:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800393c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f043 0202 	orr.w	r2, r3, #2
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fdfa 	bl	800354c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b08      	cmp	r3, #8
 8003960:	d131      	bne.n	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02c      	beq.n	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d101      	bne.n	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003976:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003978:	e001      	b.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800397a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4912      	ldr	r1, [pc, #72]	; (80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003986:	428b      	cmp	r3, r1
 8003988:	d101      	bne.n	800398e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800398a:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800398c:	e001      	b.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800398e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003992:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003996:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039a6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f043 0204 	orr.w	r2, r3, #4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fdc5 	bl	800354c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039c2:	e000      	b.n	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039c4:	bf00      	nop
}
 80039c6:	bf00      	nop
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40003800 	.word	0x40003800
 80039d4:	40003400 	.word	0x40003400

080039d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c99      	adds	r1, r3, #2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6251      	str	r1, [r2, #36]	; 0x24
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d113      	bne.n	8003a46 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d106      	bne.n	8003a46 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ffc9 	bl	80039d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	1c99      	adds	r1, r3, #2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6251      	str	r1, [r2, #36]	; 0x24
 8003a62:	8819      	ldrh	r1, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1d      	ldr	r2, [pc, #116]	; (8003ae0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d101      	bne.n	8003a72 <I2SEx_TxISR_I2SExt+0x22>
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a70:	e001      	b.n	8003a76 <I2SEx_TxISR_I2SExt+0x26>
 8003a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a76:	460a      	mov	r2, r1
 8003a78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d121      	bne.n	8003ad6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d101      	bne.n	8003aa0 <I2SEx_TxISR_I2SExt+0x50>
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a9e:	e001      	b.n	8003aa4 <I2SEx_TxISR_I2SExt+0x54>
 8003aa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	490d      	ldr	r1, [pc, #52]	; (8003ae0 <I2SEx_TxISR_I2SExt+0x90>)
 8003aac:	428b      	cmp	r3, r1
 8003aae:	d101      	bne.n	8003ab4 <I2SEx_TxISR_I2SExt+0x64>
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <I2SEx_TxISR_I2SExt+0x94>)
 8003ab2:	e001      	b.n	8003ab8 <I2SEx_TxISR_I2SExt+0x68>
 8003ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003abc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff81 	bl	80039d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40003800 	.word	0x40003800
 8003ae4:	40003400 	.word	0x40003400

08003ae8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68d8      	ldr	r0, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	1c99      	adds	r1, r3, #2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b00:	b282      	uxth	r2, r0
 8003b02:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d113      	bne.n	8003b44 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b2a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff4a 	bl	80039d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <I2SEx_RxISR_I2SExt+0x90>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <I2SEx_RxISR_I2SExt+0x16>
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b60:	e001      	b.n	8003b66 <I2SEx_RxISR_I2SExt+0x1a>
 8003b62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b66:	68d8      	ldr	r0, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	1c99      	adds	r1, r3, #2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b72:	b282      	uxth	r2, r0
 8003b74:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d121      	bne.n	8003bd2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <I2SEx_RxISR_I2SExt+0x90>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <I2SEx_RxISR_I2SExt+0x50>
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b9a:	e001      	b.n	8003ba0 <I2SEx_RxISR_I2SExt+0x54>
 8003b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	490d      	ldr	r1, [pc, #52]	; (8003bdc <I2SEx_RxISR_I2SExt+0x90>)
 8003ba8:	428b      	cmp	r3, r1
 8003baa:	d101      	bne.n	8003bb0 <I2SEx_RxISR_I2SExt+0x64>
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <I2SEx_RxISR_I2SExt+0x94>)
 8003bae:	e001      	b.n	8003bb4 <I2SEx_RxISR_I2SExt+0x68>
 8003bb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bb8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ff03 	bl	80039d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40003800 	.word	0x40003800
 8003be0:	40003400 	.word	0x40003400

08003be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e25b      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d075      	beq.n	8003cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c02:	4ba3      	ldr	r3, [pc, #652]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d00c      	beq.n	8003c28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0e:	4ba0      	ldr	r3, [pc, #640]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d112      	bne.n	8003c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1a:	4b9d      	ldr	r3, [pc, #628]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c26:	d10b      	bne.n	8003c40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c28:	4b99      	ldr	r3, [pc, #612]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d05b      	beq.n	8003cec <HAL_RCC_OscConfig+0x108>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d157      	bne.n	8003cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e236      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c48:	d106      	bne.n	8003c58 <HAL_RCC_OscConfig+0x74>
 8003c4a:	4b91      	ldr	r3, [pc, #580]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a90      	ldr	r2, [pc, #576]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e01d      	b.n	8003c94 <HAL_RCC_OscConfig+0xb0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x98>
 8003c62:	4b8b      	ldr	r3, [pc, #556]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a8a      	ldr	r2, [pc, #552]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	4b88      	ldr	r3, [pc, #544]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a87      	ldr	r2, [pc, #540]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCC_OscConfig+0xb0>
 8003c7c:	4b84      	ldr	r3, [pc, #528]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a83      	ldr	r2, [pc, #524]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b81      	ldr	r3, [pc, #516]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a80      	ldr	r2, [pc, #512]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d013      	beq.n	8003cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fd f9e2 	bl	8001064 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fd f9de 	bl	8001064 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e1fb      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xc0>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fd f9ce 	bl	8001064 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7fd f9ca 	bl	8001064 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e1e7      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cde:	4b6c      	ldr	r3, [pc, #432]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0xe8>
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d063      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfa:	4b65      	ldr	r3, [pc, #404]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d06:	4b62      	ldr	r3, [pc, #392]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d11c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d12:	4b5f      	ldr	r3, [pc, #380]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d116      	bne.n	8003d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_RCC_OscConfig+0x152>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e1bb      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d36:	4b56      	ldr	r3, [pc, #344]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4952      	ldr	r1, [pc, #328]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	e03a      	b.n	8003dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d020      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d54:	4b4f      	ldr	r3, [pc, #316]	; (8003e94 <HAL_RCC_OscConfig+0x2b0>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd f983 	bl	8001064 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d62:	f7fd f97f 	bl	8001064 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e19c      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d74:	4b46      	ldr	r3, [pc, #280]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d80:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4940      	ldr	r1, [pc, #256]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]
 8003d94:	e015      	b.n	8003dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d96:	4b3f      	ldr	r3, [pc, #252]	; (8003e94 <HAL_RCC_OscConfig+0x2b0>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fd f962 	bl	8001064 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da4:	f7fd f95e 	bl	8001064 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e17b      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db6:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d030      	beq.n	8003e30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d016      	beq.n	8003e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd6:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <HAL_RCC_OscConfig+0x2b4>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ddc:	f7fd f942 	bl	8001064 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de4:	f7fd f93e 	bl	8001064 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e15b      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x200>
 8003e02:	e015      	b.n	8003e30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <HAL_RCC_OscConfig+0x2b4>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0a:	f7fd f92b 	bl	8001064 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e12:	f7fd f927 	bl	8001064 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e144      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f0      	bne.n	8003e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80a0 	beq.w	8003f7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_OscConfig+0x2b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d121      	bne.n	8003ebe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_RCC_OscConfig+0x2b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <HAL_RCC_OscConfig+0x2b8>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7fd f8ed 	bl	8001064 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	e011      	b.n	8003eb2 <HAL_RCC_OscConfig+0x2ce>
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	42470000 	.word	0x42470000
 8003e98:	42470e80 	.word	0x42470e80
 8003e9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea0:	f7fd f8e0 	bl	8001064 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e0fd      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb2:	4b81      	ldr	r3, [pc, #516]	; (80040b8 <HAL_RCC_OscConfig+0x4d4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d106      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x2f0>
 8003ec6:	4b7d      	ldr	r3, [pc, #500]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a7c      	ldr	r2, [pc, #496]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed2:	e01c      	b.n	8003f0e <HAL_RCC_OscConfig+0x32a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x312>
 8003edc:	4b77      	ldr	r3, [pc, #476]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a76      	ldr	r2, [pc, #472]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003ee2:	f043 0304 	orr.w	r3, r3, #4
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	4b74      	ldr	r3, [pc, #464]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a73      	ldr	r2, [pc, #460]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	e00b      	b.n	8003f0e <HAL_RCC_OscConfig+0x32a>
 8003ef6:	4b71      	ldr	r3, [pc, #452]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a70      	ldr	r2, [pc, #448]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	4b6e      	ldr	r3, [pc, #440]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a6d      	ldr	r2, [pc, #436]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd f8a5 	bl	8001064 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fd f8a1 	bl	8001064 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0bc      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	4b61      	ldr	r3, [pc, #388]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ee      	beq.n	8003f1e <HAL_RCC_OscConfig+0x33a>
 8003f40:	e014      	b.n	8003f6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fd f88f 	bl	8001064 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fd f88b 	bl	8001064 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0a6      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f60:	4b56      	ldr	r3, [pc, #344]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f72:	4b52      	ldr	r3, [pc, #328]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	4a51      	ldr	r2, [pc, #324]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8092 	beq.w	80040ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f88:	4b4c      	ldr	r3, [pc, #304]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d05c      	beq.n	800404e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d141      	bne.n	8004020 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b48      	ldr	r3, [pc, #288]	; (80040c0 <HAL_RCC_OscConfig+0x4dc>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd f85f 	bl	8001064 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fd f85b 	bl	8001064 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e078      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbc:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	019b      	lsls	r3, r3, #6
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	061b      	lsls	r3, r3, #24
 8003fec:	4933      	ldr	r1, [pc, #204]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff2:	4b33      	ldr	r3, [pc, #204]	; (80040c0 <HAL_RCC_OscConfig+0x4dc>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fd f834 	bl	8001064 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd f830 	bl	8001064 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e04d      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	4b2a      	ldr	r3, [pc, #168]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x41c>
 800401e:	e045      	b.n	80040ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004020:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <HAL_RCC_OscConfig+0x4dc>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7fd f81d 	bl	8001064 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402e:	f7fd f819 	bl	8001064 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e036      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004040:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x44a>
 800404c:	e02e      	b.n	80040ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e029      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <HAL_RCC_OscConfig+0x4d8>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	429a      	cmp	r2, r3
 800406c:	d11c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d115      	bne.n	80040a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004082:	4013      	ands	r3, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004088:	4293      	cmp	r3, r2
 800408a:	d10d      	bne.n	80040a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40007000 	.word	0x40007000
 80040bc:	40023800 	.word	0x40023800
 80040c0:	42470060 	.word	0x42470060

080040c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0cc      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d8:	4b68      	ldr	r3, [pc, #416]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d90c      	bls.n	8004100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b65      	ldr	r3, [pc, #404]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b63      	ldr	r3, [pc, #396]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0b8      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004118:	4b59      	ldr	r3, [pc, #356]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a58      	ldr	r2, [pc, #352]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a52      	ldr	r2, [pc, #328]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413c:	4b50      	ldr	r3, [pc, #320]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	494d      	ldr	r1, [pc, #308]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d044      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b47      	ldr	r3, [pc, #284]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d119      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e07f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d003      	beq.n	8004182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	2b03      	cmp	r3, #3
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	4b3f      	ldr	r3, [pc, #252]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e06f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e067      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a2:	4b37      	ldr	r3, [pc, #220]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4934      	ldr	r1, [pc, #208]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b4:	f7fc ff56 	bl	8001064 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f7fc ff52 	bl	8001064 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e04f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 020c 	and.w	r2, r3, #12
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1eb      	bne.n	80041bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d20c      	bcs.n	800420c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b22      	ldr	r3, [pc, #136]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e032      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4916      	ldr	r1, [pc, #88]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800424a:	f000 f821 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800424e:	4601      	mov	r1, r0
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	5cd3      	ldrb	r3, [r2, r3]
 800425e:	fa21 f303 	lsr.w	r3, r1, r3
 8004262:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1c8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc fdc0 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40023c00 	.word	0x40023c00
 8004280:	40023800 	.word	0x40023800
 8004284:	0800b53c 	.word	0x0800b53c
 8004288:	20000000 	.word	0x20000000
 800428c:	20000004 	.word	0x20000004

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	2300      	movs	r3, #0
 80042a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a6:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d007      	beq.n	80042c2 <HAL_RCC_GetSysClockFreq+0x32>
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d008      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x38>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f040 80b4 	bne.w	8004424 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042bc:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042be:	60bb      	str	r3, [r7, #8]
       break;
 80042c0:	e0b3      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042c2:	4b5e      	ldr	r3, [pc, #376]	; (800443c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042c4:	60bb      	str	r3, [r7, #8]
      break;
 80042c6:	e0b0      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c8:	4b5a      	ldr	r3, [pc, #360]	; (8004434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d2:	4b58      	ldr	r3, [pc, #352]	; (8004434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d04a      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042de:	4b55      	ldr	r3, [pc, #340]	; (8004434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	099b      	lsrs	r3, r3, #6
 80042e4:	f04f 0400 	mov.w	r4, #0
 80042e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	ea03 0501 	and.w	r5, r3, r1
 80042f4:	ea04 0602 	and.w	r6, r4, r2
 80042f8:	4629      	mov	r1, r5
 80042fa:	4632      	mov	r2, r6
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	f04f 0400 	mov.w	r4, #0
 8004304:	0154      	lsls	r4, r2, #5
 8004306:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800430a:	014b      	lsls	r3, r1, #5
 800430c:	4619      	mov	r1, r3
 800430e:	4622      	mov	r2, r4
 8004310:	1b49      	subs	r1, r1, r5
 8004312:	eb62 0206 	sbc.w	r2, r2, r6
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	f04f 0400 	mov.w	r4, #0
 800431e:	0194      	lsls	r4, r2, #6
 8004320:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004324:	018b      	lsls	r3, r1, #6
 8004326:	1a5b      	subs	r3, r3, r1
 8004328:	eb64 0402 	sbc.w	r4, r4, r2
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	00e2      	lsls	r2, r4, #3
 8004336:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800433a:	00d9      	lsls	r1, r3, #3
 800433c:	460b      	mov	r3, r1
 800433e:	4614      	mov	r4, r2
 8004340:	195b      	adds	r3, r3, r5
 8004342:	eb44 0406 	adc.w	r4, r4, r6
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	0262      	lsls	r2, r4, #9
 8004350:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004354:	0259      	lsls	r1, r3, #9
 8004356:	460b      	mov	r3, r1
 8004358:	4614      	mov	r4, r2
 800435a:	4618      	mov	r0, r3
 800435c:	4621      	mov	r1, r4
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f04f 0400 	mov.w	r4, #0
 8004364:	461a      	mov	r2, r3
 8004366:	4623      	mov	r3, r4
 8004368:	f7fb ff32 	bl	80001d0 <__aeabi_uldivmod>
 800436c:	4603      	mov	r3, r0
 800436e:	460c      	mov	r4, r1
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e049      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004374:	4b2f      	ldr	r3, [pc, #188]	; (8004434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	099b      	lsrs	r3, r3, #6
 800437a:	f04f 0400 	mov.w	r4, #0
 800437e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	ea03 0501 	and.w	r5, r3, r1
 800438a:	ea04 0602 	and.w	r6, r4, r2
 800438e:	4629      	mov	r1, r5
 8004390:	4632      	mov	r2, r6
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	f04f 0400 	mov.w	r4, #0
 800439a:	0154      	lsls	r4, r2, #5
 800439c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043a0:	014b      	lsls	r3, r1, #5
 80043a2:	4619      	mov	r1, r3
 80043a4:	4622      	mov	r2, r4
 80043a6:	1b49      	subs	r1, r1, r5
 80043a8:	eb62 0206 	sbc.w	r2, r2, r6
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	f04f 0400 	mov.w	r4, #0
 80043b4:	0194      	lsls	r4, r2, #6
 80043b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043ba:	018b      	lsls	r3, r1, #6
 80043bc:	1a5b      	subs	r3, r3, r1
 80043be:	eb64 0402 	sbc.w	r4, r4, r2
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	00e2      	lsls	r2, r4, #3
 80043cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043d0:	00d9      	lsls	r1, r3, #3
 80043d2:	460b      	mov	r3, r1
 80043d4:	4614      	mov	r4, r2
 80043d6:	195b      	adds	r3, r3, r5
 80043d8:	eb44 0406 	adc.w	r4, r4, r6
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	02a2      	lsls	r2, r4, #10
 80043e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043ea:	0299      	lsls	r1, r3, #10
 80043ec:	460b      	mov	r3, r1
 80043ee:	4614      	mov	r4, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	4621      	mov	r1, r4
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f04f 0400 	mov.w	r4, #0
 80043fa:	461a      	mov	r2, r3
 80043fc:	4623      	mov	r3, r4
 80043fe:	f7fb fee7 	bl	80001d0 <__aeabi_uldivmod>
 8004402:	4603      	mov	r3, r0
 8004404:	460c      	mov	r4, r1
 8004406:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	3301      	adds	r3, #1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	60bb      	str	r3, [r7, #8]
      break;
 8004422:	e002      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004426:	60bb      	str	r3, [r7, #8]
      break;
 8004428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442a:	68bb      	ldr	r3, [r7, #8]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004434:	40023800 	.word	0x40023800
 8004438:	00f42400 	.word	0x00f42400
 800443c:	007a1200 	.word	0x007a1200

08004440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004444:	4b03      	ldr	r3, [pc, #12]	; (8004454 <HAL_RCC_GetHCLKFreq+0x14>)
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000000 	.word	0x20000000

08004458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800445c:	f7ff fff0 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 8004460:	4601      	mov	r1, r0
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0a9b      	lsrs	r3, r3, #10
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4a03      	ldr	r2, [pc, #12]	; (800447c <HAL_RCC_GetPCLK1Freq+0x24>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	0800b54c 	.word	0x0800b54c

08004480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004484:	f7ff ffdc 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 8004488:	4601      	mov	r1, r0
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	0b5b      	lsrs	r3, r3, #13
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4a03      	ldr	r2, [pc, #12]	; (80044a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40023800 	.word	0x40023800
 80044a4:	0800b54c 	.word	0x0800b54c

080044a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	220f      	movs	r2, #15
 80044b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0203 	and.w	r2, r3, #3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044c4:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	08db      	lsrs	r3, r3, #3
 80044e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_RCC_GetClockConfig+0x60>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 020f 	and.w	r2, r3, #15
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	601a      	str	r2, [r3, #0]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800
 8004508:	40023c00 	.word	0x40023c00

0800450c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004530:	2b00      	cmp	r3, #0
 8004532:	d035      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004534:	4b62      	ldr	r3, [pc, #392]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800453a:	f7fc fd93 	bl	8001064 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004542:	f7fc fd8f 	bl	8001064 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0b0      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004554:	4b5b      	ldr	r3, [pc, #364]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	019a      	lsls	r2, r3, #6
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	071b      	lsls	r3, r3, #28
 800456c:	4955      	ldr	r1, [pc, #340]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004574:	4b52      	ldr	r3, [pc, #328]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800457a:	f7fc fd73 	bl	8001064 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004582:	f7fc fd6f 	bl	8001064 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e090      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004594:	4b4b      	ldr	r3, [pc, #300]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8083 	beq.w	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	4b44      	ldr	r3, [pc, #272]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	4a43      	ldr	r2, [pc, #268]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045bc:	6413      	str	r3, [r2, #64]	; 0x40
 80045be:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045ca:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3e      	ldr	r2, [pc, #248]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045d6:	f7fc fd45 	bl	8001064 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045de:	f7fc fd41 	bl	8001064 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e062      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045fc:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004604:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02f      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	429a      	cmp	r2, r3
 8004618:	d028      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004622:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004624:	4b29      	ldr	r3, [pc, #164]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004630:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b01      	cmp	r3, #1
 8004640:	d114      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004642:	f7fc fd0f 	bl	8001064 <HAL_GetTick>
 8004646:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004648:	e00a      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fc fd0b 	bl	8001064 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e02a      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ee      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004678:	d10d      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	490d      	ldr	r1, [pc, #52]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]
 8004694:	e005      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046a0:	6093      	str	r3, [r2, #8]
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ae:	4905      	ldr	r1, [pc, #20]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	42470068 	.word	0x42470068
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40007000 	.word	0x40007000
 80046cc:	42470e40 	.word	0x42470e40

080046d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d13d      	bne.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046f6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d12f      	bne.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004702:	4b1e      	ldr	r3, [pc, #120]	; (800477c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004704:	617b      	str	r3, [r7, #20]
          break;
 8004706:	e02f      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004714:	d108      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800471e:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e007      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800473a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800474e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004752:	0f1b      	lsrs	r3, r3, #28
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	617b      	str	r3, [r7, #20]
          break;
 8004760:	e002      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
          break;
 8004766:	bf00      	nop
        }
      }
      break;
 8004768:	bf00      	nop
    }
  }
  return frequency;
 800476a:	697b      	ldr	r3, [r7, #20]
}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	40023800 	.word	0x40023800
 800477c:	00bb8000 	.word	0x00bb8000
 8004780:	007a1200 	.word	0x007a1200
 8004784:	00f42400 	.word	0x00f42400

08004788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e056      	b.n	8004848 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7fc fa83 	bl	8000cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	ea42 0103 	orr.w	r1, r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	f003 0104 	and.w	r1, r3, #4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004836:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e01d      	b.n	800489e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f815 	bl	80048a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f000 f968 	bl	8004b64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b06      	cmp	r3, #6
 80048e2:	d007      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b02      	cmp	r3, #2
 8004916:	d122      	bne.n	800495e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d11b      	bne.n	800495e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0202 	mvn.w	r2, #2
 800492e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f8ee 	bl	8004b26 <HAL_TIM_IC_CaptureCallback>
 800494a:	e005      	b.n	8004958 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8e0 	bl	8004b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8f1 	bl	8004b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b04      	cmp	r3, #4
 800496a:	d122      	bne.n	80049b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b04      	cmp	r3, #4
 8004978:	d11b      	bne.n	80049b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f06f 0204 	mvn.w	r2, #4
 8004982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f8c4 	bl	8004b26 <HAL_TIM_IC_CaptureCallback>
 800499e:	e005      	b.n	80049ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f8b6 	bl	8004b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f8c7 	bl	8004b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d122      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d11b      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f06f 0208 	mvn.w	r2, #8
 80049d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2204      	movs	r2, #4
 80049dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f89a 	bl	8004b26 <HAL_TIM_IC_CaptureCallback>
 80049f2:	e005      	b.n	8004a00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f88c 	bl	8004b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f89d 	bl	8004b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d122      	bne.n	8004a5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d11b      	bne.n	8004a5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f06f 0210 	mvn.w	r2, #16
 8004a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2208      	movs	r2, #8
 8004a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f870 	bl	8004b26 <HAL_TIM_IC_CaptureCallback>
 8004a46:	e005      	b.n	8004a54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f862 	bl	8004b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f873 	bl	8004b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d10e      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d107      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f06f 0201 	mvn.w	r2, #1
 8004a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fc f82b 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	2b80      	cmp	r3, #128	; 0x80
 8004a92:	d10e      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b80      	cmp	r3, #128	; 0x80
 8004aa0:	d107      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f903 	bl	8004cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d10e      	bne.n	8004ade <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d107      	bne.n	8004ade <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f838 	bl	8004b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d10e      	bne.n	8004b0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d107      	bne.n	8004b0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f06f 0220 	mvn.w	r2, #32
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f8cd 	bl	8004ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a40      	ldr	r2, [pc, #256]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b82:	d00f      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a3d      	ldr	r2, [pc, #244]	; (8004c7c <TIM_Base_SetConfig+0x118>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	; (8004c80 <TIM_Base_SetConfig+0x11c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d007      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3b      	ldr	r2, [pc, #236]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3a      	ldr	r2, [pc, #232]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d108      	bne.n	8004bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2f      	ldr	r2, [pc, #188]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d02b      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d027      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2c      	ldr	r2, [pc, #176]	; (8004c7c <TIM_Base_SetConfig+0x118>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d023      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2b      	ldr	r2, [pc, #172]	; (8004c80 <TIM_Base_SetConfig+0x11c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01f      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01b      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a29      	ldr	r2, [pc, #164]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d017      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a28      	ldr	r2, [pc, #160]	; (8004c8c <TIM_Base_SetConfig+0x128>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a27      	ldr	r2, [pc, #156]	; (8004c90 <TIM_Base_SetConfig+0x12c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00f      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <TIM_Base_SetConfig+0x130>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00b      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <TIM_Base_SetConfig+0x134>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d007      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <TIM_Base_SetConfig+0x138>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a23      	ldr	r2, [pc, #140]	; (8004ca0 <TIM_Base_SetConfig+0x13c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d108      	bne.n	8004c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a0c      	ldr	r2, [pc, #48]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d103      	bne.n	8004c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	615a      	str	r2, [r3, #20]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800
 8004c84:	40000c00 	.word	0x40000c00
 8004c88:	40010400 	.word	0x40010400
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800
 8004c98:	40001800 	.word	0x40001800
 8004c9c:	40001c00 	.word	0x40001c00
 8004ca0:	40002000 	.word	0x40002000

08004ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e03f      	b.n	8004d5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc f82c 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2224      	movs	r2, #36	; 0x24
 8004cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f829 	bl	8004d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004daa:	f023 030c 	bic.w	r3, r3, #12
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	430b      	orrs	r3, r1
 8004db6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd6:	f040 818b 	bne.w	80050f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4ac1      	ldr	r2, [pc, #772]	; (80050e4 <UART_SetConfig+0x37c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d005      	beq.n	8004df0 <UART_SetConfig+0x88>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4abf      	ldr	r2, [pc, #764]	; (80050e8 <UART_SetConfig+0x380>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	f040 80bd 	bne.w	8004f6a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004df0:	f7ff fb46 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 8004df4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	461d      	mov	r5, r3
 8004dfa:	f04f 0600 	mov.w	r6, #0
 8004dfe:	46a8      	mov	r8, r5
 8004e00:	46b1      	mov	r9, r6
 8004e02:	eb18 0308 	adds.w	r3, r8, r8
 8004e06:	eb49 0409 	adc.w	r4, r9, r9
 8004e0a:	4698      	mov	r8, r3
 8004e0c:	46a1      	mov	r9, r4
 8004e0e:	eb18 0805 	adds.w	r8, r8, r5
 8004e12:	eb49 0906 	adc.w	r9, r9, r6
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e2a:	4688      	mov	r8, r1
 8004e2c:	4691      	mov	r9, r2
 8004e2e:	eb18 0005 	adds.w	r0, r8, r5
 8004e32:	eb49 0106 	adc.w	r1, r9, r6
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	f04f 0600 	mov.w	r6, #0
 8004e40:	196b      	adds	r3, r5, r5
 8004e42:	eb46 0406 	adc.w	r4, r6, r6
 8004e46:	461a      	mov	r2, r3
 8004e48:	4623      	mov	r3, r4
 8004e4a:	f7fb f9c1 	bl	80001d0 <__aeabi_uldivmod>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	460c      	mov	r4, r1
 8004e52:	461a      	mov	r2, r3
 8004e54:	4ba5      	ldr	r3, [pc, #660]	; (80050ec <UART_SetConfig+0x384>)
 8004e56:	fba3 2302 	umull	r2, r3, r3, r2
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	461d      	mov	r5, r3
 8004e64:	f04f 0600 	mov.w	r6, #0
 8004e68:	46a9      	mov	r9, r5
 8004e6a:	46b2      	mov	sl, r6
 8004e6c:	eb19 0309 	adds.w	r3, r9, r9
 8004e70:	eb4a 040a 	adc.w	r4, sl, sl
 8004e74:	4699      	mov	r9, r3
 8004e76:	46a2      	mov	sl, r4
 8004e78:	eb19 0905 	adds.w	r9, r9, r5
 8004e7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e80:	f04f 0100 	mov.w	r1, #0
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e94:	4689      	mov	r9, r1
 8004e96:	4692      	mov	sl, r2
 8004e98:	eb19 0005 	adds.w	r0, r9, r5
 8004e9c:	eb4a 0106 	adc.w	r1, sl, r6
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	461d      	mov	r5, r3
 8004ea6:	f04f 0600 	mov.w	r6, #0
 8004eaa:	196b      	adds	r3, r5, r5
 8004eac:	eb46 0406 	adc.w	r4, r6, r6
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	f7fb f98c 	bl	80001d0 <__aeabi_uldivmod>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4b8b      	ldr	r3, [pc, #556]	; (80050ec <UART_SetConfig+0x384>)
 8004ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2164      	movs	r1, #100	; 0x64
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	3332      	adds	r3, #50	; 0x32
 8004ed2:	4a86      	ldr	r2, [pc, #536]	; (80050ec <UART_SetConfig+0x384>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ee0:	4498      	add	r8, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	461d      	mov	r5, r3
 8004ee6:	f04f 0600 	mov.w	r6, #0
 8004eea:	46a9      	mov	r9, r5
 8004eec:	46b2      	mov	sl, r6
 8004eee:	eb19 0309 	adds.w	r3, r9, r9
 8004ef2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ef6:	4699      	mov	r9, r3
 8004ef8:	46a2      	mov	sl, r4
 8004efa:	eb19 0905 	adds.w	r9, r9, r5
 8004efe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f02:	f04f 0100 	mov.w	r1, #0
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f16:	4689      	mov	r9, r1
 8004f18:	4692      	mov	sl, r2
 8004f1a:	eb19 0005 	adds.w	r0, r9, r5
 8004f1e:	eb4a 0106 	adc.w	r1, sl, r6
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	461d      	mov	r5, r3
 8004f28:	f04f 0600 	mov.w	r6, #0
 8004f2c:	196b      	adds	r3, r5, r5
 8004f2e:	eb46 0406 	adc.w	r4, r6, r6
 8004f32:	461a      	mov	r2, r3
 8004f34:	4623      	mov	r3, r4
 8004f36:	f7fb f94b 	bl	80001d0 <__aeabi_uldivmod>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b6a      	ldr	r3, [pc, #424]	; (80050ec <UART_SetConfig+0x384>)
 8004f42:	fba3 1302 	umull	r1, r3, r3, r2
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2164      	movs	r1, #100	; 0x64
 8004f4a:	fb01 f303 	mul.w	r3, r1, r3
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	3332      	adds	r3, #50	; 0x32
 8004f54:	4a65      	ldr	r2, [pc, #404]	; (80050ec <UART_SetConfig+0x384>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	f003 0207 	and.w	r2, r3, #7
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4442      	add	r2, r8
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	e26f      	b.n	800544a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f6a:	f7ff fa75 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8004f6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	461d      	mov	r5, r3
 8004f74:	f04f 0600 	mov.w	r6, #0
 8004f78:	46a8      	mov	r8, r5
 8004f7a:	46b1      	mov	r9, r6
 8004f7c:	eb18 0308 	adds.w	r3, r8, r8
 8004f80:	eb49 0409 	adc.w	r4, r9, r9
 8004f84:	4698      	mov	r8, r3
 8004f86:	46a1      	mov	r9, r4
 8004f88:	eb18 0805 	adds.w	r8, r8, r5
 8004f8c:	eb49 0906 	adc.w	r9, r9, r6
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fa0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fa4:	4688      	mov	r8, r1
 8004fa6:	4691      	mov	r9, r2
 8004fa8:	eb18 0005 	adds.w	r0, r8, r5
 8004fac:	eb49 0106 	adc.w	r1, r9, r6
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	461d      	mov	r5, r3
 8004fb6:	f04f 0600 	mov.w	r6, #0
 8004fba:	196b      	adds	r3, r5, r5
 8004fbc:	eb46 0406 	adc.w	r4, r6, r6
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	f7fb f904 	bl	80001d0 <__aeabi_uldivmod>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4b47      	ldr	r3, [pc, #284]	; (80050ec <UART_SetConfig+0x384>)
 8004fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	461d      	mov	r5, r3
 8004fde:	f04f 0600 	mov.w	r6, #0
 8004fe2:	46a9      	mov	r9, r5
 8004fe4:	46b2      	mov	sl, r6
 8004fe6:	eb19 0309 	adds.w	r3, r9, r9
 8004fea:	eb4a 040a 	adc.w	r4, sl, sl
 8004fee:	4699      	mov	r9, r3
 8004ff0:	46a2      	mov	sl, r4
 8004ff2:	eb19 0905 	adds.w	r9, r9, r5
 8004ff6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ffa:	f04f 0100 	mov.w	r1, #0
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005006:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800500a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800500e:	4689      	mov	r9, r1
 8005010:	4692      	mov	sl, r2
 8005012:	eb19 0005 	adds.w	r0, r9, r5
 8005016:	eb4a 0106 	adc.w	r1, sl, r6
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	461d      	mov	r5, r3
 8005020:	f04f 0600 	mov.w	r6, #0
 8005024:	196b      	adds	r3, r5, r5
 8005026:	eb46 0406 	adc.w	r4, r6, r6
 800502a:	461a      	mov	r2, r3
 800502c:	4623      	mov	r3, r4
 800502e:	f7fb f8cf 	bl	80001d0 <__aeabi_uldivmod>
 8005032:	4603      	mov	r3, r0
 8005034:	460c      	mov	r4, r1
 8005036:	461a      	mov	r2, r3
 8005038:	4b2c      	ldr	r3, [pc, #176]	; (80050ec <UART_SetConfig+0x384>)
 800503a:	fba3 1302 	umull	r1, r3, r3, r2
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2164      	movs	r1, #100	; 0x64
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	3332      	adds	r3, #50	; 0x32
 800504c:	4a27      	ldr	r2, [pc, #156]	; (80050ec <UART_SetConfig+0x384>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800505a:	4498      	add	r8, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	461d      	mov	r5, r3
 8005060:	f04f 0600 	mov.w	r6, #0
 8005064:	46a9      	mov	r9, r5
 8005066:	46b2      	mov	sl, r6
 8005068:	eb19 0309 	adds.w	r3, r9, r9
 800506c:	eb4a 040a 	adc.w	r4, sl, sl
 8005070:	4699      	mov	r9, r3
 8005072:	46a2      	mov	sl, r4
 8005074:	eb19 0905 	adds.w	r9, r9, r5
 8005078:	eb4a 0a06 	adc.w	sl, sl, r6
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005088:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800508c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005090:	4689      	mov	r9, r1
 8005092:	4692      	mov	sl, r2
 8005094:	eb19 0005 	adds.w	r0, r9, r5
 8005098:	eb4a 0106 	adc.w	r1, sl, r6
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	461d      	mov	r5, r3
 80050a2:	f04f 0600 	mov.w	r6, #0
 80050a6:	196b      	adds	r3, r5, r5
 80050a8:	eb46 0406 	adc.w	r4, r6, r6
 80050ac:	461a      	mov	r2, r3
 80050ae:	4623      	mov	r3, r4
 80050b0:	f7fb f88e 	bl	80001d0 <__aeabi_uldivmod>
 80050b4:	4603      	mov	r3, r0
 80050b6:	460c      	mov	r4, r1
 80050b8:	461a      	mov	r2, r3
 80050ba:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <UART_SetConfig+0x384>)
 80050bc:	fba3 1302 	umull	r1, r3, r3, r2
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	2164      	movs	r1, #100	; 0x64
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	3332      	adds	r3, #50	; 0x32
 80050ce:	4a07      	ldr	r2, [pc, #28]	; (80050ec <UART_SetConfig+0x384>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	f003 0207 	and.w	r2, r3, #7
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4442      	add	r2, r8
 80050e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80050e2:	e1b2      	b.n	800544a <UART_SetConfig+0x6e2>
 80050e4:	40011000 	.word	0x40011000
 80050e8:	40011400 	.word	0x40011400
 80050ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4ad7      	ldr	r2, [pc, #860]	; (8005454 <UART_SetConfig+0x6ec>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d005      	beq.n	8005106 <UART_SetConfig+0x39e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4ad6      	ldr	r2, [pc, #856]	; (8005458 <UART_SetConfig+0x6f0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	f040 80d1 	bne.w	80052a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005106:	f7ff f9bb 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 800510a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	469a      	mov	sl, r3
 8005110:	f04f 0b00 	mov.w	fp, #0
 8005114:	46d0      	mov	r8, sl
 8005116:	46d9      	mov	r9, fp
 8005118:	eb18 0308 	adds.w	r3, r8, r8
 800511c:	eb49 0409 	adc.w	r4, r9, r9
 8005120:	4698      	mov	r8, r3
 8005122:	46a1      	mov	r9, r4
 8005124:	eb18 080a 	adds.w	r8, r8, sl
 8005128:	eb49 090b 	adc.w	r9, r9, fp
 800512c:	f04f 0100 	mov.w	r1, #0
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005138:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800513c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005140:	4688      	mov	r8, r1
 8005142:	4691      	mov	r9, r2
 8005144:	eb1a 0508 	adds.w	r5, sl, r8
 8005148:	eb4b 0609 	adc.w	r6, fp, r9
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	4619      	mov	r1, r3
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	f04f 0400 	mov.w	r4, #0
 800515e:	0094      	lsls	r4, r2, #2
 8005160:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005164:	008b      	lsls	r3, r1, #2
 8005166:	461a      	mov	r2, r3
 8005168:	4623      	mov	r3, r4
 800516a:	4628      	mov	r0, r5
 800516c:	4631      	mov	r1, r6
 800516e:	f7fb f82f 	bl	80001d0 <__aeabi_uldivmod>
 8005172:	4603      	mov	r3, r0
 8005174:	460c      	mov	r4, r1
 8005176:	461a      	mov	r2, r3
 8005178:	4bb8      	ldr	r3, [pc, #736]	; (800545c <UART_SetConfig+0x6f4>)
 800517a:	fba3 2302 	umull	r2, r3, r3, r2
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	469b      	mov	fp, r3
 8005188:	f04f 0c00 	mov.w	ip, #0
 800518c:	46d9      	mov	r9, fp
 800518e:	46e2      	mov	sl, ip
 8005190:	eb19 0309 	adds.w	r3, r9, r9
 8005194:	eb4a 040a 	adc.w	r4, sl, sl
 8005198:	4699      	mov	r9, r3
 800519a:	46a2      	mov	sl, r4
 800519c:	eb19 090b 	adds.w	r9, r9, fp
 80051a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051a4:	f04f 0100 	mov.w	r1, #0
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051b8:	4689      	mov	r9, r1
 80051ba:	4692      	mov	sl, r2
 80051bc:	eb1b 0509 	adds.w	r5, fp, r9
 80051c0:	eb4c 060a 	adc.w	r6, ip, sl
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4619      	mov	r1, r3
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	f04f 0400 	mov.w	r4, #0
 80051d6:	0094      	lsls	r4, r2, #2
 80051d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051dc:	008b      	lsls	r3, r1, #2
 80051de:	461a      	mov	r2, r3
 80051e0:	4623      	mov	r3, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	4631      	mov	r1, r6
 80051e6:	f7fa fff3 	bl	80001d0 <__aeabi_uldivmod>
 80051ea:	4603      	mov	r3, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	461a      	mov	r2, r3
 80051f0:	4b9a      	ldr	r3, [pc, #616]	; (800545c <UART_SetConfig+0x6f4>)
 80051f2:	fba3 1302 	umull	r1, r3, r3, r2
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2164      	movs	r1, #100	; 0x64
 80051fa:	fb01 f303 	mul.w	r3, r1, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	3332      	adds	r3, #50	; 0x32
 8005204:	4a95      	ldr	r2, [pc, #596]	; (800545c <UART_SetConfig+0x6f4>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005210:	4498      	add	r8, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	469b      	mov	fp, r3
 8005216:	f04f 0c00 	mov.w	ip, #0
 800521a:	46d9      	mov	r9, fp
 800521c:	46e2      	mov	sl, ip
 800521e:	eb19 0309 	adds.w	r3, r9, r9
 8005222:	eb4a 040a 	adc.w	r4, sl, sl
 8005226:	4699      	mov	r9, r3
 8005228:	46a2      	mov	sl, r4
 800522a:	eb19 090b 	adds.w	r9, r9, fp
 800522e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800523e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005246:	4689      	mov	r9, r1
 8005248:	4692      	mov	sl, r2
 800524a:	eb1b 0509 	adds.w	r5, fp, r9
 800524e:	eb4c 060a 	adc.w	r6, ip, sl
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	4619      	mov	r1, r3
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	f04f 0400 	mov.w	r4, #0
 8005264:	0094      	lsls	r4, r2, #2
 8005266:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800526a:	008b      	lsls	r3, r1, #2
 800526c:	461a      	mov	r2, r3
 800526e:	4623      	mov	r3, r4
 8005270:	4628      	mov	r0, r5
 8005272:	4631      	mov	r1, r6
 8005274:	f7fa ffac 	bl	80001d0 <__aeabi_uldivmod>
 8005278:	4603      	mov	r3, r0
 800527a:	460c      	mov	r4, r1
 800527c:	461a      	mov	r2, r3
 800527e:	4b77      	ldr	r3, [pc, #476]	; (800545c <UART_SetConfig+0x6f4>)
 8005280:	fba3 1302 	umull	r1, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2164      	movs	r1, #100	; 0x64
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	3332      	adds	r3, #50	; 0x32
 8005292:	4a72      	ldr	r2, [pc, #456]	; (800545c <UART_SetConfig+0x6f4>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	f003 020f 	and.w	r2, r3, #15
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4442      	add	r2, r8
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	e0d0      	b.n	800544a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7ff f8d6 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 80052ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	469a      	mov	sl, r3
 80052b2:	f04f 0b00 	mov.w	fp, #0
 80052b6:	46d0      	mov	r8, sl
 80052b8:	46d9      	mov	r9, fp
 80052ba:	eb18 0308 	adds.w	r3, r8, r8
 80052be:	eb49 0409 	adc.w	r4, r9, r9
 80052c2:	4698      	mov	r8, r3
 80052c4:	46a1      	mov	r9, r4
 80052c6:	eb18 080a 	adds.w	r8, r8, sl
 80052ca:	eb49 090b 	adc.w	r9, r9, fp
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052e2:	4688      	mov	r8, r1
 80052e4:	4691      	mov	r9, r2
 80052e6:	eb1a 0508 	adds.w	r5, sl, r8
 80052ea:	eb4b 0609 	adc.w	r6, fp, r9
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	4619      	mov	r1, r3
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	f04f 0400 	mov.w	r4, #0
 8005300:	0094      	lsls	r4, r2, #2
 8005302:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005306:	008b      	lsls	r3, r1, #2
 8005308:	461a      	mov	r2, r3
 800530a:	4623      	mov	r3, r4
 800530c:	4628      	mov	r0, r5
 800530e:	4631      	mov	r1, r6
 8005310:	f7fa ff5e 	bl	80001d0 <__aeabi_uldivmod>
 8005314:	4603      	mov	r3, r0
 8005316:	460c      	mov	r4, r1
 8005318:	461a      	mov	r2, r3
 800531a:	4b50      	ldr	r3, [pc, #320]	; (800545c <UART_SetConfig+0x6f4>)
 800531c:	fba3 2302 	umull	r2, r3, r3, r2
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	469b      	mov	fp, r3
 800532a:	f04f 0c00 	mov.w	ip, #0
 800532e:	46d9      	mov	r9, fp
 8005330:	46e2      	mov	sl, ip
 8005332:	eb19 0309 	adds.w	r3, r9, r9
 8005336:	eb4a 040a 	adc.w	r4, sl, sl
 800533a:	4699      	mov	r9, r3
 800533c:	46a2      	mov	sl, r4
 800533e:	eb19 090b 	adds.w	r9, r9, fp
 8005342:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005346:	f04f 0100 	mov.w	r1, #0
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005352:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005356:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800535a:	4689      	mov	r9, r1
 800535c:	4692      	mov	sl, r2
 800535e:	eb1b 0509 	adds.w	r5, fp, r9
 8005362:	eb4c 060a 	adc.w	r6, ip, sl
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4619      	mov	r1, r3
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	f04f 0400 	mov.w	r4, #0
 8005378:	0094      	lsls	r4, r2, #2
 800537a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800537e:	008b      	lsls	r3, r1, #2
 8005380:	461a      	mov	r2, r3
 8005382:	4623      	mov	r3, r4
 8005384:	4628      	mov	r0, r5
 8005386:	4631      	mov	r1, r6
 8005388:	f7fa ff22 	bl	80001d0 <__aeabi_uldivmod>
 800538c:	4603      	mov	r3, r0
 800538e:	460c      	mov	r4, r1
 8005390:	461a      	mov	r2, r3
 8005392:	4b32      	ldr	r3, [pc, #200]	; (800545c <UART_SetConfig+0x6f4>)
 8005394:	fba3 1302 	umull	r1, r3, r3, r2
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	2164      	movs	r1, #100	; 0x64
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	3332      	adds	r3, #50	; 0x32
 80053a6:	4a2d      	ldr	r2, [pc, #180]	; (800545c <UART_SetConfig+0x6f4>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053b2:	4498      	add	r8, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	469b      	mov	fp, r3
 80053b8:	f04f 0c00 	mov.w	ip, #0
 80053bc:	46d9      	mov	r9, fp
 80053be:	46e2      	mov	sl, ip
 80053c0:	eb19 0309 	adds.w	r3, r9, r9
 80053c4:	eb4a 040a 	adc.w	r4, sl, sl
 80053c8:	4699      	mov	r9, r3
 80053ca:	46a2      	mov	sl, r4
 80053cc:	eb19 090b 	adds.w	r9, r9, fp
 80053d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053d4:	f04f 0100 	mov.w	r1, #0
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053e8:	4689      	mov	r9, r1
 80053ea:	4692      	mov	sl, r2
 80053ec:	eb1b 0509 	adds.w	r5, fp, r9
 80053f0:	eb4c 060a 	adc.w	r6, ip, sl
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4619      	mov	r1, r3
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	f04f 0400 	mov.w	r4, #0
 8005406:	0094      	lsls	r4, r2, #2
 8005408:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800540c:	008b      	lsls	r3, r1, #2
 800540e:	461a      	mov	r2, r3
 8005410:	4623      	mov	r3, r4
 8005412:	4628      	mov	r0, r5
 8005414:	4631      	mov	r1, r6
 8005416:	f7fa fedb 	bl	80001d0 <__aeabi_uldivmod>
 800541a:	4603      	mov	r3, r0
 800541c:	460c      	mov	r4, r1
 800541e:	461a      	mov	r2, r3
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <UART_SetConfig+0x6f4>)
 8005422:	fba3 1302 	umull	r1, r3, r3, r2
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2164      	movs	r1, #100	; 0x64
 800542a:	fb01 f303 	mul.w	r3, r1, r3
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	3332      	adds	r3, #50	; 0x32
 8005434:	4a09      	ldr	r2, [pc, #36]	; (800545c <UART_SetConfig+0x6f4>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f003 020f 	and.w	r2, r3, #15
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4442      	add	r2, r8
 8005446:	609a      	str	r2, [r3, #8]
}
 8005448:	e7ff      	b.n	800544a <UART_SetConfig+0x6e2>
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	40011000 	.word	0x40011000
 8005458:	40011400 	.word	0x40011400
 800545c:	51eb851f 	.word	0x51eb851f

08005460 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005460:	b084      	sub	sp, #16
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	f107 001c 	add.w	r0, r7, #28
 800546e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	2b01      	cmp	r3, #1
 8005476:	d122      	bne.n	80054be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800548c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d105      	bne.n	80054b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f94a 	bl	800574c <USB_CoreReset>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]
 80054bc:	e01a      	b.n	80054f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f93e 	bl	800574c <USB_CoreReset>
 80054d0:	4603      	mov	r3, r0
 80054d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
 80054e6:	e005      	b.n	80054f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d10b      	bne.n	8005512 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f043 0206 	orr.w	r2, r3, #6
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800551e:	b004      	add	sp, #16
 8005520:	4770      	bx	lr

08005522 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f043 0201 	orr.w	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f023 0201 	bic.w	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d106      	bne.n	8005592 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]
 8005590:	e00b      	b.n	80055aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60da      	str	r2, [r3, #12]
 80055a4:	e001      	b.n	80055aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e003      	b.n	80055b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80055aa:	2032      	movs	r0, #50	; 0x32
 80055ac:	f7fb fd66 	bl	800107c <HAL_Delay>

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	019b      	lsls	r3, r3, #6
 80055ce:	f043 0220 	orr.w	r2, r3, #32
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <USB_FlushTxFifo+0x48>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e006      	b.n	80055f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d0f0      	beq.n	80055d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	00030d40 	.word	0x00030d40

08005608 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2210      	movs	r2, #16
 8005618:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3301      	adds	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4a09      	ldr	r2, [pc, #36]	; (8005648 <USB_FlushRxFifo+0x40>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d901      	bls.n	800562c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e006      	b.n	800563a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b10      	cmp	r3, #16
 8005636:	d0f0      	beq.n	800561a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	00030d40 	.word	0x00030d40

0800564c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800564c:	b480      	push	{r7}
 800564e:	b089      	sub	sp, #36	; 0x24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	460b      	mov	r3, r1
 800565c:	71fb      	strb	r3, [r7, #7]
 800565e:	4613      	mov	r3, r2
 8005660:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800566a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800566e:	2b00      	cmp	r3, #0
 8005670:	d11a      	bne.n	80056a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005672:	88bb      	ldrh	r3, [r7, #4]
 8005674:	3303      	adds	r3, #3
 8005676:	089b      	lsrs	r3, r3, #2
 8005678:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	e00f      	b.n	80056a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	031a      	lsls	r2, r3, #12
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	4413      	add	r3, r2
 8005688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568c:	461a      	mov	r2, r3
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3304      	adds	r3, #4
 8005698:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	3301      	adds	r3, #1
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d3eb      	bcc.n	8005680 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3724      	adds	r7, #36	; 0x24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b089      	sub	sp, #36	; 0x24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	4613      	mov	r3, r2
 80056c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	3303      	adds	r3, #3
 80056d0:	089b      	lsrs	r3, r3, #2
 80056d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80056d4:	2300      	movs	r3, #0
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	e00b      	b.n	80056f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3304      	adds	r3, #4
 80056ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	3301      	adds	r3, #1
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d3ef      	bcc.n	80056da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80056fa:	69fb      	ldr	r3, [r7, #28]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3724      	adds	r7, #36	; 0x24
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0301 	and.w	r3, r3, #1
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <USB_CoreReset+0x64>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e01b      	b.n	80057a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	daf2      	bge.n	8005758 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <USB_CoreReset+0x64>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e006      	b.n	80057a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b01      	cmp	r3, #1
 800579e:	d0f0      	beq.n	8005782 <USB_CoreReset+0x36>

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	00030d40 	.word	0x00030d40

080057b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b4:	b084      	sub	sp, #16
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	f107 001c 	add.w	r0, r7, #28
 80057c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10a      	bne.n	8005822 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800581a:	f043 0304 	orr.w	r3, r3, #4
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e014      	b.n	800584c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e009      	b.n	800584c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005846:	f023 0304 	bic.w	r3, r3, #4
 800584a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800584c:	2110      	movs	r1, #16
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff feb4 	bl	80055bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff fed7 	bl	8005608 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	e015      	b.n	800588c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4413      	add	r3, r2
 8005868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586c:	461a      	mov	r2, r3
 800586e:	f04f 33ff 	mov.w	r3, #4294967295
 8005872:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	461a      	mov	r2, r3
 8005882:	2300      	movs	r3, #0
 8005884:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d3e5      	bcc.n	8005860 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005894:	2101      	movs	r1, #1
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f8ac 	bl	80059f4 <USB_DriveVbus>

  HAL_Delay(200U);
 800589c:	20c8      	movs	r0, #200	; 0xc8
 800589e:	f7fb fbed 	bl	800107c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f04f 32ff 	mov.w	r2, #4294967295
 80058ae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a14      	ldr	r2, [pc, #80]	; (8005918 <USB_HostInit+0x164>)
 80058c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a13      	ldr	r2, [pc, #76]	; (800591c <USB_HostInit+0x168>)
 80058ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80058d2:	e009      	b.n	80058e8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2280      	movs	r2, #128	; 0x80
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a10      	ldr	r2, [pc, #64]	; (8005920 <USB_HostInit+0x16c>)
 80058de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a10      	ldr	r2, [pc, #64]	; (8005924 <USB_HostInit+0x170>)
 80058e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d105      	bne.n	80058fa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f043 0210 	orr.w	r2, r3, #16
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <USB_HostInit+0x174>)
 8005900:	4313      	orrs	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005912:	b004      	add	sp, #16
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	01000200 	.word	0x01000200
 800591c:	00e00300 	.word	0x00e00300
 8005920:	00600080 	.word	0x00600080
 8005924:	004000e0 	.word	0x004000e0
 8005928:	a3200008 	.word	0xa3200008

0800592c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005964:	4313      	orrs	r3, r2
 8005966:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d107      	bne.n	800597e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005974:	461a      	mov	r2, r3
 8005976:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800597a:	6053      	str	r3, [r2, #4]
 800597c:	e009      	b.n	8005992 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d106      	bne.n	8005992 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800598a:	461a      	mov	r2, r3
 800598c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005990:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80059d0:	2064      	movs	r0, #100	; 0x64
 80059d2:	f7fb fb53 	bl	800107c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80059e4:	200a      	movs	r0, #10
 80059e6:	f7fb fb49 	bl	800107c <HAL_Delay>

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <USB_DriveVbus+0x44>
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d106      	bne.n	8005a38 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a36:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a42:	d109      	bne.n	8005a58 <USB_DriveVbus+0x64>
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a56:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	0c5b      	lsrs	r3, r3, #17
 8005a84:	f003 0303 	and.w	r3, r3, #3
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	b29b      	uxth	r3, r3
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	70fb      	strb	r3, [r7, #3]
 8005aca:	460b      	mov	r3, r1
 8005acc:	70bb      	strb	r3, [r7, #2]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005aee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d87e      	bhi.n	8005bf4 <USB_HC_Init+0x13c>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <USB_HC_Init+0x44>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b0d 	.word	0x08005b0d
 8005b00:	08005bb7 	.word	0x08005bb7
 8005b04:	08005b0d 	.word	0x08005b0d
 8005b08:	08005b79 	.word	0x08005b79
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005b1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	da10      	bge.n	8005b4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	78fa      	ldrb	r2, [r7, #3]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b46:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005b48:	e057      	b.n	8005bfa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d051      	beq.n	8005bfa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b74:	60d3      	str	r3, [r2, #12]
      break;
 8005b76:	e040      	b.n	8005bfa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b84:	461a      	mov	r2, r3
 8005b86:	f240 639d 	movw	r3, #1693	; 0x69d
 8005b8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	da34      	bge.n	8005bfe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	78fa      	ldrb	r2, [r7, #3]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005bb4:	e023      	b.n	8005bfe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f240 2325 	movw	r3, #549	; 0x225
 8005bc8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005bca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	da17      	bge.n	8005c02 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005bf0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005bf2:	e006      	b.n	8005c02 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf8:	e004      	b.n	8005c04 <USB_HC_Init+0x14c>
      break;
 8005bfa:	bf00      	nop
 8005bfc:	e002      	b.n	8005c04 <USB_HC_Init+0x14c>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e000      	b.n	8005c04 <USB_HC_Init+0x14c>
      break;
 8005c02:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c0a:	699a      	ldr	r2, [r3, #24]
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	2101      	movs	r1, #1
 8005c14:	fa01 f303 	lsl.w	r3, r1, r3
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	da03      	bge.n	8005c3e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	e001      	b.n	8005c42 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005c42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d103      	bne.n	8005c52 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	e001      	b.n	8005c56 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c56:	787b      	ldrb	r3, [r7, #1]
 8005c58:	059b      	lsls	r3, r3, #22
 8005c5a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c5e:	78bb      	ldrb	r3, [r7, #2]
 8005c60:	02db      	lsls	r3, r3, #11
 8005c62:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c66:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c6c:	049b      	lsls	r3, r3, #18
 8005c6e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c7a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	0159      	lsls	r1, r3, #5
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	440b      	add	r3, r1
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c92:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005c94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d10f      	bne.n	8005cbc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop

08005ccc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	; 0x30
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ce8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d028      	beq.n	8005d48 <USB_HC_StartXfer+0x7c>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	791b      	ldrb	r3, [r3, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d124      	bne.n	8005d48 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <USB_HC_StartXfer+0x50>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	795b      	ldrb	r3, [r3, #5]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d107      	bne.n	8005d1c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	4619      	mov	r1, r3
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fa30 	bl	8006178 <USB_DoPing>
      return HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e114      	b.n	8005f46 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d112      	bne.n	8005d48 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005d40:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d018      	beq.n	8005d82 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	8912      	ldrh	r2, [r2, #8]
 8005d58:	4413      	add	r3, r2
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	8912      	ldrh	r2, [r2, #8]
 8005d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d64:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005d66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d68:	8b7b      	ldrh	r3, [r7, #26]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d90b      	bls.n	8005d86 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005d6e:	8b7b      	ldrh	r3, [r7, #26]
 8005d70:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005d72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	8912      	ldrh	r2, [r2, #8]
 8005d78:	fb02 f203 	mul.w	r2, r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	611a      	str	r2, [r3, #16]
 8005d80:	e001      	b.n	8005d86 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005d82:	2301      	movs	r3, #1
 8005d84:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	78db      	ldrb	r3, [r3, #3]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d006      	beq.n	8005d9c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005d8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	8912      	ldrh	r2, [r2, #8]
 8005d94:	fb02 f203 	mul.w	r2, r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005da4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005da6:	04d9      	lsls	r1, r3, #19
 8005da8:	4b69      	ldr	r3, [pc, #420]	; (8005f50 <USB_HC_StartXfer+0x284>)
 8005daa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	7a9b      	ldrb	r3, [r3, #10]
 8005db2:	075b      	lsls	r3, r3, #29
 8005db4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005db8:	69f9      	ldr	r1, [r7, #28]
 8005dba:	0148      	lsls	r0, r1, #5
 8005dbc:	6a39      	ldr	r1, [r7, #32]
 8005dbe:	4401      	add	r1, r0
 8005dc0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dc4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dc6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005dc8:	79fb      	ldrb	r3, [r7, #7]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	68d9      	ldr	r1, [r3, #12]
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dde:	460a      	mov	r2, r1
 8005de0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bf0c      	ite	eq
 8005df2:	2301      	moveq	r3, #1
 8005df4:	2300      	movne	r3, #0
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	6a3a      	ldr	r2, [r7, #32]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	7e7b      	ldrb	r3, [r7, #25]
 8005e2a:	075b      	lsls	r3, r3, #29
 8005e2c:	69f9      	ldr	r1, [r7, #28]
 8005e2e:	0148      	lsls	r0, r1, #5
 8005e30:	6a39      	ldr	r1, [r7, #32]
 8005e32:	4401      	add	r1, r0
 8005e34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a42      	ldr	r2, [pc, #264]	; (8005f54 <USB_HC_StartXfer+0x288>)
 8005e4c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e4e:	4b41      	ldr	r3, [pc, #260]	; (8005f54 <USB_HC_StartXfer+0x288>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e56:	4a3f      	ldr	r2, [pc, #252]	; (8005f54 <USB_HC_StartXfer+0x288>)
 8005e58:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	78db      	ldrb	r3, [r3, #3]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d006      	beq.n	8005e70 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005e62:	4b3c      	ldr	r3, [pc, #240]	; (8005f54 <USB_HC_StartXfer+0x288>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6a:	4a3a      	ldr	r2, [pc, #232]	; (8005f54 <USB_HC_StartXfer+0x288>)
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e005      	b.n	8005e7c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005e70:	4b38      	ldr	r3, [pc, #224]	; (8005f54 <USB_HC_StartXfer+0x288>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e78:	4a36      	ldr	r2, [pc, #216]	; (8005f54 <USB_HC_StartXfer+0x288>)
 8005e7a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e7c:	4b35      	ldr	r3, [pc, #212]	; (8005f54 <USB_HC_StartXfer+0x288>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e84:	4a33      	ldr	r2, [pc, #204]	; (8005f54 <USB_HC_StartXfer+0x288>)
 8005e86:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	461a      	mov	r2, r3
 8005e96:	4b2f      	ldr	r3, [pc, #188]	; (8005f54 <USB_HC_StartXfer+0x288>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e04f      	b.n	8005f46 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	78db      	ldrb	r3, [r3, #3]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d14a      	bne.n	8005f44 <USB_HC_StartXfer+0x278>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d046      	beq.n	8005f44 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	79db      	ldrb	r3, [r3, #7]
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d830      	bhi.n	8005f20 <USB_HC_StartXfer+0x254>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <USB_HC_StartXfer+0x1f8>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005ef9 	.word	0x08005ef9
 8005ecc:	08005ed5 	.word	0x08005ed5
 8005ed0:	08005ef9 	.word	0x08005ef9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	3303      	adds	r3, #3
 8005eda:	089b      	lsrs	r3, r3, #2
 8005edc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ede:	8afa      	ldrh	r2, [r7, #22]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d91c      	bls.n	8005f24 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f043 0220 	orr.w	r2, r3, #32
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ef6:	e015      	b.n	8005f24 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	3303      	adds	r3, #3
 8005efe:	089b      	lsrs	r3, r3, #2
 8005f00:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f02:	8afa      	ldrh	r2, [r7, #22]
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d90a      	bls.n	8005f28 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f1e:	e003      	b.n	8005f28 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005f20:	bf00      	nop
 8005f22:	e002      	b.n	8005f2a <USB_HC_StartXfer+0x25e>
        break;
 8005f24:	bf00      	nop
 8005f26:	e000      	b.n	8005f2a <USB_HC_StartXfer+0x25e>
        break;
 8005f28:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	68d9      	ldr	r1, [r3, #12]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	785a      	ldrb	r2, [r3, #1]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	b298      	uxth	r0, r3
 8005f38:	2300      	movs	r3, #0
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7ff fb84 	bl	800564c <USB_WritePacket>
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3728      	adds	r7, #40	; 0x28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	1ff80000 	.word	0x1ff80000
 8005f54:	20000308 	.word	0x20000308

08005f58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	b29b      	uxth	r3, r3
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b087      	sub	sp, #28
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	0c9b      	lsrs	r3, r3, #18
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <USB_HC_Halt+0x3a>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d16c      	bne.n	800608e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fd2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d143      	bne.n	8006068 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ffe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4413      	add	r3, r2
 8006008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	440a      	add	r2, r1
 8006016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800601e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	440a      	add	r2, r1
 8006036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800603a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800603e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	3301      	adds	r3, #1
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800604c:	d81d      	bhi.n	800608a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006064:	d0ec      	beq.n	8006040 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006066:	e080      	b.n	800616a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	440a      	add	r2, r1
 800607e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006086:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006088:	e06f      	b.n	800616a <USB_HC_Halt+0x1f0>
          break;
 800608a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800608c:	e06d      	b.n	800616a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d143      	bne.n	8006146 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060fc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	440a      	add	r2, r1
 8006114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006118:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800611c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	3301      	adds	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800612a:	d81d      	bhi.n	8006168 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4413      	add	r3, r2
 8006134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800613e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006142:	d0ec      	beq.n	800611e <USB_HC_Halt+0x1a4>
 8006144:	e011      	b.n	800616a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	440a      	add	r2, r1
 800615c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	e000      	b.n	800616a <USB_HC_Halt+0x1f0>
          break;
 8006168:	bf00      	nop
    }
  }

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800618c:	2301      	movs	r3, #1
 800618e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	04da      	lsls	r2, r3, #19
 8006194:	4b15      	ldr	r3, [pc, #84]	; (80061ec <USB_DoPing+0x74>)
 8006196:	4013      	ands	r3, r2
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061a8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061c0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061c8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d6:	461a      	mov	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	1ff80000 	.word	0x1ff80000

080061f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff f99f 	bl	8005544 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006206:	2110      	movs	r1, #16
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff f9d7 	bl	80055bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff f9fa 	bl	8005608 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006214:	2300      	movs	r3, #0
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	e01f      	b.n	800625a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006230:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006238:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006240:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624e:	461a      	mov	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	3301      	adds	r3, #1
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b0f      	cmp	r3, #15
 800625e:	d9dc      	bls.n	800621a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006260:	2300      	movs	r3, #0
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	e034      	b.n	80062d0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800627c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006284:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800628c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629a:	461a      	mov	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	3301      	adds	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ac:	d80c      	bhi.n	80062c8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c4:	d0ec      	beq.n	80062a0 <USB_StopHost+0xb0>
 80062c6:	e000      	b.n	80062ca <USB_StopHost+0xda>
        break;
 80062c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	3301      	adds	r3, #1
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b0f      	cmp	r3, #15
 80062d4:	d9c7      	bls.n	8006266 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062dc:	461a      	mov	r2, r3
 80062de:	f04f 33ff 	mov.w	r3, #4294967295
 80062e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff f918 	bl	8005522 <USB_EnableGlobalInt>

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <stm32Uart_IRQHandler>:
volatile uint8_t Appl_u8UartTxCompleteFlag = 1, Appl_u8UartRxCompleteFlag = 0;

static inline void stm32Uart_RxProcessingAppl(UART_HandleTypeDef* huartp);
static inline void stm32Uart_TxProcessingAppl(UART_HandleTypeDef* huartp);

void stm32Uart_IRQHandler(UART_HandleTypeDef* huartp){
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huartp->Instance->SR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huartp->Instance->CR1);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	613b      	str	r3, [r7, #16]
	uint32_t cr3its     = READ_REG(huartp->Instance->CR3);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	60fb      	str	r3, [r7, #12]
	uint32_t errorflags = 0x00U;
 800631c:	2300      	movs	r3, #0
 800631e:	60bb      	str	r3, [r7, #8]

	/* If no error occurs */
	errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	60bb      	str	r3, [r7, #8]
	if (errorflags == RESET)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10d      	bne.n	800634a <stm32Uart_IRQHandler+0x4e>
	{
		/*Check if the Interrupt is due to Receive*/
		if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00b      	beq.n	8006350 <stm32Uart_IRQHandler+0x54>
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d006      	beq.n	8006350 <stm32Uart_IRQHandler+0x54>
		{
			stm32Uart_RxProcessingAppl(huartp);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f826 	bl	8006394 <stm32Uart_RxProcessingAppl>
			return;
 8006348:	e01e      	b.n	8006388 <stm32Uart_IRQHandler+0x8c>
		}
	}
	else
	{
		RxByteCount=0;
 800634a:	4b11      	ldr	r3, [pc, #68]	; (8006390 <stm32Uart_IRQHandler+0x94>)
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
	}
	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <stm32Uart_IRQHandler+0x70>
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <stm32Uart_IRQHandler+0x70>
	{
		stm32Uart_TxProcessingAppl(huartp);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f861 	bl	800642c <stm32Uart_TxProcessingAppl>
		return;
 800636a:	e00d      	b.n	8006388 <stm32Uart_IRQHandler+0x8c>
	}


	if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <stm32Uart_IRQHandler+0x8c>
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <stm32Uart_IRQHandler+0x8c>
	{
		stm32Uart_TxProcessingAppl(huartp);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f853 	bl	800642c <stm32Uart_TxProcessingAppl>
		return;
 8006386:	bf00      	nop
	}
}
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	2000031a 	.word	0x2000031a

08006394 <stm32Uart_RxProcessingAppl>:

static inline void stm32Uart_RxProcessingAppl(UART_HandleTypeDef* huartp){
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	uint8_t ubUDR;
	if(Appl_u8UartRxCompleteFlag == 0)
 800639c:	4b20      	ldr	r3, [pc, #128]	; (8006420 <stm32Uart_RxProcessingAppl+0x8c>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d137      	bne.n	8006416 <stm32Uart_RxProcessingAppl+0x82>
	{
		if (huartp->Init.WordLength == UART_WORDLENGTH_9B)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ae:	d104      	bne.n	80063ba <stm32Uart_RxProcessingAppl+0x26>
		{
			ubUDR = (uint16_t)(huartp->Instance->DR & (uint16_t)0x00FF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	73fb      	strb	r3, [r7, #15]
 80063b8:	e00f      	b.n	80063da <stm32Uart_RxProcessingAppl+0x46>
		}
		else
		{
			if (huartp->Init.Parity == UART_PARITY_NONE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <stm32Uart_RxProcessingAppl+0x38>
			{
				ubUDR = (uint8_t)(huartp->Instance->DR & (uint8_t)0x00FF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	73fb      	strb	r3, [r7, #15]
 80063ca:	e006      	b.n	80063da <stm32Uart_RxProcessingAppl+0x46>
			}
			else
			{
				ubUDR = (uint8_t)(huartp->Instance->DR & (uint8_t)0x007F);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d8:	73fb      	strb	r3, [r7, #15]
			}
		}
		vishwaUartRX_buffer[RxByteCount] = ubUDR;
 80063da:	4b12      	ldr	r3, [pc, #72]	; (8006424 <stm32Uart_RxProcessingAppl+0x90>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	4619      	mov	r1, r3
 80063e2:	4a11      	ldr	r2, [pc, #68]	; (8006428 <stm32Uart_RxProcessingAppl+0x94>)
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	5453      	strb	r3, [r2, r1]
		RxByteCount++;
 80063e8:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <stm32Uart_RxProcessingAppl+0x90>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	3301      	adds	r3, #1
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <stm32Uart_RxProcessingAppl+0x90>)
 80063f4:	701a      	strb	r2, [r3, #0]
		if(RxByteCount >= UART_RX_BUFFER_SIZE)
 80063f6:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <stm32Uart_RxProcessingAppl+0x90>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <stm32Uart_RxProcessingAppl+0x7a>
		{
			RxByteCount = 0;
 8006400:	4b08      	ldr	r3, [pc, #32]	; (8006424 <stm32Uart_RxProcessingAppl+0x90>)
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
			Appl_u8UartRxCompleteFlag = 1;
 8006406:	4b06      	ldr	r3, [pc, #24]	; (8006420 <stm32Uart_RxProcessingAppl+0x8c>)
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
		else
		{
			stm32Uart_RxInterruptEnable(huartp,1);
		}
	}
}
 800640c:	e003      	b.n	8006416 <stm32Uart_RxProcessingAppl+0x82>
			stm32Uart_RxInterruptEnable(huartp,1);
 800640e:	2101      	movs	r1, #1
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f877 	bl	8006504 <stm32Uart_RxInterruptEnable>
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	2000031d 	.word	0x2000031d
 8006424:	2000031a 	.word	0x2000031a
 8006428:	2000030c 	.word	0x2000030c

0800642c <stm32Uart_TxProcessingAppl>:

static inline void stm32Uart_TxProcessingAppl(UART_HandleTypeDef* huartp){
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	static uint8_t ubTxByte;

	if(TxByteCount<Appl_u8TxLength)
 8006434:	4b2e      	ldr	r3, [pc, #184]	; (80064f0 <stm32Uart_TxProcessingAppl+0xc4>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	b2da      	uxtb	r2, r3
 800643a:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <stm32Uart_TxProcessingAppl+0xc8>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	429a      	cmp	r2, r3
 8006442:	d23d      	bcs.n	80064c0 <stm32Uart_TxProcessingAppl+0x94>
	{
		ubTxByte = vishwaUartTX_buffer[TxByteCount];
 8006444:	4b2a      	ldr	r3, [pc, #168]	; (80064f0 <stm32Uart_TxProcessingAppl+0xc4>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <stm32Uart_TxProcessingAppl+0xcc>)
 800644e:	5c9b      	ldrb	r3, [r3, r2]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	4b2a      	ldr	r3, [pc, #168]	; (80064fc <stm32Uart_TxProcessingAppl+0xd0>)
 8006454:	701a      	strb	r2, [r3, #0]
		TxByteCount++;
 8006456:	4b26      	ldr	r3, [pc, #152]	; (80064f0 <stm32Uart_TxProcessingAppl+0xc4>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	3301      	adds	r3, #1
 800645e:	b2da      	uxtb	r2, r3
 8006460:	4b23      	ldr	r3, [pc, #140]	; (80064f0 <stm32Uart_TxProcessingAppl+0xc4>)
 8006462:	701a      	strb	r2, [r3, #0]
		if (huartp->Init.WordLength == UART_WORDLENGTH_9B)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646c:	d105      	bne.n	800647a <stm32Uart_TxProcessingAppl+0x4e>
		{
			huartp->Instance->DR = (uint16_t)(ubTxByte & (uint16_t)0x01FF);
 800646e:	4b23      	ldr	r3, [pc, #140]	; (80064fc <stm32Uart_TxProcessingAppl+0xd0>)
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	605a      	str	r2, [r3, #4]
 8006478:	e004      	b.n	8006484 <stm32Uart_TxProcessingAppl+0x58>
		}
		else
		{
			huartp->Instance->DR = (uint8_t)(ubTxByte & (uint8_t)0x00FF);
 800647a:	4b20      	ldr	r3, [pc, #128]	; (80064fc <stm32Uart_TxProcessingAppl+0xd0>)
 800647c:	781a      	ldrb	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	605a      	str	r2, [r3, #4]
		}

		if(TxByteCount >= Appl_u8TxLength)
 8006484:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <stm32Uart_TxProcessingAppl+0xc4>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	b2da      	uxtb	r2, r3
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <stm32Uart_TxProcessingAppl+0xc8>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	429a      	cmp	r2, r3
 8006492:	d310      	bcc.n	80064b6 <stm32Uart_TxProcessingAppl+0x8a>
		{
	        /* Disable the UART Register Empty Interrupt */
	        __HAL_UART_DISABLE_IT(huartp, UART_IT_TXE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064a2:	60da      	str	r2, [r3, #12]

	        /* Enable the UART Transmit Complete Interrupt */
	        __HAL_UART_ENABLE_IT(huartp, UART_IT_TC);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b2:	60da      	str	r2, [r3, #12]

        /* Enable the UART Transmit Complete Interrupt */
        __HAL_UART_DISABLE_IT(huartp, UART_IT_TC);
	}

}
 80064b4:	e017      	b.n	80064e6 <stm32Uart_TxProcessingAppl+0xba>
			stm32Uart_TxInterruptEnable(huartp,1);
 80064b6:	2101      	movs	r1, #1
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f843 	bl	8006544 <stm32Uart_TxInterruptEnable>
}
 80064be:	e012      	b.n	80064e6 <stm32Uart_TxProcessingAppl+0xba>
		Appl_u8UartTxCompleteFlag = 1;
 80064c0:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <stm32Uart_TxProcessingAppl+0xd4>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]
        __HAL_UART_DISABLE_IT(huartp, UART_IT_TXE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064d4:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huartp, UART_IT_TC);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e4:	60da      	str	r2, [r3, #12]
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	2000031b 	.word	0x2000031b
 80064f4:	2000031c 	.word	0x2000031c
 80064f8:	20000310 	.word	0x20000310
 80064fc:	2000031e 	.word	0x2000031e
 8006500:	20000009 	.word	0x20000009

08006504 <stm32Uart_RxInterruptEnable>:

void stm32Uart_RxInterruptEnable(UART_HandleTypeDef* huartp, uint8_t enable){
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
	if(enable == 1)
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d108      	bne.n	8006528 <stm32Uart_RxInterruptEnable+0x24>
	{
		//	__HAL_UART_ENABLE_IT(huartp, UART_IT_PE);
		//	__HAL_UART_ENABLE_IT(huartp, UART_IT_ERR);
			__HAL_UART_ENABLE_IT(huartp, UART_IT_RXNE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0220 	orr.w	r2, r2, #32
 8006524:	60da      	str	r2, [r3, #12]
		//	__HAL_UART_DISABLE_IT(huartp, UART_IT_ERR);
			__HAL_UART_DISABLE_IT(huartp, UART_IT_RXNE);
		//	__HAL_UART_DISABLE_IT(huartp, UART_IT_TXE);
	}

}
 8006526:	e007      	b.n	8006538 <stm32Uart_RxInterruptEnable+0x34>
			__HAL_UART_DISABLE_IT(huartp, UART_IT_RXNE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0220 	bic.w	r2, r2, #32
 8006536:	60da      	str	r2, [r3, #12]
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <stm32Uart_TxInterruptEnable>:

void stm32Uart_TxInterruptEnable(UART_HandleTypeDef* huartp, uint8_t enable){
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
	if(enable == 1)
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d108      	bne.n	8006568 <stm32Uart_TxInterruptEnable+0x24>
	{
		//	__HAL_UART_ENABLE_IT(huartp, UART_IT_PE);
		//	__HAL_UART_ENABLE_IT(huartp, UART_IT_ERR);
		//	__HAL_UART_ENABLE_IT(huartp, UART_IT_RXNE);
			__HAL_UART_ENABLE_IT(huartp, UART_IT_TXE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006564:	60da      	str	r2, [r3, #12]
		//	__HAL_UART_DISABLE_IT(huartp, UART_IT_ERR);
		//	__HAL_UART_DISABLE_IT(huartp, UART_IT_RXNE);
			__HAL_UART_DISABLE_IT(huartp, UART_IT_TXE);
	}

}
 8006566:	e007      	b.n	8006578 <stm32Uart_TxInterruptEnable+0x34>
			__HAL_UART_DISABLE_IT(huartp, UART_IT_TXE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006576:	60da      	str	r2, [r3, #12]
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b089      	sub	sp, #36	; 0x24
 8006588:	af04      	add	r7, sp, #16
 800658a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800658c:	2301      	movs	r3, #1
 800658e:	2202      	movs	r2, #2
 8006590:	2102      	movs	r1, #2
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fcba 	bl	8006f0c <USBH_FindInterface>
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2bff      	cmp	r3, #255	; 0xff
 80065a0:	d002      	beq.n	80065a8 <USBH_CDC_InterfaceInit+0x24>
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d901      	bls.n	80065ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065a8:	2302      	movs	r3, #2
 80065aa:	e13d      	b.n	8006828 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fc8f 	bl	8006ed4 <USBH_SelectInterface>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80065c0:	2302      	movs	r3, #2
 80065c2:	e131      	b.n	8006828 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80065ca:	2050      	movs	r0, #80	; 0x50
 80065cc:	f004 fe82 	bl	800b2d4 <malloc>
 80065d0:	4603      	mov	r3, r0
 80065d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80065e4:	2302      	movs	r3, #2
 80065e6:	e11f      	b.n	8006828 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80065e8:	2250      	movs	r2, #80	; 0x50
 80065ea:	2100      	movs	r1, #0
 80065ec:	68b8      	ldr	r0, [r7, #8]
 80065ee:	f004 fe8c 	bl	800b30a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	211a      	movs	r1, #26
 80065f8:	fb01 f303 	mul.w	r3, r1, r3
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	b25b      	sxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	da15      	bge.n	8006636 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	211a      	movs	r1, #26
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	4413      	add	r3, r2
 8006616:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800661a:	781a      	ldrb	r2, [r3, #0]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	211a      	movs	r1, #26
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	4413      	add	r3, r2
 800662c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006630:	881a      	ldrh	r2, [r3, #0]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f002 f894 	bl	800876a <USBH_AllocPipe>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	7819      	ldrb	r1, [r3, #0]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	7858      	ldrb	r0, [r3, #1]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	8952      	ldrh	r2, [r2, #10]
 8006662:	9202      	str	r2, [sp, #8]
 8006664:	2203      	movs	r2, #3
 8006666:	9201      	str	r2, [sp, #4]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	4623      	mov	r3, r4
 800666c:	4602      	mov	r2, r0
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f002 f84c 	bl	800870c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2200      	movs	r2, #0
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f004 fd79 	bl	800b174 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006682:	2300      	movs	r3, #0
 8006684:	2200      	movs	r2, #0
 8006686:	210a      	movs	r1, #10
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fc3f 	bl	8006f0c <USBH_FindInterface>
 800668e:	4603      	mov	r3, r0
 8006690:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	2bff      	cmp	r3, #255	; 0xff
 8006696:	d002      	beq.n	800669e <USBH_CDC_InterfaceInit+0x11a>
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d901      	bls.n	80066a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800669e:	2302      	movs	r3, #2
 80066a0:	e0c2      	b.n	8006828 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	211a      	movs	r1, #26
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	4413      	add	r3, r2
 80066ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	b25b      	sxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	da16      	bge.n	80066e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	211a      	movs	r1, #26
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	4413      	add	r3, r2
 80066c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066ca:	781a      	ldrb	r2, [r3, #0]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	211a      	movs	r1, #26
 80066d6:	fb01 f303 	mul.w	r3, r1, r3
 80066da:	4413      	add	r3, r2
 80066dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066e0:	881a      	ldrh	r2, [r3, #0]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	835a      	strh	r2, [r3, #26]
 80066e6:	e015      	b.n	8006714 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	211a      	movs	r1, #26
 80066ee:	fb01 f303 	mul.w	r3, r1, r3
 80066f2:	4413      	add	r3, r2
 80066f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	211a      	movs	r1, #26
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	4413      	add	r3, r2
 800670a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800670e:	881a      	ldrh	r2, [r3, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	211a      	movs	r1, #26
 800671a:	fb01 f303 	mul.w	r3, r1, r3
 800671e:	4413      	add	r3, r2
 8006720:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	b25b      	sxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	da16      	bge.n	800675a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	211a      	movs	r1, #26
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	4413      	add	r3, r2
 8006738:	f203 3356 	addw	r3, r3, #854	; 0x356
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	211a      	movs	r1, #26
 8006748:	fb01 f303 	mul.w	r3, r1, r3
 800674c:	4413      	add	r3, r2
 800674e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006752:	881a      	ldrh	r2, [r3, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	835a      	strh	r2, [r3, #26]
 8006758:	e015      	b.n	8006786 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	211a      	movs	r1, #26
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	4413      	add	r3, r2
 8006766:	f203 3356 	addw	r3, r3, #854	; 0x356
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	211a      	movs	r1, #26
 8006776:	fb01 f303 	mul.w	r3, r1, r3
 800677a:	4413      	add	r3, r2
 800677c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006780:	881a      	ldrh	r2, [r3, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	7b9b      	ldrb	r3, [r3, #14]
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 ffec 	bl	800876a <USBH_AllocPipe>
 8006792:	4603      	mov	r3, r0
 8006794:	461a      	mov	r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	7bdb      	ldrb	r3, [r3, #15]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 ffe2 	bl	800876a <USBH_AllocPipe>
 80067a6:	4603      	mov	r3, r0
 80067a8:	461a      	mov	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	7b59      	ldrb	r1, [r3, #13]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	7b98      	ldrb	r0, [r3, #14]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	8b12      	ldrh	r2, [r2, #24]
 80067c6:	9202      	str	r2, [sp, #8]
 80067c8:	2202      	movs	r2, #2
 80067ca:	9201      	str	r2, [sp, #4]
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	4623      	mov	r3, r4
 80067d0:	4602      	mov	r2, r0
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 ff9a 	bl	800870c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	7b19      	ldrb	r1, [r3, #12]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	7bd8      	ldrb	r0, [r3, #15]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	8b52      	ldrh	r2, [r2, #26]
 80067f0:	9202      	str	r2, [sp, #8]
 80067f2:	2202      	movs	r2, #2
 80067f4:	9201      	str	r2, [sp, #4]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	4623      	mov	r3, r4
 80067fa:	4602      	mov	r2, r0
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 ff85 	bl	800870c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	7b5b      	ldrb	r3, [r3, #13]
 800680e:	2200      	movs	r2, #0
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f004 fcae 	bl	800b174 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	7b1b      	ldrb	r3, [r3, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f004 fca7 	bl	800b174 <USBH_LL_SetToggle>

  return USBH_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	bd90      	pop	{r4, r7, pc}

08006830 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00e      	beq.n	8006868 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 ff7a 	bl	800874a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 ffa5 	bl	80087ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	7b1b      	ldrb	r3, [r3, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00e      	beq.n	800688e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	7b1b      	ldrb	r3, [r3, #12]
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 ff67 	bl	800874a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	7b1b      	ldrb	r3, [r3, #12]
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 ff92 	bl	80087ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	7b5b      	ldrb	r3, [r3, #13]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00e      	beq.n	80068b4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	7b5b      	ldrb	r3, [r3, #13]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 ff54 	bl	800874a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	7b5b      	ldrb	r3, [r3, #13]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 ff7f 	bl	80087ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f004 fd0b 	bl	800b2e4 <free>
    phost->pActiveClass->pData = 0U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d4:	2200      	movs	r2, #0
 80068d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3340      	adds	r3, #64	; 0x40
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f8b1 	bl	8006a62 <GetLineCoding>
 8006900:	4603      	mov	r3, r0
 8006902:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006904:	7afb      	ldrb	r3, [r7, #11]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d105      	bne.n	8006916 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006910:	2102      	movs	r1, #2
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006916:	7afb      	ldrb	r3, [r7, #11]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006928:	2301      	movs	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006940:	2b04      	cmp	r3, #4
 8006942:	d877      	bhi.n	8006a34 <USBH_CDC_Process+0x114>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <USBH_CDC_Process+0x2c>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	08006961 	.word	0x08006961
 8006950:	08006967 	.word	0x08006967
 8006954:	08006997 	.word	0x08006997
 8006958:	08006a0b 	.word	0x08006a0b
 800695c:	08006a19 	.word	0x08006a19
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]
      break;
 8006964:	e06d      	b.n	8006a42 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f897 	bl	8006aa0 <SetLineCoding>
 8006972:	4603      	mov	r3, r0
 8006974:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006984:	e058      	b.n	8006a38 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d055      	beq.n	8006a38 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2204      	movs	r2, #4
 8006990:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006994:	e050      	b.n	8006a38 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	3340      	adds	r3, #64	; 0x40
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f860 	bl	8006a62 <GetLineCoding>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d126      	bne.n	80069fa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069be:	791b      	ldrb	r3, [r3, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d13b      	bne.n	8006a3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d133      	bne.n	8006a3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069de:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d12b      	bne.n	8006a3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d124      	bne.n	8006a3c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f984 	bl	8006d00 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069f8:	e020      	b.n	8006a3c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d01d      	beq.n	8006a3c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2204      	movs	r2, #4
 8006a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a08:	e018      	b.n	8006a3c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f867 	bl	8006ade <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f8f8 	bl	8006c06 <CDC_ProcessReception>
      break;
 8006a16:	e014      	b.n	8006a42 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a18:	2100      	movs	r1, #0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 f953 	bl	8007cc6 <USBH_ClrFeature>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10a      	bne.n	8006a40 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a32:	e005      	b.n	8006a40 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a34:	bf00      	nop
 8006a36:	e004      	b.n	8006a42 <USBH_CDC_Process+0x122>
      break;
 8006a38:	bf00      	nop
 8006a3a:	e002      	b.n	8006a42 <USBH_CDC_Process+0x122>
      break;
 8006a3c:	bf00      	nop
 8006a3e:	e000      	b.n	8006a42 <USBH_CDC_Process+0x122>
      break;
 8006a40:	bf00      	nop

  }

  return status;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	22a1      	movs	r2, #161	; 0xa1
 8006a70:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2221      	movs	r2, #33	; 0x21
 8006a76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2207      	movs	r2, #7
 8006a88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 faf8 	bl	8008086 <USBH_CtlReq>
 8006a96:	4603      	mov	r3, r0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2221      	movs	r2, #33	; 0x21
 8006aae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2207      	movs	r2, #7
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fad9 	bl	8008086 <USBH_CtlReq>
 8006ad4:	4603      	mov	r3, r0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af02      	add	r7, sp, #8
 8006ae4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d002      	beq.n	8006b04 <CDC_ProcessTransmission+0x26>
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d025      	beq.n	8006b4e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006b02:	e07c      	b.n	8006bfe <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	8b12      	ldrh	r2, [r2, #24]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d90c      	bls.n	8006b2a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	69d9      	ldr	r1, [r3, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8b1a      	ldrh	r2, [r3, #24]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	7b58      	ldrb	r0, [r3, #13]
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	4603      	mov	r3, r0
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fdaf 	bl	8008686 <USBH_BulkSendData>
 8006b28:	e00c      	b.n	8006b44 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	7b58      	ldrb	r0, [r3, #13]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fda1 	bl	8008686 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b4c:	e057      	b.n	8006bfe <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	7b5b      	ldrb	r3, [r3, #13]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f004 fae3 	bl	800b120 <USBH_LL_GetURBState>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006b5e:	7afb      	ldrb	r3, [r7, #11]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d136      	bne.n	8006bd2 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	8b12      	ldrh	r2, [r2, #24]
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d90e      	bls.n	8006b8e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	8b12      	ldrh	r2, [r2, #24]
 8006b78:	1a9a      	subs	r2, r3, r2
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	8b12      	ldrh	r2, [r2, #24]
 8006b86:	441a      	add	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	61da      	str	r2, [r3, #28]
 8006b8c:	e002      	b.n	8006b94 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006ba4:	e006      	b.n	8006bb4 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f892 	bl	8006cd8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006bc8:	2200      	movs	r2, #0
 8006bca:	4619      	mov	r1, r3
 8006bcc:	f001 feea 	bl	80089a4 <osMessagePut>
      break;
 8006bd0:	e014      	b.n	8006bfc <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8006bd2:	7afb      	ldrb	r3, [r7, #11]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d111      	bne.n	8006bfc <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2204      	movs	r2, #4
 8006be4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	f001 fed4 	bl	80089a4 <osMessagePut>
      break;
 8006bfc:	bf00      	nop
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b086      	sub	sp, #24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d002      	beq.n	8006c2c <CDC_ProcessReception+0x26>
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d00e      	beq.n	8006c48 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c2a:	e051      	b.n	8006cd0 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	6a19      	ldr	r1, [r3, #32]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	8b5a      	ldrh	r2, [r3, #26]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	7b1b      	ldrb	r3, [r3, #12]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 fd49 	bl	80086d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2204      	movs	r2, #4
 8006c42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c46:	e043      	b.n	8006cd0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	7b1b      	ldrb	r3, [r3, #12]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f004 fa66 	bl	800b120 <USBH_LL_GetURBState>
 8006c54:	4603      	mov	r3, r0
 8006c56:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c58:	7cfb      	ldrb	r3, [r7, #19]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d137      	bne.n	8006cce <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	7b1b      	ldrb	r3, [r3, #12]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f004 f9c9 	bl	800affc <USBH_LL_GetLastXferSize>
 8006c6a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d016      	beq.n	8006ca4 <CDC_ProcessReception+0x9e>
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	8b5b      	ldrh	r3, [r3, #26]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d910      	bls.n	8006ca4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	1ad2      	subs	r2, r2, r3
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	6a1a      	ldr	r2, [r3, #32]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	441a      	add	r2, r3
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2203      	movs	r2, #3
 8006c9e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006ca2:	e006      	b.n	8006cb2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f81d 	bl	8006cec <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f001 fe6b 	bl	80089a4 <osMessagePut>
      break;
 8006cce:	bf00      	nop
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006d14:	b5b0      	push	{r4, r5, r7, lr}
 8006d16:	b090      	sub	sp, #64	; 0x40
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e04d      	b.n	8006dc8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	79fa      	ldrb	r2, [r7, #7]
 8006d30:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f847 	bl	8006dd8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006d78:	4b15      	ldr	r3, [pc, #84]	; (8006dd0 <USBH_Init+0xbc>)
 8006d7a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8006d84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 fde1 	bl	8008952 <osMessageCreate>
 8006d90:	4602      	mov	r2, r0
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8006d98:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <USBH_Init+0xc0>)
 8006d9a:	f107 0414 	add.w	r4, r7, #20
 8006d9e:	461d      	mov	r5, r3
 8006da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006da4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8006dac:	f107 0314 	add.w	r3, r7, #20
 8006db0:	68f9      	ldr	r1, [r7, #12]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 fd6d 	bl	8008892 <osThreadCreate>
 8006db8:	4602      	mov	r2, r0
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f004 f869 	bl	800ae98 <USBH_LL_Init>

  return USBH_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3740      	adds	r7, #64	; 0x40
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bdb0      	pop	{r4, r5, r7, pc}
 8006dd0:	0800b4fc 	.word	0x0800b4fc
 8006dd4:	0800b518 	.word	0x0800b518

08006dd8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006de4:	2300      	movs	r3, #0
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	e009      	b.n	8006dfe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	33e0      	adds	r3, #224	; 0xe0
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	2200      	movs	r2, #0
 8006df6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b0e      	cmp	r3, #14
 8006e02:	d9f2      	bls.n	8006dea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e009      	b.n	8006e1e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e14:	2200      	movs	r2, #0
 8006e16:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e24:	d3f1      	bcc.n	8006e0a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2240      	movs	r2, #64	; 0x40
 8006e4a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d016      	beq.n	8006ec2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10e      	bne.n	8006ebc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ea4:	1c59      	adds	r1, r3, #1
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	33de      	adds	r3, #222	; 0xde
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
 8006eba:	e004      	b.n	8006ec6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	73fb      	strb	r3, [r7, #15]
 8006ec0:	e001      	b.n	8006ec6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d204      	bcs.n	8006efa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	78fa      	ldrb	r2, [r7, #3]
 8006ef4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ef8:	e001      	b.n	8006efe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006efa:	2302      	movs	r3, #2
 8006efc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	4608      	mov	r0, r1
 8006f16:	4611      	mov	r1, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	70fb      	strb	r3, [r7, #3]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	70bb      	strb	r3, [r7, #2]
 8006f22:	4613      	mov	r3, r2
 8006f24:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f34:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f36:	e025      	b.n	8006f84 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	221a      	movs	r2, #26
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
 8006f40:	3308      	adds	r3, #8
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	3302      	adds	r3, #2
 8006f48:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	795b      	ldrb	r3, [r3, #5]
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d002      	beq.n	8006f5a <USBH_FindInterface+0x4e>
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	2bff      	cmp	r3, #255	; 0xff
 8006f58:	d111      	bne.n	8006f7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f5e:	78ba      	ldrb	r2, [r7, #2]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d002      	beq.n	8006f6a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f64:	78bb      	ldrb	r3, [r7, #2]
 8006f66:	2bff      	cmp	r3, #255	; 0xff
 8006f68:	d109      	bne.n	8006f7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f6e:	787a      	ldrb	r2, [r7, #1]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d002      	beq.n	8006f7a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f74:	787b      	ldrb	r3, [r7, #1]
 8006f76:	2bff      	cmp	r3, #255	; 0xff
 8006f78:	d101      	bne.n	8006f7e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	e006      	b.n	8006f8c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	3301      	adds	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d9d6      	bls.n	8006f38 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f8a:	23ff      	movs	r3, #255	; 0xff
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f003 ffb5 	bl	800af10 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f004 f8cc 	bl	800b146 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af04      	add	r7, sp, #16
 8006fbe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d102      	bne.n	8006fda <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b0b      	cmp	r3, #11
 8006fe2:	f200 823c 	bhi.w	800745e <USBH_Process+0x4a6>
 8006fe6:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <USBH_Process+0x34>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	0800701d 	.word	0x0800701d
 8006ff0:	0800706b 	.word	0x0800706b
 8006ff4:	080070ef 	.word	0x080070ef
 8006ff8:	080073dd 	.word	0x080073dd
 8006ffc:	0800745f 	.word	0x0800745f
 8007000:	080071af 	.word	0x080071af
 8007004:	08007367 	.word	0x08007367
 8007008:	08007201 	.word	0x08007201
 800700c:	0800723d 	.word	0x0800723d
 8007010:	08007277 	.word	0x08007277
 8007014:	080072bf 	.word	0x080072bf
 8007018:	080073c5 	.word	0x080073c5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 821c 	beq.w	8007462 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007030:	20c8      	movs	r0, #200	; 0xc8
 8007032:	f004 f8d2 	bl	800b1da <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f003 ffc5 	bl	800afc6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007060:	2200      	movs	r2, #0
 8007062:	4619      	mov	r1, r3
 8007064:	f001 fc9e 	bl	80089a4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007068:	e1fb      	b.n	8007462 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007070:	2b01      	cmp	r3, #1
 8007072:	d107      	bne.n	8007084 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	e025      	b.n	80070d0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800708a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800708e:	d914      	bls.n	80070ba <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007096:	3301      	adds	r3, #1
 8007098:	b2da      	uxtb	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d903      	bls.n	80070b2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	220d      	movs	r2, #13
 80070ae:	701a      	strb	r2, [r3, #0]
 80070b0:	e00e      	b.n	80070d0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	e00a      	b.n	80070d0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070c0:	f103 020a 	add.w	r2, r3, #10
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80070ca:	200a      	movs	r0, #10
 80070cc:	f004 f885 	bl	800b1da <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80070e4:	2200      	movs	r2, #0
 80070e6:	4619      	mov	r1, r3
 80070e8:	f001 fc5c 	bl	80089a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070ec:	e1c0      	b.n	8007470 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070fe:	2104      	movs	r1, #4
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007104:	2064      	movs	r0, #100	; 0x64
 8007106:	f004 f868 	bl	800b1da <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f003 ff36 	bl	800af7c <USBH_LL_GetSpeed>
 8007110:	4603      	mov	r3, r0
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2205      	movs	r2, #5
 800711e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007120:	2100      	movs	r1, #0
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fb21 	bl	800876a <USBH_AllocPipe>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007130:	2180      	movs	r1, #128	; 0x80
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fb19 	bl	800876a <USBH_AllocPipe>
 8007138:	4603      	mov	r3, r0
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7919      	ldrb	r1, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007154:	b292      	uxth	r2, r2
 8007156:	9202      	str	r2, [sp, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	9201      	str	r2, [sp, #4]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	4603      	mov	r3, r0
 8007160:	2280      	movs	r2, #128	; 0x80
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fad2 	bl	800870c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	7959      	ldrb	r1, [r3, #5]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800717c:	b292      	uxth	r2, r2
 800717e:	9202      	str	r2, [sp, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	9201      	str	r2, [sp, #4]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	4603      	mov	r3, r0
 8007188:	2200      	movs	r2, #0
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fabe 	bl	800870c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80071a4:	2200      	movs	r2, #0
 80071a6:	4619      	mov	r1, r3
 80071a8:	f001 fbfc 	bl	80089a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071ac:	e160      	b.n	8007470 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f964 	bl	800747c <USBH_HandleEnum>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 8152 	bne.w	8007466 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d103      	bne.n	80071dc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2208      	movs	r2, #8
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	e002      	b.n	80071e2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2207      	movs	r2, #7
 80071e0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2205      	movs	r2, #5
 80071e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80071f6:	2200      	movs	r2, #0
 80071f8:	4619      	mov	r1, r3
 80071fa:	f001 fbd3 	bl	80089a4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80071fe:	e132      	b.n	8007466 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 812f 	beq.w	800746a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007212:	2101      	movs	r1, #1
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2208      	movs	r2, #8
 800721c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2205      	movs	r2, #5
 8007222:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007232:	2200      	movs	r2, #0
 8007234:	4619      	mov	r1, r3
 8007236:	f001 fbb5 	bl	80089a4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800723a:	e116      	b.n	800746a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007242:	b29b      	uxth	r3, r3
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fcf6 	bl	8007c38 <USBH_SetCfg>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2209      	movs	r2, #9
 8007256:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800726c:	2200      	movs	r2, #0
 800726e:	4619      	mov	r1, r3
 8007270:	f001 fb98 	bl	80089a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007274:	e0fc      	b.n	8007470 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007284:	2101      	movs	r1, #1
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fcf9 	bl	8007c7e <USBH_SetFeature>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	220a      	movs	r2, #10
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	e002      	b.n	80072a0 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	220a      	movs	r2, #10
 800729e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80072b4:	2200      	movs	r2, #0
 80072b6:	4619      	mov	r1, r3
 80072b8:	f001 fb74 	bl	80089a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072bc:	e0d8      	b.n	8007470 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d03f      	beq.n	8007348 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072d0:	2300      	movs	r3, #0
 80072d2:	73fb      	strb	r3, [r7, #15]
 80072d4:	e016      	b.n	8007304 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80072d6:	7bfa      	ldrb	r2, [r7, #15]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	32de      	adds	r2, #222	; 0xde
 80072dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e0:	791a      	ldrb	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d108      	bne.n	80072fe <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80072ec:	7bfa      	ldrb	r2, [r7, #15]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	32de      	adds	r2, #222	; 0xde
 80072f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80072fc:	e005      	b.n	800730a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	3301      	adds	r3, #1
 8007302:	73fb      	strb	r3, [r7, #15]
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d0e5      	beq.n	80072d6 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d016      	beq.n	8007342 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	4798      	blx	r3
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2206      	movs	r2, #6
 800732a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007332:	2103      	movs	r1, #3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4798      	blx	r3
 8007338:	e006      	b.n	8007348 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	220d      	movs	r2, #13
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	e002      	b.n	8007348 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	220d      	movs	r2, #13
 8007346:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2205      	movs	r2, #5
 800734c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800735c:	2200      	movs	r2, #0
 800735e:	4619      	mov	r1, r3
 8007360:	f001 fb20 	bl	80089a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007364:	e084      	b.n	8007470 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d017      	beq.n	80073a0 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
 800737c:	4603      	mov	r3, r0
 800737e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d103      	bne.n	8007390 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	220b      	movs	r2, #11
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	e00a      	b.n	80073a6 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d106      	bne.n	80073a6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	220d      	movs	r2, #13
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e002      	b.n	80073a6 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	220d      	movs	r2, #13
 80073a4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2205      	movs	r2, #5
 80073aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80073ba:	2200      	movs	r2, #0
 80073bc:	4619      	mov	r1, r3
 80073be:	f001 faf1 	bl	80089a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073c2:	e055      	b.n	8007470 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d04f      	beq.n	800746e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
      }
      break;
 80073da:	e048      	b.n	800746e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff fcf7 	bl	8006dd8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007418:	2105      	movs	r1, #5
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b01      	cmp	r3, #1
 8007428:	d107      	bne.n	800743a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff fdb0 	bl	8006f98 <USBH_Start>
 8007438:	e002      	b.n	8007440 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f003 fd68 	bl	800af10 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007454:	2200      	movs	r2, #0
 8007456:	4619      	mov	r1, r3
 8007458:	f001 faa4 	bl	80089a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800745c:	e008      	b.n	8007470 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800745e:	bf00      	nop
 8007460:	e006      	b.n	8007470 <USBH_Process+0x4b8>
      break;
 8007462:	bf00      	nop
 8007464:	e004      	b.n	8007470 <USBH_Process+0x4b8>
      break;
 8007466:	bf00      	nop
 8007468:	e002      	b.n	8007470 <USBH_Process+0x4b8>
    break;
 800746a:	bf00      	nop
 800746c:	e000      	b.n	8007470 <USBH_Process+0x4b8>
      break;
 800746e:	bf00      	nop
  }
  return USBH_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop

0800747c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af04      	add	r7, sp, #16
 8007482:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007488:	2301      	movs	r3, #1
 800748a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b07      	cmp	r3, #7
 8007492:	f200 8208 	bhi.w	80078a6 <USBH_HandleEnum+0x42a>
 8007496:	a201      	add	r2, pc, #4	; (adr r2, 800749c <USBH_HandleEnum+0x20>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074bd 	.word	0x080074bd
 80074a0:	0800757b 	.word	0x0800757b
 80074a4:	080075e5 	.word	0x080075e5
 80074a8:	08007673 	.word	0x08007673
 80074ac:	080076dd 	.word	0x080076dd
 80074b0:	0800774d 	.word	0x0800774d
 80074b4:	080077e9 	.word	0x080077e9
 80074b8:	08007867 	.word	0x08007867
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80074bc:	2108      	movs	r1, #8
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 faea 	bl	8007a98 <USBH_Get_DevDesc>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d130      	bne.n	8007530 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	7919      	ldrb	r1, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074f2:	b292      	uxth	r2, r2
 80074f4:	9202      	str	r2, [sp, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	9201      	str	r2, [sp, #4]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	4603      	mov	r3, r0
 80074fe:	2280      	movs	r2, #128	; 0x80
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 f903 	bl	800870c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	7959      	ldrb	r1, [r3, #5]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800751a:	b292      	uxth	r2, r2
 800751c:	9202      	str	r2, [sp, #8]
 800751e:	2200      	movs	r2, #0
 8007520:	9201      	str	r2, [sp, #4]
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	4603      	mov	r3, r0
 8007526:	2200      	movs	r2, #0
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 f8ef 	bl	800870c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800752e:	e1bc      	b.n	80078aa <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b03      	cmp	r3, #3
 8007534:	f040 81b9 	bne.w	80078aa <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800753e:	3301      	adds	r3, #1
 8007540:	b2da      	uxtb	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800754e:	2b03      	cmp	r3, #3
 8007550:	d903      	bls.n	800755a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	220d      	movs	r2, #13
 8007556:	701a      	strb	r2, [r3, #0]
      break;
 8007558:	e1a7      	b.n	80078aa <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	795b      	ldrb	r3, [r3, #5]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f923 	bl	80087ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	791b      	ldrb	r3, [r3, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 f91d 	bl	80087ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]
      break;
 8007578:	e197      	b.n	80078aa <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800757a:	2112      	movs	r1, #18
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa8b 	bl	8007a98 <USBH_Get_DevDesc>
 8007582:	4603      	mov	r3, r0
 8007584:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007592:	e18c      	b.n	80078ae <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b03      	cmp	r3, #3
 8007598:	f040 8189 	bne.w	80078ae <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075a2:	3301      	adds	r3, #1
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d903      	bls.n	80075be <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	220d      	movs	r2, #13
 80075ba:	701a      	strb	r2, [r3, #0]
      break;
 80075bc:	e177      	b.n	80078ae <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	795b      	ldrb	r3, [r3, #5]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 f8f1 	bl	80087ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	791b      	ldrb	r3, [r3, #4]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 f8eb 	bl	80087ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]
      break;
 80075e2:	e164      	b.n	80078ae <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80075e4:	2101      	movs	r1, #1
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fb02 	bl	8007bf0 <USBH_SetAddress>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d132      	bne.n	800765c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80075f6:	2002      	movs	r0, #2
 80075f8:	f003 fdef 	bl	800b1da <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2203      	movs	r2, #3
 8007608:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	7919      	ldrb	r1, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800761e:	b292      	uxth	r2, r2
 8007620:	9202      	str	r2, [sp, #8]
 8007622:	2200      	movs	r2, #0
 8007624:	9201      	str	r2, [sp, #4]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	4603      	mov	r3, r0
 800762a:	2280      	movs	r2, #128	; 0x80
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 f86d 	bl	800870c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	7959      	ldrb	r1, [r3, #5]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007646:	b292      	uxth	r2, r2
 8007648:	9202      	str	r2, [sp, #8]
 800764a:	2200      	movs	r2, #0
 800764c:	9201      	str	r2, [sp, #4]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4603      	mov	r3, r0
 8007652:	2200      	movs	r2, #0
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 f859 	bl	800870c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800765a:	e12a      	b.n	80078b2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b03      	cmp	r3, #3
 8007660:	f040 8127 	bne.w	80078b2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	220d      	movs	r2, #13
 8007668:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	705a      	strb	r2, [r3, #1]
      break;
 8007670:	e11f      	b.n	80078b2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007672:	2109      	movs	r1, #9
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fa37 	bl	8007ae8 <USBH_Get_CfgDesc>
 800767a:	4603      	mov	r3, r0
 800767c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d103      	bne.n	800768c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2204      	movs	r2, #4
 8007688:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800768a:	e114      	b.n	80078b6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b03      	cmp	r3, #3
 8007690:	f040 8111 	bne.w	80078b6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800769a:	3301      	adds	r3, #1
 800769c:	b2da      	uxtb	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d903      	bls.n	80076b6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	220d      	movs	r2, #13
 80076b2:	701a      	strb	r2, [r3, #0]
      break;
 80076b4:	e0ff      	b.n	80078b6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	795b      	ldrb	r3, [r3, #5]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 f875 	bl	80087ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	791b      	ldrb	r3, [r3, #4]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f86f 	bl	80087ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
      break;
 80076da:	e0ec      	b.n	80078b6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f9ff 	bl	8007ae8 <USBH_Get_CfgDesc>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2205      	movs	r2, #5
 80076f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076fa:	e0de      	b.n	80078ba <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	f040 80db 	bne.w	80078ba <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800770a:	3301      	adds	r3, #1
 800770c:	b2da      	uxtb	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800771a:	2b03      	cmp	r3, #3
 800771c:	d903      	bls.n	8007726 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	220d      	movs	r2, #13
 8007722:	701a      	strb	r2, [r3, #0]
      break;
 8007724:	e0c9      	b.n	80078ba <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	795b      	ldrb	r3, [r3, #5]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 f83d 	bl	80087ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	791b      	ldrb	r3, [r3, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 f837 	bl	80087ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
      break;
 800774a:	e0b6      	b.n	80078ba <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007752:	2b00      	cmp	r3, #0
 8007754:	d036      	beq.n	80077c4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007762:	23ff      	movs	r3, #255	; 0xff
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f9e3 	bl	8007b30 <USBH_Get_StringDesc>
 800776a:	4603      	mov	r3, r0
 800776c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d111      	bne.n	8007798 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2206      	movs	r2, #6
 8007778:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2205      	movs	r2, #5
 800777e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800778e:	2200      	movs	r2, #0
 8007790:	4619      	mov	r1, r3
 8007792:	f001 f907 	bl	80089a4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007796:	e092      	b.n	80078be <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b03      	cmp	r3, #3
 800779c:	f040 808f 	bne.w	80078be <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2206      	movs	r2, #6
 80077a4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2205      	movs	r2, #5
 80077aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80077ba:	2200      	movs	r2, #0
 80077bc:	4619      	mov	r1, r3
 80077be:	f001 f8f1 	bl	80089a4 <osMessagePut>
      break;
 80077c2:	e07c      	b.n	80078be <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2206      	movs	r2, #6
 80077c8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2205      	movs	r2, #5
 80077ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80077de:	2200      	movs	r2, #0
 80077e0:	4619      	mov	r1, r3
 80077e2:	f001 f8df 	bl	80089a4 <osMessagePut>
      break;
 80077e6:	e06a      	b.n	80078be <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d027      	beq.n	8007842 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077fe:	23ff      	movs	r3, #255	; 0xff
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f995 	bl	8007b30 <USBH_Get_StringDesc>
 8007806:	4603      	mov	r3, r0
 8007808:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d103      	bne.n	8007818 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2207      	movs	r2, #7
 8007814:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007816:	e054      	b.n	80078c2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	2b03      	cmp	r3, #3
 800781c:	d151      	bne.n	80078c2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2207      	movs	r2, #7
 8007822:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2205      	movs	r2, #5
 8007828:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007838:	2200      	movs	r2, #0
 800783a:	4619      	mov	r1, r3
 800783c:	f001 f8b2 	bl	80089a4 <osMessagePut>
      break;
 8007840:	e03f      	b.n	80078c2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2207      	movs	r2, #7
 8007846:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2205      	movs	r2, #5
 800784c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800785c:	2200      	movs	r2, #0
 800785e:	4619      	mov	r1, r3
 8007860:	f001 f8a0 	bl	80089a4 <osMessagePut>
      break;
 8007864:	e02d      	b.n	80078c2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800786c:	2b00      	cmp	r3, #0
 800786e:	d017      	beq.n	80078a0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800787c:	23ff      	movs	r3, #255	; 0xff
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f956 	bl	8007b30 <USBH_Get_StringDesc>
 8007884:	4603      	mov	r3, r0
 8007886:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d102      	bne.n	8007894 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007892:	e018      	b.n	80078c6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b03      	cmp	r3, #3
 8007898:	d115      	bne.n	80078c6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]
      break;
 800789e:	e012      	b.n	80078c6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]
      break;
 80078a4:	e00f      	b.n	80078c6 <USBH_HandleEnum+0x44a>

    default:
      break;
 80078a6:	bf00      	nop
 80078a8:	e00e      	b.n	80078c8 <USBH_HandleEnum+0x44c>
      break;
 80078aa:	bf00      	nop
 80078ac:	e00c      	b.n	80078c8 <USBH_HandleEnum+0x44c>
      break;
 80078ae:	bf00      	nop
 80078b0:	e00a      	b.n	80078c8 <USBH_HandleEnum+0x44c>
      break;
 80078b2:	bf00      	nop
 80078b4:	e008      	b.n	80078c8 <USBH_HandleEnum+0x44c>
      break;
 80078b6:	bf00      	nop
 80078b8:	e006      	b.n	80078c8 <USBH_HandleEnum+0x44c>
      break;
 80078ba:	bf00      	nop
 80078bc:	e004      	b.n	80078c8 <USBH_HandleEnum+0x44c>
      break;
 80078be:	bf00      	nop
 80078c0:	e002      	b.n	80078c8 <USBH_HandleEnum+0x44c>
      break;
 80078c2:	bf00      	nop
 80078c4:	e000      	b.n	80078c8 <USBH_HandleEnum+0x44c>
      break;
 80078c6:	bf00      	nop
  }
  return Status;
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop

080078d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f804 	bl	8007916 <USBH_HandleSof>
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b0b      	cmp	r3, #11
 8007926:	d10a      	bne.n	800793e <USBH_HandleSof+0x28>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4798      	blx	r3
  }
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800796a:	2200      	movs	r2, #0
 800796c:	4619      	mov	r1, r3
 800796e:	f001 f819 	bl	80089a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007972:	bf00      	nop
}
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800798a:	bf00      	nop
}
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80079ca:	2200      	movs	r2, #0
 80079cc:	4619      	mov	r1, r3
 80079ce:	f000 ffe9 	bl	80089a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f003 faa2 	bl	800af46 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	791b      	ldrb	r3, [r3, #4]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fecf 	bl	80087ac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	795b      	ldrb	r3, [r3, #5]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fec9 	bl	80087ac <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a2e:	2200      	movs	r2, #0
 8007a30:	4619      	mov	r1, r3
 8007a32:	f000 ffb7 	bl	80089a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8007a4e:	f107 030c 	add.w	r3, r7, #12
 8007a52:	f04f 32ff 	mov.w	r2, #4294967295
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 ffe4 	bl	8008a24 <osMessageGet>
    if (event.status == osEventMessage)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b10      	cmp	r3, #16
 8007a60:	d1f2      	bne.n	8007a48 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff faa8 	bl	8006fb8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007a68:	e7ee      	b.n	8007a48 <USBH_Process_OS+0x8>

08007a6a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a86:	2200      	movs	r2, #0
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f000 ff8b 	bl	80089a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f864 	bl	8007b86 <USBH_GetDescriptor>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	73fb      	strb	r3, [r7, #15]
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	b292      	uxth	r2, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f000 f918 	bl	8007d0e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	331c      	adds	r3, #28
 8007af8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007afa:	887b      	ldrh	r3, [r7, #2]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b04:	2100      	movs	r1, #0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f83d 	bl	8007b86 <USBH_GetDescriptor>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	72fb      	strb	r3, [r7, #11]
 8007b10:	7afb      	ldrb	r3, [r7, #11]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d107      	bne.n	8007b26 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b1c:	887a      	ldrh	r2, [r7, #2]
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 f964 	bl	8007dee <USBH_ParseCfgDesc>
  }

  return status;
 8007b26:	7afb      	ldrb	r3, [r7, #11]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	72fb      	strb	r3, [r7, #11]
 8007b40:	4613      	mov	r3, r2
 8007b42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b4c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b54:	893b      	ldrh	r3, [r7, #8]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f812 	bl	8007b86 <USBH_GetDescriptor>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75fb      	strb	r3, [r7, #23]
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d107      	bne.n	8007b7c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b72:	893a      	ldrh	r2, [r7, #8]
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fa37 	bl	8007fea <USBH_ParseStringDesc>
  }

  return status;
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	607b      	str	r3, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	72fb      	strb	r3, [r7, #11]
 8007b94:	4613      	mov	r3, r2
 8007b96:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	789b      	ldrb	r3, [r3, #2]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d11c      	bne.n	8007bda <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2206      	movs	r2, #6
 8007bb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	893a      	ldrh	r2, [r7, #8]
 8007bb6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bb8:	893b      	ldrh	r3, [r7, #8]
 8007bba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bc2:	d104      	bne.n	8007bce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f240 4209 	movw	r2, #1033	; 0x409
 8007bca:	829a      	strh	r2, [r3, #20]
 8007bcc:	e002      	b.n	8007bd4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8b3a      	ldrh	r2, [r7, #24]
 8007bd8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007bda:	8b3b      	ldrh	r3, [r7, #24]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fa50 	bl	8008086 <USBH_CtlReq>
 8007be6:	4603      	mov	r3, r0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	789b      	ldrb	r3, [r3, #2]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d10f      	bne.n	8007c24 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2205      	movs	r2, #5
 8007c0e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa2c 	bl	8008086 <USBH_CtlReq>
 8007c2e:	4603      	mov	r3, r0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	789b      	ldrb	r3, [r3, #2]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d10e      	bne.n	8007c6a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2209      	movs	r2, #9
 8007c56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	887a      	ldrh	r2, [r7, #2]
 8007c5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa09 	bl	8008086 <USBH_CtlReq>
 8007c74:	4603      	mov	r3, r0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	789b      	ldrb	r3, [r3, #2]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d10f      	bne.n	8007cb2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c9e:	78fb      	ldrb	r3, [r7, #3]
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f9e5 	bl	8008086 <USBH_CtlReq>
 8007cbc:	4603      	mov	r3, r0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	789b      	ldrb	r3, [r3, #2]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d10f      	bne.n	8007cfa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f9c1 	bl	8008086 <USBH_CtlReq>
 8007d04:	4603      	mov	r3, r0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	781a      	ldrb	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	785a      	ldrb	r2, [r3, #1]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	3302      	adds	r3, #2
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3303      	adds	r3, #3
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	4313      	orrs	r3, r2
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	791a      	ldrb	r2, [r3, #4]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	795a      	ldrb	r2, [r3, #5]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	799a      	ldrb	r2, [r3, #6]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	79da      	ldrb	r2, [r3, #7]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007d68:	88fb      	ldrh	r3, [r7, #6]
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d939      	bls.n	8007de2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	3308      	adds	r3, #8
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	3309      	adds	r3, #9
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	4313      	orrs	r3, r2
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	330a      	adds	r3, #10
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	330b      	adds	r3, #11
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	021b      	lsls	r3, r3, #8
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	330c      	adds	r3, #12
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	330d      	adds	r3, #13
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	7b9a      	ldrb	r2, [r3, #14]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	7bda      	ldrb	r2, [r3, #15]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	7c1a      	ldrb	r2, [r3, #16]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	7c5a      	ldrb	r2, [r3, #17]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	745a      	strb	r2, [r3, #17]
  }
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b08a      	sub	sp, #40	; 0x28
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	785a      	ldrb	r2, [r3, #1]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3302      	adds	r3, #2
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	3303      	adds	r3, #3
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	021b      	lsls	r3, r3, #8
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	4313      	orrs	r3, r2
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	791a      	ldrb	r2, [r3, #4]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	795a      	ldrb	r2, [r3, #5]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	799a      	ldrb	r2, [r3, #6]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	79da      	ldrb	r2, [r3, #7]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	7a1a      	ldrb	r2, [r3, #8]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e64:	88fb      	ldrh	r3, [r7, #6]
 8007e66:	2b09      	cmp	r3, #9
 8007e68:	d95f      	bls.n	8007f2a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e6a:	2309      	movs	r3, #9
 8007e6c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e72:	e051      	b.n	8007f18 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e74:	f107 0316 	add.w	r3, r7, #22
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e7c:	f000 f8e8 	bl	8008050 <USBH_GetNextDesc>
 8007e80:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d146      	bne.n	8007f18 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e8e:	221a      	movs	r2, #26
 8007e90:	fb02 f303 	mul.w	r3, r2, r3
 8007e94:	3308      	adds	r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4413      	add	r3, r2
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ea0:	69f8      	ldr	r0, [r7, #28]
 8007ea2:	f000 f846 	bl	8007f32 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eb0:	e022      	b.n	8007ef8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007eb2:	f107 0316 	add.w	r3, r7, #22
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eba:	f000 f8c9 	bl	8008050 <USBH_GetNextDesc>
 8007ebe:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	d117      	bne.n	8007ef8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ecc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ed0:	3201      	adds	r2, #1
 8007ed2:	00d2      	lsls	r2, r2, #3
 8007ed4:	211a      	movs	r1, #26
 8007ed6:	fb01 f303 	mul.w	r3, r1, r3
 8007eda:	4413      	add	r3, r2
 8007edc:	3308      	adds	r3, #8
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ee8:	69b8      	ldr	r0, [r7, #24]
 8007eea:	f000 f851 	bl	8007f90 <USBH_ParseEPDesc>
            ep_ix++;
 8007eee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	791b      	ldrb	r3, [r3, #4]
 8007efc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d204      	bcs.n	8007f0e <USBH_ParseCfgDesc+0x120>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	885a      	ldrh	r2, [r3, #2]
 8007f08:	8afb      	ldrh	r3, [r7, #22]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d8d1      	bhi.n	8007eb2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f12:	3301      	adds	r3, #1
 8007f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d804      	bhi.n	8007f2a <USBH_ParseCfgDesc+0x13c>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	885a      	ldrh	r2, [r3, #2]
 8007f24:	8afb      	ldrh	r3, [r7, #22]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d8a4      	bhi.n	8007e74 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	3728      	adds	r7, #40	; 0x28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781a      	ldrb	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	785a      	ldrb	r2, [r3, #1]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	789a      	ldrb	r2, [r3, #2]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	78da      	ldrb	r2, [r3, #3]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	791a      	ldrb	r2, [r3, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	795a      	ldrb	r2, [r3, #5]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	799a      	ldrb	r2, [r3, #6]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	79da      	ldrb	r2, [r3, #7]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	7a1a      	ldrb	r2, [r3, #8]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	721a      	strb	r2, [r3, #8]
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781a      	ldrb	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	785a      	ldrb	r2, [r3, #1]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	789a      	ldrb	r2, [r3, #2]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	78da      	ldrb	r2, [r3, #3]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	3305      	adds	r3, #5
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	799a      	ldrb	r2, [r3, #6]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	719a      	strb	r2, [r3, #6]
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b087      	sub	sp, #28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d120      	bne.n	8008044 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	1e9a      	subs	r2, r3, #2
 8008008:	88fb      	ldrh	r3, [r7, #6]
 800800a:	4293      	cmp	r3, r2
 800800c:	bf28      	it	cs
 800800e:	4613      	movcs	r3, r2
 8008010:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3302      	adds	r3, #2
 8008016:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008018:	2300      	movs	r3, #0
 800801a:	82fb      	strh	r3, [r7, #22]
 800801c:	e00b      	b.n	8008036 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800801e:	8afb      	ldrh	r3, [r7, #22]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	781a      	ldrb	r2, [r3, #0]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	701a      	strb	r2, [r3, #0]
      pdest++;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	3301      	adds	r3, #1
 800802e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008030:	8afb      	ldrh	r3, [r7, #22]
 8008032:	3302      	adds	r3, #2
 8008034:	82fb      	strh	r3, [r7, #22]
 8008036:	8afa      	ldrh	r2, [r7, #22]
 8008038:	8abb      	ldrh	r3, [r7, #20]
 800803a:	429a      	cmp	r2, r3
 800803c:	d3ef      	bcc.n	800801e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
  }
}
 8008044:	bf00      	nop
 8008046:	371c      	adds	r7, #28
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	881a      	ldrh	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	4413      	add	r3, r2
 8008066:	b29a      	uxth	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008078:	68fb      	ldr	r3, [r7, #12]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b086      	sub	sp, #24
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	4613      	mov	r3, r2
 8008092:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008094:	2301      	movs	r3, #1
 8008096:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	789b      	ldrb	r3, [r3, #2]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d002      	beq.n	80080a6 <USBH_CtlReq+0x20>
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d01d      	beq.n	80080e0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80080a4:	e043      	b.n	800812e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	88fa      	ldrh	r2, [r7, #6]
 80080b0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2202      	movs	r2, #2
 80080bc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80080be:	2301      	movs	r3, #1
 80080c0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2203      	movs	r2, #3
 80080c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80080d6:	2200      	movs	r2, #0
 80080d8:	4619      	mov	r1, r3
 80080da:	f000 fc63 	bl	80089a4 <osMessagePut>
      break;
 80080de:	e026      	b.n	800812e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 f829 	bl	8008138 <USBH_HandleControl>
 80080e6:	4603      	mov	r3, r0
 80080e8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <USBH_CtlReq+0x70>
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d106      	bne.n	8008104 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	761a      	strb	r2, [r3, #24]
 8008102:	e005      	b.n	8008110 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008104:	7dfb      	ldrb	r3, [r7, #23]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d102      	bne.n	8008110 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2201      	movs	r2, #1
 800810e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2203      	movs	r2, #3
 8008114:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008124:	2200      	movs	r2, #0
 8008126:	4619      	mov	r1, r3
 8008128:	f000 fc3c 	bl	80089a4 <osMessagePut>
      break;
 800812c:	bf00      	nop
  }
  return status;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af02      	add	r7, sp, #8
 800813e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008140:	2301      	movs	r3, #1
 8008142:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008144:	2300      	movs	r3, #0
 8008146:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	7e1b      	ldrb	r3, [r3, #24]
 800814c:	3b01      	subs	r3, #1
 800814e:	2b0a      	cmp	r3, #10
 8008150:	f200 822b 	bhi.w	80085aa <USBH_HandleControl+0x472>
 8008154:	a201      	add	r2, pc, #4	; (adr r2, 800815c <USBH_HandleControl+0x24>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	08008189 	.word	0x08008189
 8008160:	080081a3 	.word	0x080081a3
 8008164:	08008245 	.word	0x08008245
 8008168:	0800826b 	.word	0x0800826b
 800816c:	080082f7 	.word	0x080082f7
 8008170:	08008323 	.word	0x08008323
 8008174:	080083e5 	.word	0x080083e5
 8008178:	08008407 	.word	0x08008407
 800817c:	08008499 	.word	0x08008499
 8008180:	080084c1 	.word	0x080084c1
 8008184:	08008553 	.word	0x08008553
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f103 0110 	add.w	r1, r3, #16
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	795b      	ldrb	r3, [r3, #5]
 8008192:	461a      	mov	r2, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fa19 	bl	80085cc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	761a      	strb	r2, [r3, #24]
      break;
 80081a0:	e20e      	b.n	80085c0 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	795b      	ldrb	r3, [r3, #5]
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f002 ffb9 	bl	800b120 <USBH_LL_GetURBState>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d12c      	bne.n	8008212 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	7c1b      	ldrb	r3, [r3, #16]
 80081bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	8adb      	ldrh	r3, [r3, #22]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80081ca:	7b7b      	ldrb	r3, [r7, #13]
 80081cc:	2b80      	cmp	r3, #128	; 0x80
 80081ce:	d103      	bne.n	80081d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2203      	movs	r2, #3
 80081d4:	761a      	strb	r2, [r3, #24]
 80081d6:	e00d      	b.n	80081f4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2205      	movs	r2, #5
 80081dc:	761a      	strb	r2, [r3, #24]
 80081de:	e009      	b.n	80081f4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80081e0:	7b7b      	ldrb	r3, [r7, #13]
 80081e2:	2b80      	cmp	r3, #128	; 0x80
 80081e4:	d103      	bne.n	80081ee <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2209      	movs	r2, #9
 80081ea:	761a      	strb	r2, [r3, #24]
 80081ec:	e002      	b.n	80081f4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2207      	movs	r2, #7
 80081f2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2203      	movs	r2, #3
 80081f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008208:	2200      	movs	r2, #0
 800820a:	4619      	mov	r1, r3
 800820c:	f000 fbca 	bl	80089a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008210:	e1cd      	b.n	80085ae <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008212:	7bbb      	ldrb	r3, [r7, #14]
 8008214:	2b04      	cmp	r3, #4
 8008216:	d003      	beq.n	8008220 <USBH_HandleControl+0xe8>
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	2b02      	cmp	r3, #2
 800821c:	f040 81c7 	bne.w	80085ae <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	220b      	movs	r2, #11
 8008224:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2203      	movs	r2, #3
 800822a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800823a:	2200      	movs	r2, #0
 800823c:	4619      	mov	r1, r3
 800823e:	f000 fbb1 	bl	80089a4 <osMessagePut>
      break;
 8008242:	e1b4      	b.n	80085ae <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6899      	ldr	r1, [r3, #8]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	899a      	ldrh	r2, [r3, #12]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	791b      	ldrb	r3, [r3, #4]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f9f4 	bl	800864a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2204      	movs	r2, #4
 8008266:	761a      	strb	r2, [r3, #24]
      break;
 8008268:	e1aa      	b.n	80085c0 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	791b      	ldrb	r3, [r3, #4]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f002 ff55 	bl	800b120 <USBH_LL_GetURBState>
 8008276:	4603      	mov	r3, r0
 8008278:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d110      	bne.n	80082a2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2209      	movs	r2, #9
 8008284:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2203      	movs	r2, #3
 800828a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800829a:	2200      	movs	r2, #0
 800829c:	4619      	mov	r1, r3
 800829e:	f000 fb81 	bl	80089a4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b05      	cmp	r3, #5
 80082a6:	d110      	bne.n	80082ca <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80082a8:	2303      	movs	r3, #3
 80082aa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2203      	movs	r2, #3
 80082b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082c0:	2200      	movs	r2, #0
 80082c2:	4619      	mov	r1, r3
 80082c4:	f000 fb6e 	bl	80089a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082c8:	e173      	b.n	80085b2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	f040 8170 	bne.w	80085b2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	220b      	movs	r2, #11
 80082d6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2203      	movs	r2, #3
 80082dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082ec:	2200      	movs	r2, #0
 80082ee:	4619      	mov	r1, r3
 80082f0:	f000 fb58 	bl	80089a4 <osMessagePut>
      break;
 80082f4:	e15d      	b.n	80085b2 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6899      	ldr	r1, [r3, #8]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	899a      	ldrh	r2, [r3, #12]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	7958      	ldrb	r0, [r3, #5]
 8008302:	2301      	movs	r3, #1
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	4603      	mov	r3, r0
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f979 	bl	8008600 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008314:	b29a      	uxth	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2206      	movs	r2, #6
 800831e:	761a      	strb	r2, [r3, #24]
      break;
 8008320:	e14e      	b.n	80085c0 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	795b      	ldrb	r3, [r3, #5]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f002 fef9 	bl	800b120 <USBH_LL_GetURBState>
 800832e:	4603      	mov	r3, r0
 8008330:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d111      	bne.n	800835c <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2207      	movs	r2, #7
 800833c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2203      	movs	r2, #3
 8008342:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008352:	2200      	movs	r2, #0
 8008354:	4619      	mov	r1, r3
 8008356:	f000 fb25 	bl	80089a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800835a:	e12c      	b.n	80085b6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	2b05      	cmp	r3, #5
 8008360:	d113      	bne.n	800838a <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	220c      	movs	r2, #12
 8008366:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008368:	2303      	movs	r3, #3
 800836a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2203      	movs	r2, #3
 8008370:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008380:	2200      	movs	r2, #0
 8008382:	4619      	mov	r1, r3
 8008384:	f000 fb0e 	bl	80089a4 <osMessagePut>
      break;
 8008388:	e115      	b.n	80085b6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d111      	bne.n	80083b4 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2205      	movs	r2, #5
 8008394:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2203      	movs	r2, #3
 800839a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083aa:	2200      	movs	r2, #0
 80083ac:	4619      	mov	r1, r3
 80083ae:	f000 faf9 	bl	80089a4 <osMessagePut>
      break;
 80083b2:	e100      	b.n	80085b6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	f040 80fd 	bne.w	80085b6 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	220b      	movs	r2, #11
 80083c0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083c2:	2302      	movs	r3, #2
 80083c4:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2203      	movs	r2, #3
 80083ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083da:	2200      	movs	r2, #0
 80083dc:	4619      	mov	r1, r3
 80083de:	f000 fae1 	bl	80089a4 <osMessagePut>
      break;
 80083e2:	e0e8      	b.n	80085b6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	791b      	ldrb	r3, [r3, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	2100      	movs	r1, #0
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f92c 	bl	800864a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2208      	movs	r2, #8
 8008402:	761a      	strb	r2, [r3, #24]

      break;
 8008404:	e0dc      	b.n	80085c0 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	791b      	ldrb	r3, [r3, #4]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f002 fe87 	bl	800b120 <USBH_LL_GetURBState>
 8008412:	4603      	mov	r3, r0
 8008414:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d113      	bne.n	8008444 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	220d      	movs	r2, #13
 8008420:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2203      	movs	r2, #3
 800842a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800843a:	2200      	movs	r2, #0
 800843c:	4619      	mov	r1, r3
 800843e:	f000 fab1 	bl	80089a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008442:	e0ba      	b.n	80085ba <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	2b04      	cmp	r3, #4
 8008448:	d111      	bne.n	800846e <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	220b      	movs	r2, #11
 800844e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2203      	movs	r2, #3
 8008454:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008464:	2200      	movs	r2, #0
 8008466:	4619      	mov	r1, r3
 8008468:	f000 fa9c 	bl	80089a4 <osMessagePut>
      break;
 800846c:	e0a5      	b.n	80085ba <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	2b05      	cmp	r3, #5
 8008472:	f040 80a2 	bne.w	80085ba <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8008476:	2303      	movs	r3, #3
 8008478:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2203      	movs	r2, #3
 800847e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800848e:	2200      	movs	r2, #0
 8008490:	4619      	mov	r1, r3
 8008492:	f000 fa87 	bl	80089a4 <osMessagePut>
      break;
 8008496:	e090      	b.n	80085ba <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	795a      	ldrb	r2, [r3, #5]
 800849c:	2301      	movs	r3, #1
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	4613      	mov	r3, r2
 80084a2:	2200      	movs	r2, #0
 80084a4:	2100      	movs	r1, #0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f8aa 	bl	8008600 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	220a      	movs	r2, #10
 80084bc:	761a      	strb	r2, [r3, #24]
      break;
 80084be:	e07f      	b.n	80085c0 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	795b      	ldrb	r3, [r3, #5]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f002 fe2a 	bl	800b120 <USBH_LL_GetURBState>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d113      	bne.n	80084fe <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	220d      	movs	r2, #13
 80084de:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2203      	movs	r2, #3
 80084e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084f4:	2200      	movs	r2, #0
 80084f6:	4619      	mov	r1, r3
 80084f8:	f000 fa54 	bl	80089a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084fc:	e05f      	b.n	80085be <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b02      	cmp	r3, #2
 8008502:	d111      	bne.n	8008528 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2209      	movs	r2, #9
 8008508:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2203      	movs	r2, #3
 800850e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800851e:	2200      	movs	r2, #0
 8008520:	4619      	mov	r1, r3
 8008522:	f000 fa3f 	bl	80089a4 <osMessagePut>
      break;
 8008526:	e04a      	b.n	80085be <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	2b04      	cmp	r3, #4
 800852c:	d147      	bne.n	80085be <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	220b      	movs	r2, #11
 8008532:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2203      	movs	r2, #3
 8008538:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008548:	2200      	movs	r2, #0
 800854a:	4619      	mov	r1, r3
 800854c:	f000 fa2a 	bl	80089a4 <osMessagePut>
      break;
 8008550:	e035      	b.n	80085be <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7e5b      	ldrb	r3, [r3, #25]
 8008556:	3301      	adds	r3, #1
 8008558:	b2da      	uxtb	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	765a      	strb	r2, [r3, #25]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	7e5b      	ldrb	r3, [r3, #25]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d806      	bhi.n	8008574 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008572:	e025      	b.n	80085c0 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800857a:	2106      	movs	r1, #6
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	795b      	ldrb	r3, [r3, #5]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f90d 	bl	80087ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	791b      	ldrb	r3, [r3, #4]
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f907 	bl	80087ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80085a4:	2302      	movs	r3, #2
 80085a6:	73fb      	strb	r3, [r7, #15]
      break;
 80085a8:	e00a      	b.n	80085c0 <USBH_HandleControl+0x488>

    default:
      break;
 80085aa:	bf00      	nop
 80085ac:	e008      	b.n	80085c0 <USBH_HandleControl+0x488>
      break;
 80085ae:	bf00      	nop
 80085b0:	e006      	b.n	80085c0 <USBH_HandleControl+0x488>
      break;
 80085b2:	bf00      	nop
 80085b4:	e004      	b.n	80085c0 <USBH_HandleControl+0x488>
      break;
 80085b6:	bf00      	nop
 80085b8:	e002      	b.n	80085c0 <USBH_HandleControl+0x488>
      break;
 80085ba:	bf00      	nop
 80085bc:	e000      	b.n	80085c0 <USBH_HandleControl+0x488>
      break;
 80085be:	bf00      	nop
  }

  return status;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop

080085cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af04      	add	r7, sp, #16
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085da:	79f9      	ldrb	r1, [r7, #7]
 80085dc:	2300      	movs	r3, #0
 80085de:	9303      	str	r3, [sp, #12]
 80085e0:	2308      	movs	r3, #8
 80085e2:	9302      	str	r3, [sp, #8]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	2300      	movs	r3, #0
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2300      	movs	r3, #0
 80085ee:	2200      	movs	r2, #0
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f002 fd64 	bl	800b0be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af04      	add	r7, sp, #16
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4611      	mov	r1, r2
 800860c:	461a      	mov	r2, r3
 800860e:	460b      	mov	r3, r1
 8008610:	80fb      	strh	r3, [r7, #6]
 8008612:	4613      	mov	r3, r2
 8008614:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008624:	7979      	ldrb	r1, [r7, #5]
 8008626:	7e3b      	ldrb	r3, [r7, #24]
 8008628:	9303      	str	r3, [sp, #12]
 800862a:	88fb      	ldrh	r3, [r7, #6]
 800862c:	9302      	str	r3, [sp, #8]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	2301      	movs	r3, #1
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	2300      	movs	r3, #0
 8008638:	2200      	movs	r2, #0
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f002 fd3f 	bl	800b0be <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b088      	sub	sp, #32
 800864e:	af04      	add	r7, sp, #16
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	4611      	mov	r1, r2
 8008656:	461a      	mov	r2, r3
 8008658:	460b      	mov	r3, r1
 800865a:	80fb      	strh	r3, [r7, #6]
 800865c:	4613      	mov	r3, r2
 800865e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008660:	7979      	ldrb	r1, [r7, #5]
 8008662:	2300      	movs	r3, #0
 8008664:	9303      	str	r3, [sp, #12]
 8008666:	88fb      	ldrh	r3, [r7, #6]
 8008668:	9302      	str	r3, [sp, #8]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	9301      	str	r3, [sp, #4]
 800866e:	2301      	movs	r3, #1
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	2300      	movs	r3, #0
 8008674:	2201      	movs	r2, #1
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f002 fd21 	bl	800b0be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800867c:	2300      	movs	r3, #0

}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b088      	sub	sp, #32
 800868a:	af04      	add	r7, sp, #16
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	4611      	mov	r1, r2
 8008692:	461a      	mov	r2, r3
 8008694:	460b      	mov	r3, r1
 8008696:	80fb      	strh	r3, [r7, #6]
 8008698:	4613      	mov	r3, r2
 800869a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086aa:	7979      	ldrb	r1, [r7, #5]
 80086ac:	7e3b      	ldrb	r3, [r7, #24]
 80086ae:	9303      	str	r3, [sp, #12]
 80086b0:	88fb      	ldrh	r3, [r7, #6]
 80086b2:	9302      	str	r3, [sp, #8]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	9301      	str	r3, [sp, #4]
 80086b8:	2301      	movs	r3, #1
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	2302      	movs	r3, #2
 80086be:	2200      	movs	r2, #0
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f002 fcfc 	bl	800b0be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af04      	add	r7, sp, #16
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4611      	mov	r1, r2
 80086dc:	461a      	mov	r2, r3
 80086de:	460b      	mov	r3, r1
 80086e0:	80fb      	strh	r3, [r7, #6]
 80086e2:	4613      	mov	r3, r2
 80086e4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086e6:	7979      	ldrb	r1, [r7, #5]
 80086e8:	2300      	movs	r3, #0
 80086ea:	9303      	str	r3, [sp, #12]
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	9302      	str	r3, [sp, #8]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	2301      	movs	r3, #1
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	2302      	movs	r3, #2
 80086fa:	2201      	movs	r2, #1
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f002 fcde 	bl	800b0be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af04      	add	r7, sp, #16
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	4608      	mov	r0, r1
 8008716:	4611      	mov	r1, r2
 8008718:	461a      	mov	r2, r3
 800871a:	4603      	mov	r3, r0
 800871c:	70fb      	strb	r3, [r7, #3]
 800871e:	460b      	mov	r3, r1
 8008720:	70bb      	strb	r3, [r7, #2]
 8008722:	4613      	mov	r3, r2
 8008724:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008726:	7878      	ldrb	r0, [r7, #1]
 8008728:	78ba      	ldrb	r2, [r7, #2]
 800872a:	78f9      	ldrb	r1, [r7, #3]
 800872c:	8b3b      	ldrh	r3, [r7, #24]
 800872e:	9302      	str	r3, [sp, #8]
 8008730:	7d3b      	ldrb	r3, [r7, #20]
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	7c3b      	ldrb	r3, [r7, #16]
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4603      	mov	r3, r0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f002 fc71 	bl	800b022 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f002 fc90 	bl	800b080 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	460b      	mov	r3, r1
 8008774:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f836 	bl	80087e8 <USBH_GetFreePipe>
 800877c:	4603      	mov	r3, r0
 800877e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008780:	89fb      	ldrh	r3, [r7, #14]
 8008782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008786:	4293      	cmp	r3, r2
 8008788:	d00a      	beq.n	80087a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800878a:	78fa      	ldrb	r2, [r7, #3]
 800878c:	89fb      	ldrh	r3, [r7, #14]
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	33e0      	adds	r3, #224	; 0xe0
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	440b      	add	r3, r1
 800879e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80087a0:	89fb      	ldrh	r3, [r7, #14]
 80087a2:	b2db      	uxtb	r3, r3
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	2b0a      	cmp	r3, #10
 80087bc:	d80d      	bhi.n	80087da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	33e0      	adds	r3, #224	; 0xe0
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087d0:	6879      	ldr	r1, [r7, #4]
 80087d2:	33e0      	adds	r3, #224	; 0xe0
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80087f4:	2300      	movs	r3, #0
 80087f6:	73fb      	strb	r3, [r7, #15]
 80087f8:	e00f      	b.n	800881a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	33e0      	adds	r3, #224	; 0xe0
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d102      	bne.n	8008814 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	b29b      	uxth	r3, r3
 8008812:	e007      	b.n	8008824 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	3301      	adds	r3, #1
 8008818:	73fb      	strb	r3, [r7, #15]
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	2b0a      	cmp	r3, #10
 800881e:	d9ec      	bls.n	80087fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008820:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800883e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008842:	2b84      	cmp	r3, #132	; 0x84
 8008844:	d005      	beq.n	8008852 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008846:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	4413      	add	r3, r2
 800884e:	3303      	adds	r3, #3
 8008850:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008852:	68fb      	ldr	r3, [r7, #12]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008866:	f3ef 8305 	mrs	r3, IPSR
 800886a:	607b      	str	r3, [r7, #4]
  return(result);
 800886c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800886e:	2b00      	cmp	r3, #0
 8008870:	bf14      	ite	ne
 8008872:	2301      	movne	r3, #1
 8008874:	2300      	moveq	r3, #0
 8008876:	b2db      	uxtb	r3, r3
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008888:	f001 f8e8 	bl	8009a5c <vTaskStartScheduler>
  
  return osOK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	bd80      	pop	{r7, pc}

08008892 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008894:	b089      	sub	sp, #36	; 0x24
 8008896:	af04      	add	r7, sp, #16
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d020      	beq.n	80088e6 <osThreadCreate+0x54>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d01c      	beq.n	80088e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685c      	ldr	r4, [r3, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681d      	ldr	r5, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	691e      	ldr	r6, [r3, #16]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff ffb6 	bl	8008830 <makeFreeRtosPriority>
 80088c4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088ce:	9202      	str	r2, [sp, #8]
 80088d0:	9301      	str	r3, [sp, #4]
 80088d2:	9100      	str	r1, [sp, #0]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	4632      	mov	r2, r6
 80088d8:	4629      	mov	r1, r5
 80088da:	4620      	mov	r0, r4
 80088dc:	f000 fefb 	bl	80096d6 <xTaskCreateStatic>
 80088e0:	4603      	mov	r3, r0
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	e01c      	b.n	8008920 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685c      	ldr	r4, [r3, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088f2:	b29e      	uxth	r6, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7ff ff98 	bl	8008830 <makeFreeRtosPriority>
 8008900:	4602      	mov	r2, r0
 8008902:	f107 030c 	add.w	r3, r7, #12
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	9200      	str	r2, [sp, #0]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	4632      	mov	r2, r6
 800890e:	4629      	mov	r1, r5
 8008910:	4620      	mov	r0, r4
 8008912:	f000 ff3a 	bl	800978a <xTaskCreate>
 8008916:	4603      	mov	r3, r0
 8008918:	2b01      	cmp	r3, #1
 800891a:	d001      	beq.n	8008920 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800891c:	2300      	movs	r3, #0
 800891e:	e000      	b.n	8008922 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008920:	68fb      	ldr	r3, [r7, #12]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800892a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <osDelay+0x16>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	e000      	b.n	8008942 <osDelay+0x18>
 8008940:	2301      	movs	r3, #1
 8008942:	4618      	mov	r0, r3
 8008944:	f001 f856 	bl	80099f4 <vTaskDelay>
  
  return osOK;
 8008948:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008952:	b590      	push	{r4, r7, lr}
 8008954:	b085      	sub	sp, #20
 8008956:	af02      	add	r7, sp, #8
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d012      	beq.n	800898a <osMessageCreate+0x38>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00e      	beq.n	800898a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6859      	ldr	r1, [r3, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68dc      	ldr	r4, [r3, #12]
 800897c:	2300      	movs	r3, #0
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	4623      	mov	r3, r4
 8008982:	f000 f9df 	bl	8008d44 <xQueueGenericCreateStatic>
 8008986:	4603      	mov	r3, r0
 8008988:	e008      	b.n	800899c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	4619      	mov	r1, r3
 8008996:	f000 fa48 	bl	8008e2a <xQueueGenericCreate>
 800899a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd90      	pop	{r4, r7, pc}

080089a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80089b0:	2300      	movs	r3, #0
 80089b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <osMessagePut+0x1e>
    ticks = 1;
 80089be:	2301      	movs	r3, #1
 80089c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80089c2:	f7ff ff4d 	bl	8008860 <inHandlerMode>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d018      	beq.n	80089fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80089cc:	f107 0210 	add.w	r2, r7, #16
 80089d0:	f107 0108 	add.w	r1, r7, #8
 80089d4:	2300      	movs	r3, #0
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 fb80 	bl	80090dc <xQueueGenericSendFromISR>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d001      	beq.n	80089e6 <osMessagePut+0x42>
      return osErrorOS;
 80089e2:	23ff      	movs	r3, #255	; 0xff
 80089e4:	e018      	b.n	8008a18 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d014      	beq.n	8008a16 <osMessagePut+0x72>
 80089ec:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <osMessagePut+0x7c>)
 80089ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	e00b      	b.n	8008a16 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80089fe:	f107 0108 	add.w	r1, r7, #8
 8008a02:	2300      	movs	r3, #0
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 fa6e 	bl	8008ee8 <xQueueGenericSend>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d001      	beq.n	8008a16 <osMessagePut+0x72>
      return osErrorOS;
 8008a12:	23ff      	movs	r3, #255	; 0xff
 8008a14:	e000      	b.n	8008a18 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008a24:	b590      	push	{r4, r7, lr}
 8008a26:	b08b      	sub	sp, #44	; 0x2c
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10a      	bne.n	8008a54 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008a3e:	2380      	movs	r3, #128	; 0x80
 8008a40:	617b      	str	r3, [r7, #20]
    return event;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	461c      	mov	r4, r3
 8008a46:	f107 0314 	add.w	r3, r7, #20
 8008a4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a52:	e054      	b.n	8008afe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a62:	d103      	bne.n	8008a6c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008a64:	f04f 33ff 	mov.w	r3, #4294967295
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6a:	e009      	b.n	8008a80 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d006      	beq.n	8008a80 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <osMessageGet+0x5c>
      ticks = 1;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008a80:	f7ff feee 	bl	8008860 <inHandlerMode>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01c      	beq.n	8008ac4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008a8a:	f107 0220 	add.w	r2, r7, #32
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	3304      	adds	r3, #4
 8008a94:	4619      	mov	r1, r3
 8008a96:	68b8      	ldr	r0, [r7, #8]
 8008a98:	f000 fc90 	bl	80093bc <xQueueReceiveFromISR>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d102      	bne.n	8008aa8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008aa2:	2310      	movs	r3, #16
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	e001      	b.n	8008aac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d01d      	beq.n	8008aee <osMessageGet+0xca>
 8008ab2:	4b15      	ldr	r3, [pc, #84]	; (8008b08 <osMessageGet+0xe4>)
 8008ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	e014      	b.n	8008aee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008ac4:	f107 0314 	add.w	r3, r7, #20
 8008ac8:	3304      	adds	r3, #4
 8008aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008acc:	4619      	mov	r1, r3
 8008ace:	68b8      	ldr	r0, [r7, #8]
 8008ad0:	f000 fb98 	bl	8009204 <xQueueReceive>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d102      	bne.n	8008ae0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008ada:	2310      	movs	r3, #16
 8008adc:	617b      	str	r3, [r7, #20]
 8008ade:	e006      	b.n	8008aee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <osMessageGet+0xc6>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	e000      	b.n	8008aec <osMessageGet+0xc8>
 8008aea:	2340      	movs	r3, #64	; 0x40
 8008aec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	461c      	mov	r4, r3
 8008af2:	f107 0314 	add.w	r3, r7, #20
 8008af6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008afa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	372c      	adds	r7, #44	; 0x2c
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd90      	pop	{r4, r7, pc}
 8008b06:	bf00      	nop
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f103 0208 	add.w	r2, r3, #8
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295
 8008b24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f103 0208 	add.w	r2, r3, #8
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f103 0208 	add.w	r2, r3, #8
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	601a      	str	r2, [r3, #0]
}
 8008ba2:	bf00      	nop
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc4:	d103      	bne.n	8008bce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	e00c      	b.n	8008be8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e002      	b.n	8008bdc <vListInsert+0x2e>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d2f6      	bcs.n	8008bd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	601a      	str	r2, [r3, #0]
}
 8008c14:	bf00      	nop
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6892      	ldr	r2, [r2, #8]
 8008c36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	6852      	ldr	r2, [r2, #4]
 8008c40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d103      	bne.n	8008c54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	1e5a      	subs	r2, r3, #1
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d109      	bne.n	8008c9c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	60bb      	str	r3, [r7, #8]
 8008c9a:	e7fe      	b.n	8008c9a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008c9c:	f001 fcfe 	bl	800a69c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca8:	68f9      	ldr	r1, [r7, #12]
 8008caa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cac:	fb01 f303 	mul.w	r3, r1, r3
 8008cb0:	441a      	add	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cd2:	fb01 f303 	mul.w	r3, r1, r3
 8008cd6:	441a      	add	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	22ff      	movs	r2, #255	; 0xff
 8008ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	22ff      	movs	r2, #255	; 0xff
 8008ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d114      	bne.n	8008d1c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d01a      	beq.n	8008d30 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3310      	adds	r3, #16
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f001 f8ea 	bl	8009ed8 <xTaskRemoveFromEventList>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d012      	beq.n	8008d30 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d0a:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <xQueueGenericReset+0xcc>)
 8008d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	e009      	b.n	8008d30 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3310      	adds	r3, #16
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff fef3 	bl	8008b0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	3324      	adds	r3, #36	; 0x24
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7ff feee 	bl	8008b0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d30:	f001 fce2 	bl	800a6f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d34:	2301      	movs	r3, #1
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08e      	sub	sp, #56	; 0x38
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d109      	bne.n	8008d6c <xQueueGenericCreateStatic+0x28>
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d6a:	e7fe      	b.n	8008d6a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d109      	bne.n	8008d86 <xQueueGenericCreateStatic+0x42>
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
 8008d84:	e7fe      	b.n	8008d84 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <xQueueGenericCreateStatic+0x4e>
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <xQueueGenericCreateStatic+0x52>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e000      	b.n	8008d98 <xQueueGenericCreateStatic+0x54>
 8008d96:	2300      	movs	r3, #0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d109      	bne.n	8008db0 <xQueueGenericCreateStatic+0x6c>
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	623b      	str	r3, [r7, #32]
 8008dae:	e7fe      	b.n	8008dae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <xQueueGenericCreateStatic+0x78>
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d101      	bne.n	8008dc0 <xQueueGenericCreateStatic+0x7c>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e000      	b.n	8008dc2 <xQueueGenericCreateStatic+0x7e>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <xQueueGenericCreateStatic+0x96>
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	61fb      	str	r3, [r7, #28]
 8008dd8:	e7fe      	b.n	8008dd8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dda:	2348      	movs	r3, #72	; 0x48
 8008ddc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	2b48      	cmp	r3, #72	; 0x48
 8008de2:	d009      	beq.n	8008df8 <xQueueGenericCreateStatic+0xb4>
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	e7fe      	b.n	8008df6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008df8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00d      	beq.n	8008e20 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e0c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	4613      	mov	r3, r2
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 f844 	bl	8008ea8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3730      	adds	r7, #48	; 0x30
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b08a      	sub	sp, #40	; 0x28
 8008e2e:	af02      	add	r7, sp, #8
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	60b9      	str	r1, [r7, #8]
 8008e34:	4613      	mov	r3, r2
 8008e36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d109      	bne.n	8008e52 <xQueueGenericCreate+0x28>
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	613b      	str	r3, [r7, #16]
 8008e50:	e7fe      	b.n	8008e50 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d102      	bne.n	8008e5e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61fb      	str	r3, [r7, #28]
 8008e5c:	e004      	b.n	8008e68 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	fb02 f303 	mul.w	r3, r2, r3
 8008e66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	3348      	adds	r3, #72	; 0x48
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f001 fd2f 	bl	800a8d0 <pvPortMalloc>
 8008e72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d011      	beq.n	8008e9e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	3348      	adds	r3, #72	; 0x48
 8008e82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e8c:	79fa      	ldrb	r2, [r7, #7]
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	4613      	mov	r3, r2
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	68b9      	ldr	r1, [r7, #8]
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 f805 	bl	8008ea8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e9e:	69bb      	ldr	r3, [r7, #24]
	}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d103      	bne.n	8008ec4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	601a      	str	r2, [r3, #0]
 8008ec2:	e002      	b.n	8008eca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	69b8      	ldr	r0, [r7, #24]
 8008eda:	f7ff fecb 	bl	8008c74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ede:	bf00      	nop
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08e      	sub	sp, #56	; 0x38
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <xQueueGenericSend+0x30>
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f16:	e7fe      	b.n	8008f16 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d103      	bne.n	8008f26 <xQueueGenericSend+0x3e>
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <xQueueGenericSend+0x42>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e000      	b.n	8008f2c <xQueueGenericSend+0x44>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d109      	bne.n	8008f44 <xQueueGenericSend+0x5c>
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
 8008f42:	e7fe      	b.n	8008f42 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d103      	bne.n	8008f52 <xQueueGenericSend+0x6a>
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <xQueueGenericSend+0x6e>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e000      	b.n	8008f58 <xQueueGenericSend+0x70>
 8008f56:	2300      	movs	r3, #0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d109      	bne.n	8008f70 <xQueueGenericSend+0x88>
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	623b      	str	r3, [r7, #32]
 8008f6e:	e7fe      	b.n	8008f6e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f70:	f001 f968 	bl	800a244 <xTaskGetSchedulerState>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d102      	bne.n	8008f80 <xQueueGenericSend+0x98>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <xQueueGenericSend+0x9c>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <xQueueGenericSend+0x9e>
 8008f84:	2300      	movs	r3, #0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d109      	bne.n	8008f9e <xQueueGenericSend+0xb6>
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	61fb      	str	r3, [r7, #28]
 8008f9c:	e7fe      	b.n	8008f9c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f9e:	f001 fb7d 	bl	800a69c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d302      	bcc.n	8008fb4 <xQueueGenericSend+0xcc>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d129      	bne.n	8009008 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fba:	f000 fa7c 	bl	80094b6 <prvCopyDataToQueue>
 8008fbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d010      	beq.n	8008fea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	3324      	adds	r3, #36	; 0x24
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 ff83 	bl	8009ed8 <xTaskRemoveFromEventList>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d013      	beq.n	8009000 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008fd8:	4b3f      	ldr	r3, [pc, #252]	; (80090d8 <xQueueGenericSend+0x1f0>)
 8008fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	e00a      	b.n	8009000 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d007      	beq.n	8009000 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ff0:	4b39      	ldr	r3, [pc, #228]	; (80090d8 <xQueueGenericSend+0x1f0>)
 8008ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009000:	f001 fb7a 	bl	800a6f8 <vPortExitCritical>
				return pdPASS;
 8009004:	2301      	movs	r3, #1
 8009006:	e063      	b.n	80090d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d103      	bne.n	8009016 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800900e:	f001 fb73 	bl	800a6f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009012:	2300      	movs	r3, #0
 8009014:	e05c      	b.n	80090d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009018:	2b00      	cmp	r3, #0
 800901a:	d106      	bne.n	800902a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800901c:	f107 0314 	add.w	r3, r7, #20
 8009020:	4618      	mov	r0, r3
 8009022:	f000 ffbb 	bl	8009f9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009026:	2301      	movs	r3, #1
 8009028:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800902a:	f001 fb65 	bl	800a6f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800902e:	f000 fd73 	bl	8009b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009032:	f001 fb33 	bl	800a69c <vPortEnterCritical>
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800903c:	b25b      	sxtb	r3, r3
 800903e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009042:	d103      	bne.n	800904c <xQueueGenericSend+0x164>
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009052:	b25b      	sxtb	r3, r3
 8009054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009058:	d103      	bne.n	8009062 <xQueueGenericSend+0x17a>
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009062:	f001 fb49 	bl	800a6f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009066:	1d3a      	adds	r2, r7, #4
 8009068:	f107 0314 	add.w	r3, r7, #20
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f000 ffaa 	bl	8009fc8 <xTaskCheckForTimeOut>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d124      	bne.n	80090c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800907a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800907c:	f000 fb13 	bl	80096a6 <prvIsQueueFull>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d018      	beq.n	80090b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	3310      	adds	r3, #16
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	4611      	mov	r1, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fefe 	bl	8009e90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009096:	f000 fa9e 	bl	80095d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800909a:	f000 fd4b 	bl	8009b34 <xTaskResumeAll>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f47f af7c 	bne.w	8008f9e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80090a6:	4b0c      	ldr	r3, [pc, #48]	; (80090d8 <xQueueGenericSend+0x1f0>)
 80090a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	e772      	b.n	8008f9e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ba:	f000 fa8c 	bl	80095d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090be:	f000 fd39 	bl	8009b34 <xTaskResumeAll>
 80090c2:	e76c      	b.n	8008f9e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090c6:	f000 fa86 	bl	80095d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090ca:	f000 fd33 	bl	8009b34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3738      	adds	r7, #56	; 0x38
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	e000ed04 	.word	0xe000ed04

080090dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08e      	sub	sp, #56	; 0x38
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d109      	bne.n	8009108 <xQueueGenericSendFromISR+0x2c>
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	627b      	str	r3, [r7, #36]	; 0x24
 8009106:	e7fe      	b.n	8009106 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d103      	bne.n	8009116 <xQueueGenericSendFromISR+0x3a>
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <xQueueGenericSendFromISR+0x3e>
 8009116:	2301      	movs	r3, #1
 8009118:	e000      	b.n	800911c <xQueueGenericSendFromISR+0x40>
 800911a:	2300      	movs	r3, #0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d109      	bne.n	8009134 <xQueueGenericSendFromISR+0x58>
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	623b      	str	r3, [r7, #32]
 8009132:	e7fe      	b.n	8009132 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d103      	bne.n	8009142 <xQueueGenericSendFromISR+0x66>
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <xQueueGenericSendFromISR+0x6a>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <xQueueGenericSendFromISR+0x6c>
 8009146:	2300      	movs	r3, #0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <xQueueGenericSendFromISR+0x84>
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	61fb      	str	r3, [r7, #28]
 800915e:	e7fe      	b.n	800915e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009160:	f001 fb78 	bl	800a854 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009164:	f3ef 8211 	mrs	r2, BASEPRI
 8009168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	61ba      	str	r2, [r7, #24]
 800917a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800917c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800917e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009188:	429a      	cmp	r2, r3
 800918a:	d302      	bcc.n	8009192 <xQueueGenericSendFromISR+0xb6>
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d12c      	bne.n	80091ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	68b9      	ldr	r1, [r7, #8]
 80091a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091a2:	f000 f988 	bl	80094b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80091aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ae:	d112      	bne.n	80091d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d016      	beq.n	80091e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	3324      	adds	r3, #36	; 0x24
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 fe8b 	bl	8009ed8 <xTaskRemoveFromEventList>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00e      	beq.n	80091e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00b      	beq.n	80091e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e007      	b.n	80091e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80091da:	3301      	adds	r3, #1
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	b25a      	sxtb	r2, r3
 80091e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80091e6:	2301      	movs	r3, #1
 80091e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80091ea:	e001      	b.n	80091f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	637b      	str	r3, [r7, #52]	; 0x34
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3738      	adds	r7, #56	; 0x38
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08c      	sub	sp, #48	; 0x30
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009210:	2300      	movs	r3, #0
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	2b00      	cmp	r3, #0
 800921c:	d109      	bne.n	8009232 <xQueueReceive+0x2e>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	623b      	str	r3, [r7, #32]
 8009230:	e7fe      	b.n	8009230 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d103      	bne.n	8009240 <xQueueReceive+0x3c>
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <xQueueReceive+0x40>
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <xQueueReceive+0x42>
 8009244:	2300      	movs	r3, #0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <xQueueReceive+0x5a>
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	e7fe      	b.n	800925c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800925e:	f000 fff1 	bl	800a244 <xTaskGetSchedulerState>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d102      	bne.n	800926e <xQueueReceive+0x6a>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <xQueueReceive+0x6e>
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <xQueueReceive+0x70>
 8009272:	2300      	movs	r3, #0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d109      	bne.n	800928c <xQueueReceive+0x88>
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	e7fe      	b.n	800928a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800928c:	f001 fa06 	bl	800a69c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01f      	beq.n	80092dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800929c:	68b9      	ldr	r1, [r7, #8]
 800929e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092a0:	f000 f973 	bl	800958a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	1e5a      	subs	r2, r3, #1
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00f      	beq.n	80092d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	3310      	adds	r3, #16
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 fe0d 	bl	8009ed8 <xTaskRemoveFromEventList>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d007      	beq.n	80092d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092c4:	4b3c      	ldr	r3, [pc, #240]	; (80093b8 <xQueueReceive+0x1b4>)
 80092c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092d4:	f001 fa10 	bl	800a6f8 <vPortExitCritical>
				return pdPASS;
 80092d8:	2301      	movs	r3, #1
 80092da:	e069      	b.n	80093b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d103      	bne.n	80092ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092e2:	f001 fa09 	bl	800a6f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e062      	b.n	80093b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092f0:	f107 0310 	add.w	r3, r7, #16
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 fe51 	bl	8009f9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092fa:	2301      	movs	r3, #1
 80092fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092fe:	f001 f9fb 	bl	800a6f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009302:	f000 fc09 	bl	8009b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009306:	f001 f9c9 	bl	800a69c <vPortEnterCritical>
 800930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009310:	b25b      	sxtb	r3, r3
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d103      	bne.n	8009320 <xQueueReceive+0x11c>
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009326:	b25b      	sxtb	r3, r3
 8009328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932c:	d103      	bne.n	8009336 <xQueueReceive+0x132>
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009336:	f001 f9df 	bl	800a6f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800933a:	1d3a      	adds	r2, r7, #4
 800933c:	f107 0310 	add.w	r3, r7, #16
 8009340:	4611      	mov	r1, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fe40 	bl	8009fc8 <xTaskCheckForTimeOut>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d123      	bne.n	8009396 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800934e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009350:	f000 f993 	bl	800967a <prvIsQueueEmpty>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d017      	beq.n	800938a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935c:	3324      	adds	r3, #36	; 0x24
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	4611      	mov	r1, r2
 8009362:	4618      	mov	r0, r3
 8009364:	f000 fd94 	bl	8009e90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800936a:	f000 f934 	bl	80095d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800936e:	f000 fbe1 	bl	8009b34 <xTaskResumeAll>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d189      	bne.n	800928c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009378:	4b0f      	ldr	r3, [pc, #60]	; (80093b8 <xQueueReceive+0x1b4>)
 800937a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	e780      	b.n	800928c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800938a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800938c:	f000 f923 	bl	80095d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009390:	f000 fbd0 	bl	8009b34 <xTaskResumeAll>
 8009394:	e77a      	b.n	800928c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009398:	f000 f91d 	bl	80095d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800939c:	f000 fbca 	bl	8009b34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a2:	f000 f96a 	bl	800967a <prvIsQueueEmpty>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f43f af6f 	beq.w	800928c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3730      	adds	r7, #48	; 0x30
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	e000ed04 	.word	0xe000ed04

080093bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08e      	sub	sp, #56	; 0x38
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <xQueueReceiveFromISR+0x2a>
 80093d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	623b      	str	r3, [r7, #32]
 80093e4:	e7fe      	b.n	80093e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d103      	bne.n	80093f4 <xQueueReceiveFromISR+0x38>
 80093ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <xQueueReceiveFromISR+0x3c>
 80093f4:	2301      	movs	r3, #1
 80093f6:	e000      	b.n	80093fa <xQueueReceiveFromISR+0x3e>
 80093f8:	2300      	movs	r3, #0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <xQueueReceiveFromISR+0x56>
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	61fb      	str	r3, [r7, #28]
 8009410:	e7fe      	b.n	8009410 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009412:	f001 fa1f 	bl	800a854 <vPortValidateInterruptPriority>
	__asm volatile
 8009416:	f3ef 8211 	mrs	r2, BASEPRI
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	61ba      	str	r2, [r7, #24]
 800942c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800942e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009430:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009436:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d02f      	beq.n	800949e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009448:	68b9      	ldr	r1, [r7, #8]
 800944a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800944c:	f000 f89d 	bl	800958a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	1e5a      	subs	r2, r3, #1
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009460:	d112      	bne.n	8009488 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d016      	beq.n	8009498 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	3310      	adds	r3, #16
 800946e:	4618      	mov	r0, r3
 8009470:	f000 fd32 	bl	8009ed8 <xTaskRemoveFromEventList>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00e      	beq.n	8009498 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	e007      	b.n	8009498 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800948c:	3301      	adds	r3, #1
 800948e:	b2db      	uxtb	r3, r3
 8009490:	b25a      	sxtb	r2, r3
 8009492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009498:	2301      	movs	r3, #1
 800949a:	637b      	str	r3, [r7, #52]	; 0x34
 800949c:	e001      	b.n	80094a2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800949e:	2300      	movs	r3, #0
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34
 80094a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3738      	adds	r7, #56	; 0x38
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b086      	sub	sp, #24
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10d      	bne.n	80094f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d14d      	bne.n	8009578 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 fecd 	bl	800a280 <xTaskPriorityDisinherit>
 80094e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	609a      	str	r2, [r3, #8]
 80094ee:	e043      	b.n	8009578 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d119      	bne.n	800952a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6858      	ldr	r0, [r3, #4]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	461a      	mov	r2, r3
 8009500:	68b9      	ldr	r1, [r7, #8]
 8009502:	f001 fef7 	bl	800b2f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	441a      	add	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	429a      	cmp	r2, r3
 800951e:	d32b      	bcc.n	8009578 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	605a      	str	r2, [r3, #4]
 8009528:	e026      	b.n	8009578 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68d8      	ldr	r0, [r3, #12]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	461a      	mov	r2, r3
 8009534:	68b9      	ldr	r1, [r7, #8]
 8009536:	f001 fedd 	bl	800b2f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	68da      	ldr	r2, [r3, #12]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009542:	425b      	negs	r3, r3
 8009544:	441a      	add	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	429a      	cmp	r2, r3
 8009554:	d207      	bcs.n	8009566 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	689a      	ldr	r2, [r3, #8]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955e:	425b      	negs	r3, r3
 8009560:	441a      	add	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b02      	cmp	r3, #2
 800956a:	d105      	bne.n	8009578 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	3b01      	subs	r3, #1
 8009576:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009580:	697b      	ldr	r3, [r7, #20]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	2b00      	cmp	r3, #0
 800959a:	d018      	beq.n	80095ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a4:	441a      	add	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d303      	bcc.n	80095be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68d9      	ldr	r1, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	461a      	mov	r2, r3
 80095c8:	6838      	ldr	r0, [r7, #0]
 80095ca:	f001 fe93 	bl	800b2f4 <memcpy>
	}
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095de:	f001 f85d 	bl	800a69c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095ea:	e011      	b.n	8009610 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d012      	beq.n	800961a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3324      	adds	r3, #36	; 0x24
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fc6d 	bl	8009ed8 <xTaskRemoveFromEventList>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009604:	f000 fd40 	bl	800a088 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	3b01      	subs	r3, #1
 800960c:	b2db      	uxtb	r3, r3
 800960e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	dce9      	bgt.n	80095ec <prvUnlockQueue+0x16>
 8009618:	e000      	b.n	800961c <prvUnlockQueue+0x46>
					break;
 800961a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	22ff      	movs	r2, #255	; 0xff
 8009620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009624:	f001 f868 	bl	800a6f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009628:	f001 f838 	bl	800a69c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009632:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009634:	e011      	b.n	800965a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d012      	beq.n	8009664 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3310      	adds	r3, #16
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fc48 	bl	8009ed8 <xTaskRemoveFromEventList>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800964e:	f000 fd1b 	bl	800a088 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	3b01      	subs	r3, #1
 8009656:	b2db      	uxtb	r3, r3
 8009658:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800965a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800965e:	2b00      	cmp	r3, #0
 8009660:	dce9      	bgt.n	8009636 <prvUnlockQueue+0x60>
 8009662:	e000      	b.n	8009666 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009664:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	22ff      	movs	r2, #255	; 0xff
 800966a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800966e:	f001 f843 	bl	800a6f8 <vPortExitCritical>
}
 8009672:	bf00      	nop
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009682:	f001 f80b 	bl	800a69c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968a:	2b00      	cmp	r3, #0
 800968c:	d102      	bne.n	8009694 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800968e:	2301      	movs	r3, #1
 8009690:	60fb      	str	r3, [r7, #12]
 8009692:	e001      	b.n	8009698 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009698:	f001 f82e 	bl	800a6f8 <vPortExitCritical>

	return xReturn;
 800969c:	68fb      	ldr	r3, [r7, #12]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096ae:	f000 fff5 	bl	800a69c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d102      	bne.n	80096c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096be:	2301      	movs	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	e001      	b.n	80096c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096c4:	2300      	movs	r3, #0
 80096c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096c8:	f001 f816 	bl	800a6f8 <vPortExitCritical>

	return xReturn;
 80096cc:	68fb      	ldr	r3, [r7, #12]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b08e      	sub	sp, #56	; 0x38
 80096da:	af04      	add	r7, sp, #16
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	607a      	str	r2, [r7, #4]
 80096e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80096e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d109      	bne.n	80096fe <xTaskCreateStatic+0x28>
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	623b      	str	r3, [r7, #32]
 80096fc:	e7fe      	b.n	80096fc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	2b00      	cmp	r3, #0
 8009702:	d109      	bne.n	8009718 <xTaskCreateStatic+0x42>
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	61fb      	str	r3, [r7, #28]
 8009716:	e7fe      	b.n	8009716 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009718:	2354      	movs	r3, #84	; 0x54
 800971a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	2b54      	cmp	r3, #84	; 0x54
 8009720:	d009      	beq.n	8009736 <xTaskCreateStatic+0x60>
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	e7fe      	b.n	8009734 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009736:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973a:	2b00      	cmp	r3, #0
 800973c:	d01e      	beq.n	800977c <xTaskCreateStatic+0xa6>
 800973e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01b      	beq.n	800977c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800974c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	2202      	movs	r2, #2
 8009752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009756:	2300      	movs	r3, #0
 8009758:	9303      	str	r3, [sp, #12]
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	9302      	str	r3, [sp, #8]
 800975e:	f107 0314 	add.w	r3, r7, #20
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	68b9      	ldr	r1, [r7, #8]
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 f850 	bl	8009814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009776:	f000 f8d3 	bl	8009920 <prvAddNewTaskToReadyList>
 800977a:	e001      	b.n	8009780 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800977c:	2300      	movs	r3, #0
 800977e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009780:	697b      	ldr	r3, [r7, #20]
	}
 8009782:	4618      	mov	r0, r3
 8009784:	3728      	adds	r7, #40	; 0x28
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800978a:	b580      	push	{r7, lr}
 800978c:	b08c      	sub	sp, #48	; 0x30
 800978e:	af04      	add	r7, sp, #16
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	603b      	str	r3, [r7, #0]
 8009796:	4613      	mov	r3, r2
 8009798:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800979a:	88fb      	ldrh	r3, [r7, #6]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4618      	mov	r0, r3
 80097a0:	f001 f896 	bl	800a8d0 <pvPortMalloc>
 80097a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00e      	beq.n	80097ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097ac:	2054      	movs	r0, #84	; 0x54
 80097ae:	f001 f88f 	bl	800a8d0 <pvPortMalloc>
 80097b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	631a      	str	r2, [r3, #48]	; 0x30
 80097c0:	e005      	b.n	80097ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097c2:	6978      	ldr	r0, [r7, #20]
 80097c4:	f001 f946 	bl	800aa54 <vPortFree>
 80097c8:	e001      	b.n	80097ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d017      	beq.n	8009804 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097dc:	88fa      	ldrh	r2, [r7, #6]
 80097de:	2300      	movs	r3, #0
 80097e0:	9303      	str	r3, [sp, #12]
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	9302      	str	r3, [sp, #8]
 80097e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	68b9      	ldr	r1, [r7, #8]
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 f80e 	bl	8009814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097f8:	69f8      	ldr	r0, [r7, #28]
 80097fa:	f000 f891 	bl	8009920 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80097fe:	2301      	movs	r3, #1
 8009800:	61bb      	str	r3, [r7, #24]
 8009802:	e002      	b.n	800980a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009804:	f04f 33ff 	mov.w	r3, #4294967295
 8009808:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800980a:	69bb      	ldr	r3, [r7, #24]
	}
 800980c:	4618      	mov	r0, r3
 800980e:	3720      	adds	r7, #32
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800982c:	3b01      	subs	r3, #1
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	f023 0307 	bic.w	r3, r3, #7
 800983a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	2b00      	cmp	r3, #0
 8009844:	d009      	beq.n	800985a <prvInitialiseNewTask+0x46>
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	e7fe      	b.n	8009858 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01f      	beq.n	80098a0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009860:	2300      	movs	r3, #0
 8009862:	61fb      	str	r3, [r7, #28]
 8009864:	e012      	b.n	800988c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	4413      	add	r3, r2
 800986c:	7819      	ldrb	r1, [r3, #0]
 800986e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	4413      	add	r3, r2
 8009874:	3334      	adds	r3, #52	; 0x34
 8009876:	460a      	mov	r2, r1
 8009878:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	4413      	add	r3, r2
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d006      	beq.n	8009894 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	3301      	adds	r3, #1
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	2b0f      	cmp	r3, #15
 8009890:	d9e9      	bls.n	8009866 <prvInitialiseNewTask+0x52>
 8009892:	e000      	b.n	8009896 <prvInitialiseNewTask+0x82>
			{
				break;
 8009894:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800989e:	e003      	b.n	80098a8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	2b06      	cmp	r3, #6
 80098ac:	d901      	bls.n	80098b2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098ae:	2306      	movs	r3, #6
 80098b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	2200      	movs	r2, #0
 80098c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	3304      	adds	r3, #4
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff f93f 	bl	8008b4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	3318      	adds	r3, #24
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff f93a 	bl	8008b4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e0:	f1c3 0207 	rsb	r2, r3, #7
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	2200      	movs	r2, #0
 80098f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	69b8      	ldr	r0, [r7, #24]
 8009902:	f000 fda7 	bl	800a454 <pxPortInitialiseStack>
 8009906:	4602      	mov	r2, r0
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009916:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009918:	bf00      	nop
 800991a:	3720      	adds	r7, #32
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009928:	f000 feb8 	bl	800a69c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800992c:	4b2a      	ldr	r3, [pc, #168]	; (80099d8 <prvAddNewTaskToReadyList+0xb8>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3301      	adds	r3, #1
 8009932:	4a29      	ldr	r2, [pc, #164]	; (80099d8 <prvAddNewTaskToReadyList+0xb8>)
 8009934:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009936:	4b29      	ldr	r3, [pc, #164]	; (80099dc <prvAddNewTaskToReadyList+0xbc>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d109      	bne.n	8009952 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800993e:	4a27      	ldr	r2, [pc, #156]	; (80099dc <prvAddNewTaskToReadyList+0xbc>)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009944:	4b24      	ldr	r3, [pc, #144]	; (80099d8 <prvAddNewTaskToReadyList+0xb8>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d110      	bne.n	800996e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800994c:	f000 fbc0 	bl	800a0d0 <prvInitialiseTaskLists>
 8009950:	e00d      	b.n	800996e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009952:	4b23      	ldr	r3, [pc, #140]	; (80099e0 <prvAddNewTaskToReadyList+0xc0>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d109      	bne.n	800996e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800995a:	4b20      	ldr	r3, [pc, #128]	; (80099dc <prvAddNewTaskToReadyList+0xbc>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009964:	429a      	cmp	r2, r3
 8009966:	d802      	bhi.n	800996e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009968:	4a1c      	ldr	r2, [pc, #112]	; (80099dc <prvAddNewTaskToReadyList+0xbc>)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800996e:	4b1d      	ldr	r3, [pc, #116]	; (80099e4 <prvAddNewTaskToReadyList+0xc4>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3301      	adds	r3, #1
 8009974:	4a1b      	ldr	r2, [pc, #108]	; (80099e4 <prvAddNewTaskToReadyList+0xc4>)
 8009976:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997c:	2201      	movs	r2, #1
 800997e:	409a      	lsls	r2, r3
 8009980:	4b19      	ldr	r3, [pc, #100]	; (80099e8 <prvAddNewTaskToReadyList+0xc8>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4313      	orrs	r3, r2
 8009986:	4a18      	ldr	r2, [pc, #96]	; (80099e8 <prvAddNewTaskToReadyList+0xc8>)
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4a15      	ldr	r2, [pc, #84]	; (80099ec <prvAddNewTaskToReadyList+0xcc>)
 8009998:	441a      	add	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3304      	adds	r3, #4
 800999e:	4619      	mov	r1, r3
 80099a0:	4610      	mov	r0, r2
 80099a2:	f7ff f8e0 	bl	8008b66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099a6:	f000 fea7 	bl	800a6f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099aa:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <prvAddNewTaskToReadyList+0xc0>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00e      	beq.n	80099d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099b2:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <prvAddNewTaskToReadyList+0xbc>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	429a      	cmp	r2, r3
 80099be:	d207      	bcs.n	80099d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099c0:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <prvAddNewTaskToReadyList+0xd0>)
 80099c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	20000420 	.word	0x20000420
 80099dc:	20000320 	.word	0x20000320
 80099e0:	2000042c 	.word	0x2000042c
 80099e4:	2000043c 	.word	0x2000043c
 80099e8:	20000428 	.word	0x20000428
 80099ec:	20000324 	.word	0x20000324
 80099f0:	e000ed04 	.word	0xe000ed04

080099f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80099fc:	2300      	movs	r3, #0
 80099fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d016      	beq.n	8009a34 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a06:	4b13      	ldr	r3, [pc, #76]	; (8009a54 <vTaskDelay+0x60>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d009      	beq.n	8009a22 <vTaskDelay+0x2e>
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	60bb      	str	r3, [r7, #8]
 8009a20:	e7fe      	b.n	8009a20 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009a22:	f000 f879 	bl	8009b18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a26:	2100      	movs	r1, #0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fcad 	bl	800a388 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a2e:	f000 f881 	bl	8009b34 <xTaskResumeAll>
 8009a32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d107      	bne.n	8009a4a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <vTaskDelay+0x64>)
 8009a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a4a:	bf00      	nop
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	20000448 	.word	0x20000448
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08a      	sub	sp, #40	; 0x28
 8009a60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a6a:	463a      	mov	r2, r7
 8009a6c:	1d39      	adds	r1, r7, #4
 8009a6e:	f107 0308 	add.w	r3, r7, #8
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7f6 fd2c 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	9202      	str	r2, [sp, #8]
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	2300      	movs	r3, #0
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	2300      	movs	r3, #0
 8009a88:	460a      	mov	r2, r1
 8009a8a:	491d      	ldr	r1, [pc, #116]	; (8009b00 <vTaskStartScheduler+0xa4>)
 8009a8c:	481d      	ldr	r0, [pc, #116]	; (8009b04 <vTaskStartScheduler+0xa8>)
 8009a8e:	f7ff fe22 	bl	80096d6 <xTaskCreateStatic>
 8009a92:	4602      	mov	r2, r0
 8009a94:	4b1c      	ldr	r3, [pc, #112]	; (8009b08 <vTaskStartScheduler+0xac>)
 8009a96:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a98:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <vTaskStartScheduler+0xac>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	617b      	str	r3, [r7, #20]
 8009aa4:	e001      	b.n	8009aaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d115      	bne.n	8009adc <vTaskStartScheduler+0x80>
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ac2:	4b12      	ldr	r3, [pc, #72]	; (8009b0c <vTaskStartScheduler+0xb0>)
 8009ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009aca:	4b11      	ldr	r3, [pc, #68]	; (8009b10 <vTaskStartScheduler+0xb4>)
 8009acc:	2201      	movs	r2, #1
 8009ace:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ad0:	4b10      	ldr	r3, [pc, #64]	; (8009b14 <vTaskStartScheduler+0xb8>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ad6:	f000 fd43 	bl	800a560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ada:	e00d      	b.n	8009af8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae2:	d109      	bne.n	8009af8 <vTaskStartScheduler+0x9c>
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	e7fe      	b.n	8009af6 <vTaskStartScheduler+0x9a>
}
 8009af8:	bf00      	nop
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	0800b534 	.word	0x0800b534
 8009b04:	0800a0a1 	.word	0x0800a0a1
 8009b08:	20000444 	.word	0x20000444
 8009b0c:	20000440 	.word	0x20000440
 8009b10:	2000042c 	.word	0x2000042c
 8009b14:	20000424 	.word	0x20000424

08009b18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b1c:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <vTaskSuspendAll+0x18>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3301      	adds	r3, #1
 8009b22:	4a03      	ldr	r2, [pc, #12]	; (8009b30 <vTaskSuspendAll+0x18>)
 8009b24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009b26:	bf00      	nop
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	20000448 	.word	0x20000448

08009b34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b42:	4b41      	ldr	r3, [pc, #260]	; (8009c48 <xTaskResumeAll+0x114>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d109      	bne.n	8009b5e <xTaskResumeAll+0x2a>
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	603b      	str	r3, [r7, #0]
 8009b5c:	e7fe      	b.n	8009b5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b5e:	f000 fd9d 	bl	800a69c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b62:	4b39      	ldr	r3, [pc, #228]	; (8009c48 <xTaskResumeAll+0x114>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	4a37      	ldr	r2, [pc, #220]	; (8009c48 <xTaskResumeAll+0x114>)
 8009b6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b6c:	4b36      	ldr	r3, [pc, #216]	; (8009c48 <xTaskResumeAll+0x114>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d161      	bne.n	8009c38 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b74:	4b35      	ldr	r3, [pc, #212]	; (8009c4c <xTaskResumeAll+0x118>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d05d      	beq.n	8009c38 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b7c:	e02e      	b.n	8009bdc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b7e:	4b34      	ldr	r3, [pc, #208]	; (8009c50 <xTaskResumeAll+0x11c>)
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	3318      	adds	r3, #24
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff f848 	bl	8008c20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3304      	adds	r3, #4
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7ff f843 	bl	8008c20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	409a      	lsls	r2, r3
 8009ba2:	4b2c      	ldr	r3, [pc, #176]	; (8009c54 <xTaskResumeAll+0x120>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	4a2a      	ldr	r2, [pc, #168]	; (8009c54 <xTaskResumeAll+0x120>)
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4a27      	ldr	r2, [pc, #156]	; (8009c58 <xTaskResumeAll+0x124>)
 8009bba:	441a      	add	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	f7fe ffcf 	bl	8008b66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bcc:	4b23      	ldr	r3, [pc, #140]	; (8009c5c <xTaskResumeAll+0x128>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d302      	bcc.n	8009bdc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009bd6:	4b22      	ldr	r3, [pc, #136]	; (8009c60 <xTaskResumeAll+0x12c>)
 8009bd8:	2201      	movs	r2, #1
 8009bda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bdc:	4b1c      	ldr	r3, [pc, #112]	; (8009c50 <xTaskResumeAll+0x11c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1cc      	bne.n	8009b7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009bea:	f000 fb0b 	bl	800a204 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009bee:	4b1d      	ldr	r3, [pc, #116]	; (8009c64 <xTaskResumeAll+0x130>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d010      	beq.n	8009c1c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009bfa:	f000 f837 	bl	8009c6c <xTaskIncrementTick>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009c04:	4b16      	ldr	r3, [pc, #88]	; (8009c60 <xTaskResumeAll+0x12c>)
 8009c06:	2201      	movs	r2, #1
 8009c08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1f1      	bne.n	8009bfa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009c16:	4b13      	ldr	r3, [pc, #76]	; (8009c64 <xTaskResumeAll+0x130>)
 8009c18:	2200      	movs	r2, #0
 8009c1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c1c:	4b10      	ldr	r3, [pc, #64]	; (8009c60 <xTaskResumeAll+0x12c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d009      	beq.n	8009c38 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c24:	2301      	movs	r3, #1
 8009c26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c28:	4b0f      	ldr	r3, [pc, #60]	; (8009c68 <xTaskResumeAll+0x134>)
 8009c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2e:	601a      	str	r2, [r3, #0]
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c38:	f000 fd5e 	bl	800a6f8 <vPortExitCritical>

	return xAlreadyYielded;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000448 	.word	0x20000448
 8009c4c:	20000420 	.word	0x20000420
 8009c50:	200003e0 	.word	0x200003e0
 8009c54:	20000428 	.word	0x20000428
 8009c58:	20000324 	.word	0x20000324
 8009c5c:	20000320 	.word	0x20000320
 8009c60:	20000434 	.word	0x20000434
 8009c64:	20000430 	.word	0x20000430
 8009c68:	e000ed04 	.word	0xe000ed04

08009c6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c72:	2300      	movs	r3, #0
 8009c74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c76:	4b4e      	ldr	r3, [pc, #312]	; (8009db0 <xTaskIncrementTick+0x144>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f040 8087 	bne.w	8009d8e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c80:	4b4c      	ldr	r3, [pc, #304]	; (8009db4 <xTaskIncrementTick+0x148>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3301      	adds	r3, #1
 8009c86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c88:	4a4a      	ldr	r2, [pc, #296]	; (8009db4 <xTaskIncrementTick+0x148>)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d11f      	bne.n	8009cd4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c94:	4b48      	ldr	r3, [pc, #288]	; (8009db8 <xTaskIncrementTick+0x14c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <xTaskIncrementTick+0x46>
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	603b      	str	r3, [r7, #0]
 8009cb0:	e7fe      	b.n	8009cb0 <xTaskIncrementTick+0x44>
 8009cb2:	4b41      	ldr	r3, [pc, #260]	; (8009db8 <xTaskIncrementTick+0x14c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	4b40      	ldr	r3, [pc, #256]	; (8009dbc <xTaskIncrementTick+0x150>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a3e      	ldr	r2, [pc, #248]	; (8009db8 <xTaskIncrementTick+0x14c>)
 8009cbe:	6013      	str	r3, [r2, #0]
 8009cc0:	4a3e      	ldr	r2, [pc, #248]	; (8009dbc <xTaskIncrementTick+0x150>)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	4b3e      	ldr	r3, [pc, #248]	; (8009dc0 <xTaskIncrementTick+0x154>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	4a3c      	ldr	r2, [pc, #240]	; (8009dc0 <xTaskIncrementTick+0x154>)
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	f000 fa98 	bl	800a204 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cd4:	4b3b      	ldr	r3, [pc, #236]	; (8009dc4 <xTaskIncrementTick+0x158>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d348      	bcc.n	8009d70 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cde:	4b36      	ldr	r3, [pc, #216]	; (8009db8 <xTaskIncrementTick+0x14c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d104      	bne.n	8009cf2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ce8:	4b36      	ldr	r3, [pc, #216]	; (8009dc4 <xTaskIncrementTick+0x158>)
 8009cea:	f04f 32ff 	mov.w	r2, #4294967295
 8009cee:	601a      	str	r2, [r3, #0]
					break;
 8009cf0:	e03e      	b.n	8009d70 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cf2:	4b31      	ldr	r3, [pc, #196]	; (8009db8 <xTaskIncrementTick+0x14c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d02:	693a      	ldr	r2, [r7, #16]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d203      	bcs.n	8009d12 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d0a:	4a2e      	ldr	r2, [pc, #184]	; (8009dc4 <xTaskIncrementTick+0x158>)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d10:	e02e      	b.n	8009d70 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe ff82 	bl	8008c20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d004      	beq.n	8009d2e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	3318      	adds	r3, #24
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fe ff79 	bl	8008c20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d32:	2201      	movs	r2, #1
 8009d34:	409a      	lsls	r2, r3
 8009d36:	4b24      	ldr	r3, [pc, #144]	; (8009dc8 <xTaskIncrementTick+0x15c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	4a22      	ldr	r2, [pc, #136]	; (8009dc8 <xTaskIncrementTick+0x15c>)
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4a1f      	ldr	r2, [pc, #124]	; (8009dcc <xTaskIncrementTick+0x160>)
 8009d4e:	441a      	add	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	3304      	adds	r3, #4
 8009d54:	4619      	mov	r1, r3
 8009d56:	4610      	mov	r0, r2
 8009d58:	f7fe ff05 	bl	8008b66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d60:	4b1b      	ldr	r3, [pc, #108]	; (8009dd0 <xTaskIncrementTick+0x164>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d3b9      	bcc.n	8009cde <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d6e:	e7b6      	b.n	8009cde <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d70:	4b17      	ldr	r3, [pc, #92]	; (8009dd0 <xTaskIncrementTick+0x164>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d76:	4915      	ldr	r1, [pc, #84]	; (8009dcc <xTaskIncrementTick+0x160>)
 8009d78:	4613      	mov	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	440b      	add	r3, r1
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d907      	bls.n	8009d98 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	617b      	str	r3, [r7, #20]
 8009d8c:	e004      	b.n	8009d98 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009d8e:	4b11      	ldr	r3, [pc, #68]	; (8009dd4 <xTaskIncrementTick+0x168>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a0f      	ldr	r2, [pc, #60]	; (8009dd4 <xTaskIncrementTick+0x168>)
 8009d96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009d98:	4b0f      	ldr	r3, [pc, #60]	; (8009dd8 <xTaskIncrementTick+0x16c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009da0:	2301      	movs	r3, #1
 8009da2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009da4:	697b      	ldr	r3, [r7, #20]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20000448 	.word	0x20000448
 8009db4:	20000424 	.word	0x20000424
 8009db8:	200003d8 	.word	0x200003d8
 8009dbc:	200003dc 	.word	0x200003dc
 8009dc0:	20000438 	.word	0x20000438
 8009dc4:	20000440 	.word	0x20000440
 8009dc8:	20000428 	.word	0x20000428
 8009dcc:	20000324 	.word	0x20000324
 8009dd0:	20000320 	.word	0x20000320
 8009dd4:	20000430 	.word	0x20000430
 8009dd8:	20000434 	.word	0x20000434

08009ddc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b087      	sub	sp, #28
 8009de0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009de2:	4b26      	ldr	r3, [pc, #152]	; (8009e7c <vTaskSwitchContext+0xa0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009dea:	4b25      	ldr	r3, [pc, #148]	; (8009e80 <vTaskSwitchContext+0xa4>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009df0:	e03e      	b.n	8009e70 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009df2:	4b23      	ldr	r3, [pc, #140]	; (8009e80 <vTaskSwitchContext+0xa4>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df8:	4b22      	ldr	r3, [pc, #136]	; (8009e84 <vTaskSwitchContext+0xa8>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	fab3 f383 	clz	r3, r3
 8009e04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	f1c3 031f 	rsb	r3, r3, #31
 8009e0c:	617b      	str	r3, [r7, #20]
 8009e0e:	491e      	ldr	r1, [pc, #120]	; (8009e88 <vTaskSwitchContext+0xac>)
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	440b      	add	r3, r1
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d109      	bne.n	8009e36 <vTaskSwitchContext+0x5a>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	607b      	str	r3, [r7, #4]
 8009e34:	e7fe      	b.n	8009e34 <vTaskSwitchContext+0x58>
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4a11      	ldr	r2, [pc, #68]	; (8009e88 <vTaskSwitchContext+0xac>)
 8009e42:	4413      	add	r3, r2
 8009e44:	613b      	str	r3, [r7, #16]
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	605a      	str	r2, [r3, #4]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	3308      	adds	r3, #8
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d104      	bne.n	8009e66 <vTaskSwitchContext+0x8a>
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	4a07      	ldr	r2, [pc, #28]	; (8009e8c <vTaskSwitchContext+0xb0>)
 8009e6e:	6013      	str	r3, [r2, #0]
}
 8009e70:	bf00      	nop
 8009e72:	371c      	adds	r7, #28
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	20000448 	.word	0x20000448
 8009e80:	20000434 	.word	0x20000434
 8009e84:	20000428 	.word	0x20000428
 8009e88:	20000324 	.word	0x20000324
 8009e8c:	20000320 	.word	0x20000320

08009e90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d109      	bne.n	8009eb4 <vTaskPlaceOnEventList+0x24>
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	e7fe      	b.n	8009eb2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eb4:	4b07      	ldr	r3, [pc, #28]	; (8009ed4 <vTaskPlaceOnEventList+0x44>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3318      	adds	r3, #24
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7fe fe76 	bl	8008bae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	6838      	ldr	r0, [r7, #0]
 8009ec6:	f000 fa5f 	bl	800a388 <prvAddCurrentTaskToDelayedList>
}
 8009eca:	bf00      	nop
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20000320 	.word	0x20000320

08009ed8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d109      	bne.n	8009f02 <xTaskRemoveFromEventList+0x2a>
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e7fe      	b.n	8009f00 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	3318      	adds	r3, #24
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe fe8a 	bl	8008c20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f0c:	4b1d      	ldr	r3, [pc, #116]	; (8009f84 <xTaskRemoveFromEventList+0xac>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d11c      	bne.n	8009f4e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	3304      	adds	r3, #4
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe fe81 	bl	8008c20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f22:	2201      	movs	r2, #1
 8009f24:	409a      	lsls	r2, r3
 8009f26:	4b18      	ldr	r3, [pc, #96]	; (8009f88 <xTaskRemoveFromEventList+0xb0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	4a16      	ldr	r2, [pc, #88]	; (8009f88 <xTaskRemoveFromEventList+0xb0>)
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f34:	4613      	mov	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4a13      	ldr	r2, [pc, #76]	; (8009f8c <xTaskRemoveFromEventList+0xb4>)
 8009f3e:	441a      	add	r2, r3
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	f7fe fe0d 	bl	8008b66 <vListInsertEnd>
 8009f4c:	e005      	b.n	8009f5a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	3318      	adds	r3, #24
 8009f52:	4619      	mov	r1, r3
 8009f54:	480e      	ldr	r0, [pc, #56]	; (8009f90 <xTaskRemoveFromEventList+0xb8>)
 8009f56:	f7fe fe06 	bl	8008b66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5e:	4b0d      	ldr	r3, [pc, #52]	; (8009f94 <xTaskRemoveFromEventList+0xbc>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d905      	bls.n	8009f74 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	; (8009f98 <xTaskRemoveFromEventList+0xc0>)
 8009f6e:	2201      	movs	r2, #1
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	e001      	b.n	8009f78 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009f74:	2300      	movs	r3, #0
 8009f76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f78:	697b      	ldr	r3, [r7, #20]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	20000448 	.word	0x20000448
 8009f88:	20000428 	.word	0x20000428
 8009f8c:	20000324 	.word	0x20000324
 8009f90:	200003e0 	.word	0x200003e0
 8009f94:	20000320 	.word	0x20000320
 8009f98:	20000434 	.word	0x20000434

08009f9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fa4:	4b06      	ldr	r3, [pc, #24]	; (8009fc0 <vTaskInternalSetTimeOutState+0x24>)
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fac:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <vTaskInternalSetTimeOutState+0x28>)
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	605a      	str	r2, [r3, #4]
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	20000438 	.word	0x20000438
 8009fc4:	20000424 	.word	0x20000424

08009fc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d109      	bne.n	8009fec <xTaskCheckForTimeOut+0x24>
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	613b      	str	r3, [r7, #16]
 8009fea:	e7fe      	b.n	8009fea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d109      	bne.n	800a006 <xTaskCheckForTimeOut+0x3e>
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	60fb      	str	r3, [r7, #12]
 800a004:	e7fe      	b.n	800a004 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a006:	f000 fb49 	bl	800a69c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a00a:	4b1d      	ldr	r3, [pc, #116]	; (800a080 <xTaskCheckForTimeOut+0xb8>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	69ba      	ldr	r2, [r7, #24]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a022:	d102      	bne.n	800a02a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a024:	2300      	movs	r3, #0
 800a026:	61fb      	str	r3, [r7, #28]
 800a028:	e023      	b.n	800a072 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	4b15      	ldr	r3, [pc, #84]	; (800a084 <xTaskCheckForTimeOut+0xbc>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d007      	beq.n	800a046 <xTaskCheckForTimeOut+0x7e>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d302      	bcc.n	800a046 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a040:	2301      	movs	r3, #1
 800a042:	61fb      	str	r3, [r7, #28]
 800a044:	e015      	b.n	800a072 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d20b      	bcs.n	800a068 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	1ad2      	subs	r2, r2, r3
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff ff9d 	bl	8009f9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a062:	2300      	movs	r3, #0
 800a064:	61fb      	str	r3, [r7, #28]
 800a066:	e004      	b.n	800a072 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a06e:	2301      	movs	r3, #1
 800a070:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a072:	f000 fb41 	bl	800a6f8 <vPortExitCritical>

	return xReturn;
 800a076:	69fb      	ldr	r3, [r7, #28]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	20000424 	.word	0x20000424
 800a084:	20000438 	.word	0x20000438

0800a088 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a088:	b480      	push	{r7}
 800a08a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a08c:	4b03      	ldr	r3, [pc, #12]	; (800a09c <vTaskMissedYield+0x14>)
 800a08e:	2201      	movs	r2, #1
 800a090:	601a      	str	r2, [r3, #0]
}
 800a092:	bf00      	nop
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	20000434 	.word	0x20000434

0800a0a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0a8:	f000 f852 	bl	800a150 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0ac:	4b06      	ldr	r3, [pc, #24]	; (800a0c8 <prvIdleTask+0x28>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d9f9      	bls.n	800a0a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0b4:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <prvIdleTask+0x2c>)
 800a0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0c4:	e7f0      	b.n	800a0a8 <prvIdleTask+0x8>
 800a0c6:	bf00      	nop
 800a0c8:	20000324 	.word	0x20000324
 800a0cc:	e000ed04 	.word	0xe000ed04

0800a0d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	607b      	str	r3, [r7, #4]
 800a0da:	e00c      	b.n	800a0f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4a12      	ldr	r2, [pc, #72]	; (800a130 <prvInitialiseTaskLists+0x60>)
 800a0e8:	4413      	add	r3, r2
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fd0e 	bl	8008b0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	607b      	str	r3, [r7, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b06      	cmp	r3, #6
 800a0fa:	d9ef      	bls.n	800a0dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0fc:	480d      	ldr	r0, [pc, #52]	; (800a134 <prvInitialiseTaskLists+0x64>)
 800a0fe:	f7fe fd05 	bl	8008b0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a102:	480d      	ldr	r0, [pc, #52]	; (800a138 <prvInitialiseTaskLists+0x68>)
 800a104:	f7fe fd02 	bl	8008b0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a108:	480c      	ldr	r0, [pc, #48]	; (800a13c <prvInitialiseTaskLists+0x6c>)
 800a10a:	f7fe fcff 	bl	8008b0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a10e:	480c      	ldr	r0, [pc, #48]	; (800a140 <prvInitialiseTaskLists+0x70>)
 800a110:	f7fe fcfc 	bl	8008b0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a114:	480b      	ldr	r0, [pc, #44]	; (800a144 <prvInitialiseTaskLists+0x74>)
 800a116:	f7fe fcf9 	bl	8008b0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a11a:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <prvInitialiseTaskLists+0x78>)
 800a11c:	4a05      	ldr	r2, [pc, #20]	; (800a134 <prvInitialiseTaskLists+0x64>)
 800a11e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a120:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <prvInitialiseTaskLists+0x7c>)
 800a122:	4a05      	ldr	r2, [pc, #20]	; (800a138 <prvInitialiseTaskLists+0x68>)
 800a124:	601a      	str	r2, [r3, #0]
}
 800a126:	bf00      	nop
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000324 	.word	0x20000324
 800a134:	200003b0 	.word	0x200003b0
 800a138:	200003c4 	.word	0x200003c4
 800a13c:	200003e0 	.word	0x200003e0
 800a140:	200003f4 	.word	0x200003f4
 800a144:	2000040c 	.word	0x2000040c
 800a148:	200003d8 	.word	0x200003d8
 800a14c:	200003dc 	.word	0x200003dc

0800a150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a156:	e019      	b.n	800a18c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a158:	f000 faa0 	bl	800a69c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a15c:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <prvCheckTasksWaitingTermination+0x4c>)
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3304      	adds	r3, #4
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe fd59 	bl	8008c20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a16e:	4b0c      	ldr	r3, [pc, #48]	; (800a1a0 <prvCheckTasksWaitingTermination+0x50>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3b01      	subs	r3, #1
 800a174:	4a0a      	ldr	r2, [pc, #40]	; (800a1a0 <prvCheckTasksWaitingTermination+0x50>)
 800a176:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a178:	4b0a      	ldr	r3, [pc, #40]	; (800a1a4 <prvCheckTasksWaitingTermination+0x54>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	4a09      	ldr	r2, [pc, #36]	; (800a1a4 <prvCheckTasksWaitingTermination+0x54>)
 800a180:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a182:	f000 fab9 	bl	800a6f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f80e 	bl	800a1a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a18c:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <prvCheckTasksWaitingTermination+0x54>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e1      	bne.n	800a158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	200003f4 	.word	0x200003f4
 800a1a0:	20000420 	.word	0x20000420
 800a1a4:	20000408 	.word	0x20000408

0800a1a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d108      	bne.n	800a1cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 fc48 	bl	800aa54 <vPortFree>
				vPortFree( pxTCB );
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fc45 	bl	800aa54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1ca:	e017      	b.n	800a1fc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d103      	bne.n	800a1de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fc3c 	bl	800aa54 <vPortFree>
	}
 800a1dc:	e00e      	b.n	800a1fc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d009      	beq.n	800a1fc <prvDeleteTCB+0x54>
 800a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	e7fe      	b.n	800a1fa <prvDeleteTCB+0x52>
	}
 800a1fc:	bf00      	nop
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a20a:	4b0c      	ldr	r3, [pc, #48]	; (800a23c <prvResetNextTaskUnblockTime+0x38>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d104      	bne.n	800a21e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a214:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <prvResetNextTaskUnblockTime+0x3c>)
 800a216:	f04f 32ff 	mov.w	r2, #4294967295
 800a21a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a21c:	e008      	b.n	800a230 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <prvResetNextTaskUnblockTime+0x38>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	4a04      	ldr	r2, [pc, #16]	; (800a240 <prvResetNextTaskUnblockTime+0x3c>)
 800a22e:	6013      	str	r3, [r2, #0]
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	200003d8 	.word	0x200003d8
 800a240:	20000440 	.word	0x20000440

0800a244 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a24a:	4b0b      	ldr	r3, [pc, #44]	; (800a278 <xTaskGetSchedulerState+0x34>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d102      	bne.n	800a258 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a252:	2301      	movs	r3, #1
 800a254:	607b      	str	r3, [r7, #4]
 800a256:	e008      	b.n	800a26a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a258:	4b08      	ldr	r3, [pc, #32]	; (800a27c <xTaskGetSchedulerState+0x38>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a260:	2302      	movs	r3, #2
 800a262:	607b      	str	r3, [r7, #4]
 800a264:	e001      	b.n	800a26a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a266:	2300      	movs	r3, #0
 800a268:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a26a:	687b      	ldr	r3, [r7, #4]
	}
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	2000042c 	.word	0x2000042c
 800a27c:	20000448 	.word	0x20000448

0800a280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d06c      	beq.n	800a370 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a296:	4b39      	ldr	r3, [pc, #228]	; (800a37c <xTaskPriorityDisinherit+0xfc>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d009      	beq.n	800a2b4 <xTaskPriorityDisinherit+0x34>
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	e7fe      	b.n	800a2b2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d109      	bne.n	800a2d0 <xTaskPriorityDisinherit+0x50>
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	60bb      	str	r3, [r7, #8]
 800a2ce:	e7fe      	b.n	800a2ce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d4:	1e5a      	subs	r2, r3, #1
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d044      	beq.n	800a370 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d140      	bne.n	800a370 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe fc94 	bl	8008c20 <uxListRemove>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d115      	bne.n	800a32a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a302:	491f      	ldr	r1, [pc, #124]	; (800a380 <xTaskPriorityDisinherit+0x100>)
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	440b      	add	r3, r1
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10a      	bne.n	800a32a <xTaskPriorityDisinherit+0xaa>
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	2201      	movs	r2, #1
 800a31a:	fa02 f303 	lsl.w	r3, r2, r3
 800a31e:	43da      	mvns	r2, r3
 800a320:	4b18      	ldr	r3, [pc, #96]	; (800a384 <xTaskPriorityDisinherit+0x104>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4013      	ands	r3, r2
 800a326:	4a17      	ldr	r2, [pc, #92]	; (800a384 <xTaskPriorityDisinherit+0x104>)
 800a328:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	f1c3 0207 	rsb	r2, r3, #7
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a342:	2201      	movs	r2, #1
 800a344:	409a      	lsls	r2, r3
 800a346:	4b0f      	ldr	r3, [pc, #60]	; (800a384 <xTaskPriorityDisinherit+0x104>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	4a0d      	ldr	r2, [pc, #52]	; (800a384 <xTaskPriorityDisinherit+0x104>)
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a354:	4613      	mov	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4a08      	ldr	r2, [pc, #32]	; (800a380 <xTaskPriorityDisinherit+0x100>)
 800a35e:	441a      	add	r2, r3
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	3304      	adds	r3, #4
 800a364:	4619      	mov	r1, r3
 800a366:	4610      	mov	r0, r2
 800a368:	f7fe fbfd 	bl	8008b66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a36c:	2301      	movs	r3, #1
 800a36e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a370:	697b      	ldr	r3, [r7, #20]
	}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20000320 	.word	0x20000320
 800a380:	20000324 	.word	0x20000324
 800a384:	20000428 	.word	0x20000428

0800a388 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a392:	4b29      	ldr	r3, [pc, #164]	; (800a438 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a398:	4b28      	ldr	r3, [pc, #160]	; (800a43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3304      	adds	r3, #4
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fe fc3e 	bl	8008c20 <uxListRemove>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10b      	bne.n	800a3c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a3aa:	4b24      	ldr	r3, [pc, #144]	; (800a43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b6:	43da      	mvns	r2, r3
 800a3b8:	4b21      	ldr	r3, [pc, #132]	; (800a440 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	4a20      	ldr	r2, [pc, #128]	; (800a440 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c8:	d10a      	bne.n	800a3e0 <prvAddCurrentTaskToDelayedList+0x58>
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d007      	beq.n	800a3e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3d0:	4b1a      	ldr	r3, [pc, #104]	; (800a43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	481a      	ldr	r0, [pc, #104]	; (800a444 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3da:	f7fe fbc4 	bl	8008b66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3de:	e026      	b.n	800a42e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3e8:	4b14      	ldr	r3, [pc, #80]	; (800a43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d209      	bcs.n	800a40c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3f8:	4b13      	ldr	r3, [pc, #76]	; (800a448 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3304      	adds	r3, #4
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f7fe fbd2 	bl	8008bae <vListInsert>
}
 800a40a:	e010      	b.n	800a42e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a40c:	4b0f      	ldr	r3, [pc, #60]	; (800a44c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3304      	adds	r3, #4
 800a416:	4619      	mov	r1, r3
 800a418:	4610      	mov	r0, r2
 800a41a:	f7fe fbc8 	bl	8008bae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a41e:	4b0c      	ldr	r3, [pc, #48]	; (800a450 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	429a      	cmp	r2, r3
 800a426:	d202      	bcs.n	800a42e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a428:	4a09      	ldr	r2, [pc, #36]	; (800a450 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	6013      	str	r3, [r2, #0]
}
 800a42e:	bf00      	nop
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20000424 	.word	0x20000424
 800a43c:	20000320 	.word	0x20000320
 800a440:	20000428 	.word	0x20000428
 800a444:	2000040c 	.word	0x2000040c
 800a448:	200003dc 	.word	0x200003dc
 800a44c:	200003d8 	.word	0x200003d8
 800a450:	20000440 	.word	0x20000440

0800a454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3b04      	subs	r3, #4
 800a464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3b04      	subs	r3, #4
 800a472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f023 0201 	bic.w	r2, r3, #1
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3b04      	subs	r3, #4
 800a482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a484:	4a0c      	ldr	r2, [pc, #48]	; (800a4b8 <pxPortInitialiseStack+0x64>)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3b14      	subs	r3, #20
 800a48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	3b04      	subs	r3, #4
 800a49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f06f 0202 	mvn.w	r2, #2
 800a4a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3b20      	subs	r3, #32
 800a4a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	0800a4bd 	.word	0x0800a4bd

0800a4bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4c6:	4b11      	ldr	r3, [pc, #68]	; (800a50c <prvTaskExitError+0x50>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ce:	d009      	beq.n	800a4e4 <prvTaskExitError+0x28>
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	e7fe      	b.n	800a4e2 <prvTaskExitError+0x26>
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4f6:	bf00      	nop
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0fc      	beq.n	800a4f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4fe:	bf00      	nop
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	2000002c 	.word	0x2000002c

0800a510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a510:	4b07      	ldr	r3, [pc, #28]	; (800a530 <pxCurrentTCBConst2>)
 800a512:	6819      	ldr	r1, [r3, #0]
 800a514:	6808      	ldr	r0, [r1, #0]
 800a516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51a:	f380 8809 	msr	PSP, r0
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f04f 0000 	mov.w	r0, #0
 800a526:	f380 8811 	msr	BASEPRI, r0
 800a52a:	4770      	bx	lr
 800a52c:	f3af 8000 	nop.w

0800a530 <pxCurrentTCBConst2>:
 800a530:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop

0800a538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a538:	4808      	ldr	r0, [pc, #32]	; (800a55c <prvPortStartFirstTask+0x24>)
 800a53a:	6800      	ldr	r0, [r0, #0]
 800a53c:	6800      	ldr	r0, [r0, #0]
 800a53e:	f380 8808 	msr	MSP, r0
 800a542:	f04f 0000 	mov.w	r0, #0
 800a546:	f380 8814 	msr	CONTROL, r0
 800a54a:	b662      	cpsie	i
 800a54c:	b661      	cpsie	f
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	df00      	svc	0
 800a558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a55a:	bf00      	nop
 800a55c:	e000ed08 	.word	0xe000ed08

0800a560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a566:	4b44      	ldr	r3, [pc, #272]	; (800a678 <xPortStartScheduler+0x118>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a44      	ldr	r2, [pc, #272]	; (800a67c <xPortStartScheduler+0x11c>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d109      	bne.n	800a584 <xPortStartScheduler+0x24>
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	613b      	str	r3, [r7, #16]
 800a582:	e7fe      	b.n	800a582 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a584:	4b3c      	ldr	r3, [pc, #240]	; (800a678 <xPortStartScheduler+0x118>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a3d      	ldr	r2, [pc, #244]	; (800a680 <xPortStartScheduler+0x120>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d109      	bne.n	800a5a2 <xPortStartScheduler+0x42>
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	e7fe      	b.n	800a5a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5a2:	4b38      	ldr	r3, [pc, #224]	; (800a684 <xPortStartScheduler+0x124>)
 800a5a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	22ff      	movs	r2, #255	; 0xff
 800a5b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	4b30      	ldr	r3, [pc, #192]	; (800a688 <xPortStartScheduler+0x128>)
 800a5c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5ca:	4b30      	ldr	r3, [pc, #192]	; (800a68c <xPortStartScheduler+0x12c>)
 800a5cc:	2207      	movs	r2, #7
 800a5ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5d0:	e009      	b.n	800a5e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a5d2:	4b2e      	ldr	r3, [pc, #184]	; (800a68c <xPortStartScheduler+0x12c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	4a2c      	ldr	r2, [pc, #176]	; (800a68c <xPortStartScheduler+0x12c>)
 800a5da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5dc:	78fb      	ldrb	r3, [r7, #3]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	005b      	lsls	r3, r3, #1
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5e6:	78fb      	ldrb	r3, [r7, #3]
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ee:	2b80      	cmp	r3, #128	; 0x80
 800a5f0:	d0ef      	beq.n	800a5d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5f2:	4b26      	ldr	r3, [pc, #152]	; (800a68c <xPortStartScheduler+0x12c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f1c3 0307 	rsb	r3, r3, #7
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d009      	beq.n	800a612 <xPortStartScheduler+0xb2>
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	60bb      	str	r3, [r7, #8]
 800a610:	e7fe      	b.n	800a610 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a612:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <xPortStartScheduler+0x12c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	021b      	lsls	r3, r3, #8
 800a618:	4a1c      	ldr	r2, [pc, #112]	; (800a68c <xPortStartScheduler+0x12c>)
 800a61a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a61c:	4b1b      	ldr	r3, [pc, #108]	; (800a68c <xPortStartScheduler+0x12c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a624:	4a19      	ldr	r2, [pc, #100]	; (800a68c <xPortStartScheduler+0x12c>)
 800a626:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a630:	4b17      	ldr	r3, [pc, #92]	; (800a690 <xPortStartScheduler+0x130>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a16      	ldr	r2, [pc, #88]	; (800a690 <xPortStartScheduler+0x130>)
 800a636:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a63a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a63c:	4b14      	ldr	r3, [pc, #80]	; (800a690 <xPortStartScheduler+0x130>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a13      	ldr	r2, [pc, #76]	; (800a690 <xPortStartScheduler+0x130>)
 800a642:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a646:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a648:	f000 f8d6 	bl	800a7f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a64c:	4b11      	ldr	r3, [pc, #68]	; (800a694 <xPortStartScheduler+0x134>)
 800a64e:	2200      	movs	r2, #0
 800a650:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a652:	f000 f8f5 	bl	800a840 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a656:	4b10      	ldr	r3, [pc, #64]	; (800a698 <xPortStartScheduler+0x138>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a0f      	ldr	r2, [pc, #60]	; (800a698 <xPortStartScheduler+0x138>)
 800a65c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a660:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a662:	f7ff ff69 	bl	800a538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a666:	f7ff fbb9 	bl	8009ddc <vTaskSwitchContext>
	prvTaskExitError();
 800a66a:	f7ff ff27 	bl	800a4bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	e000ed00 	.word	0xe000ed00
 800a67c:	410fc271 	.word	0x410fc271
 800a680:	410fc270 	.word	0x410fc270
 800a684:	e000e400 	.word	0xe000e400
 800a688:	2000044c 	.word	0x2000044c
 800a68c:	20000450 	.word	0x20000450
 800a690:	e000ed20 	.word	0xe000ed20
 800a694:	2000002c 	.word	0x2000002c
 800a698:	e000ef34 	.word	0xe000ef34

0800a69c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6b4:	4b0e      	ldr	r3, [pc, #56]	; (800a6f0 <vPortEnterCritical+0x54>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	4a0d      	ldr	r2, [pc, #52]	; (800a6f0 <vPortEnterCritical+0x54>)
 800a6bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6be:	4b0c      	ldr	r3, [pc, #48]	; (800a6f0 <vPortEnterCritical+0x54>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d10e      	bne.n	800a6e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6c6:	4b0b      	ldr	r3, [pc, #44]	; (800a6f4 <vPortEnterCritical+0x58>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d009      	beq.n	800a6e4 <vPortEnterCritical+0x48>
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	603b      	str	r3, [r7, #0]
 800a6e2:	e7fe      	b.n	800a6e2 <vPortEnterCritical+0x46>
	}
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	2000002c 	.word	0x2000002c
 800a6f4:	e000ed04 	.word	0xe000ed04

0800a6f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6fe:	4b11      	ldr	r3, [pc, #68]	; (800a744 <vPortExitCritical+0x4c>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d109      	bne.n	800a71a <vPortExitCritical+0x22>
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	607b      	str	r3, [r7, #4]
 800a718:	e7fe      	b.n	800a718 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a71a:	4b0a      	ldr	r3, [pc, #40]	; (800a744 <vPortExitCritical+0x4c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3b01      	subs	r3, #1
 800a720:	4a08      	ldr	r2, [pc, #32]	; (800a744 <vPortExitCritical+0x4c>)
 800a722:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a724:	4b07      	ldr	r3, [pc, #28]	; (800a744 <vPortExitCritical+0x4c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d104      	bne.n	800a736 <vPortExitCritical+0x3e>
 800a72c:	2300      	movs	r3, #0
 800a72e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	2000002c 	.word	0x2000002c
	...

0800a750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a750:	f3ef 8009 	mrs	r0, PSP
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	4b15      	ldr	r3, [pc, #84]	; (800a7b0 <pxCurrentTCBConst>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	f01e 0f10 	tst.w	lr, #16
 800a760:	bf08      	it	eq
 800a762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76a:	6010      	str	r0, [r2, #0]
 800a76c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a770:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a774:	f380 8811 	msr	BASEPRI, r0
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f7ff fb2c 	bl	8009ddc <vTaskSwitchContext>
 800a784:	f04f 0000 	mov.w	r0, #0
 800a788:	f380 8811 	msr	BASEPRI, r0
 800a78c:	bc09      	pop	{r0, r3}
 800a78e:	6819      	ldr	r1, [r3, #0]
 800a790:	6808      	ldr	r0, [r1, #0]
 800a792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a796:	f01e 0f10 	tst.w	lr, #16
 800a79a:	bf08      	it	eq
 800a79c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7a0:	f380 8809 	msr	PSP, r0
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	f3af 8000 	nop.w

0800a7b0 <pxCurrentTCBConst>:
 800a7b0:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7b4:	bf00      	nop
 800a7b6:	bf00      	nop

0800a7b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7d0:	f7ff fa4c 	bl	8009c6c <xTaskIncrementTick>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7da:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <SysTick_Handler+0x3c>)
 800a7dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	e000ed04 	.word	0xe000ed04

0800a7f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7fc:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <vPortSetupTimerInterrupt+0x34>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a802:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <vPortSetupTimerInterrupt+0x38>)
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a808:	4b0a      	ldr	r3, [pc, #40]	; (800a834 <vPortSetupTimerInterrupt+0x3c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a0a      	ldr	r2, [pc, #40]	; (800a838 <vPortSetupTimerInterrupt+0x40>)
 800a80e:	fba2 2303 	umull	r2, r3, r2, r3
 800a812:	099b      	lsrs	r3, r3, #6
 800a814:	4a09      	ldr	r2, [pc, #36]	; (800a83c <vPortSetupTimerInterrupt+0x44>)
 800a816:	3b01      	subs	r3, #1
 800a818:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a81a:	4b04      	ldr	r3, [pc, #16]	; (800a82c <vPortSetupTimerInterrupt+0x34>)
 800a81c:	2207      	movs	r2, #7
 800a81e:	601a      	str	r2, [r3, #0]
}
 800a820:	bf00      	nop
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	e000e010 	.word	0xe000e010
 800a830:	e000e018 	.word	0xe000e018
 800a834:	20000000 	.word	0x20000000
 800a838:	10624dd3 	.word	0x10624dd3
 800a83c:	e000e014 	.word	0xe000e014

0800a840 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a840:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a850 <vPortEnableVFP+0x10>
 800a844:	6801      	ldr	r1, [r0, #0]
 800a846:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a84a:	6001      	str	r1, [r0, #0]
 800a84c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a84e:	bf00      	nop
 800a850:	e000ed88 	.word	0xe000ed88

0800a854 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a85a:	f3ef 8305 	mrs	r3, IPSR
 800a85e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b0f      	cmp	r3, #15
 800a864:	d913      	bls.n	800a88e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a866:	4a16      	ldr	r2, [pc, #88]	; (800a8c0 <vPortValidateInterruptPriority+0x6c>)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	4413      	add	r3, r2
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a870:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <vPortValidateInterruptPriority+0x70>)
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	7afa      	ldrb	r2, [r7, #11]
 800a876:	429a      	cmp	r2, r3
 800a878:	d209      	bcs.n	800a88e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	607b      	str	r3, [r7, #4]
 800a88c:	e7fe      	b.n	800a88c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a88e:	4b0e      	ldr	r3, [pc, #56]	; (800a8c8 <vPortValidateInterruptPriority+0x74>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a896:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <vPortValidateInterruptPriority+0x78>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d909      	bls.n	800a8b2 <vPortValidateInterruptPriority+0x5e>
 800a89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	e7fe      	b.n	800a8b0 <vPortValidateInterruptPriority+0x5c>
	}
 800a8b2:	bf00      	nop
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	e000e3f0 	.word	0xe000e3f0
 800a8c4:	2000044c 	.word	0x2000044c
 800a8c8:	e000ed0c 	.word	0xe000ed0c
 800a8cc:	20000450 	.word	0x20000450

0800a8d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08a      	sub	sp, #40	; 0x28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8dc:	f7ff f91c 	bl	8009b18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8e0:	4b57      	ldr	r3, [pc, #348]	; (800aa40 <pvPortMalloc+0x170>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8e8:	f000 f90c 	bl	800ab04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8ec:	4b55      	ldr	r3, [pc, #340]	; (800aa44 <pvPortMalloc+0x174>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f040 808c 	bne.w	800aa12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d01c      	beq.n	800a93a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a900:	2208      	movs	r2, #8
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4413      	add	r3, r2
 800a906:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f003 0307 	and.w	r3, r3, #7
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d013      	beq.n	800a93a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f023 0307 	bic.w	r3, r3, #7
 800a918:	3308      	adds	r3, #8
 800a91a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f003 0307 	and.w	r3, r3, #7
 800a922:	2b00      	cmp	r3, #0
 800a924:	d009      	beq.n	800a93a <pvPortMalloc+0x6a>
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	617b      	str	r3, [r7, #20]
 800a938:	e7fe      	b.n	800a938 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d068      	beq.n	800aa12 <pvPortMalloc+0x142>
 800a940:	4b41      	ldr	r3, [pc, #260]	; (800aa48 <pvPortMalloc+0x178>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	429a      	cmp	r2, r3
 800a948:	d863      	bhi.n	800aa12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a94a:	4b40      	ldr	r3, [pc, #256]	; (800aa4c <pvPortMalloc+0x17c>)
 800a94c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a94e:	4b3f      	ldr	r3, [pc, #252]	; (800aa4c <pvPortMalloc+0x17c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a954:	e004      	b.n	800a960 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	429a      	cmp	r2, r3
 800a968:	d903      	bls.n	800a972 <pvPortMalloc+0xa2>
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1f1      	bne.n	800a956 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a972:	4b33      	ldr	r3, [pc, #204]	; (800aa40 <pvPortMalloc+0x170>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a978:	429a      	cmp	r2, r3
 800a97a:	d04a      	beq.n	800aa12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2208      	movs	r2, #8
 800a982:	4413      	add	r3, r2
 800a984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	1ad2      	subs	r2, r2, r3
 800a996:	2308      	movs	r3, #8
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d91e      	bls.n	800a9dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	f003 0307 	and.w	r3, r3, #7
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d009      	beq.n	800a9c4 <pvPortMalloc+0xf4>
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	613b      	str	r3, [r7, #16]
 800a9c2:	e7fe      	b.n	800a9c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	1ad2      	subs	r2, r2, r3
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9d6:	69b8      	ldr	r0, [r7, #24]
 800a9d8:	f000 f8f6 	bl	800abc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9dc:	4b1a      	ldr	r3, [pc, #104]	; (800aa48 <pvPortMalloc+0x178>)
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	4a18      	ldr	r2, [pc, #96]	; (800aa48 <pvPortMalloc+0x178>)
 800a9e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9ea:	4b17      	ldr	r3, [pc, #92]	; (800aa48 <pvPortMalloc+0x178>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	4b18      	ldr	r3, [pc, #96]	; (800aa50 <pvPortMalloc+0x180>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d203      	bcs.n	800a9fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9f6:	4b14      	ldr	r3, [pc, #80]	; (800aa48 <pvPortMalloc+0x178>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a15      	ldr	r2, [pc, #84]	; (800aa50 <pvPortMalloc+0x180>)
 800a9fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	4b10      	ldr	r3, [pc, #64]	; (800aa44 <pvPortMalloc+0x174>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	431a      	orrs	r2, r3
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	2200      	movs	r2, #0
 800aa10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa12:	f7ff f88f 	bl	8009b34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d009      	beq.n	800aa34 <pvPortMalloc+0x164>
 800aa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	e7fe      	b.n	800aa32 <pvPortMalloc+0x162>
	return pvReturn;
 800aa34:	69fb      	ldr	r3, [r7, #28]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3728      	adds	r7, #40	; 0x28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	2000405c 	.word	0x2000405c
 800aa44:	20004068 	.word	0x20004068
 800aa48:	20004060 	.word	0x20004060
 800aa4c:	20004054 	.word	0x20004054
 800aa50:	20004064 	.word	0x20004064

0800aa54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d046      	beq.n	800aaf4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa66:	2308      	movs	r3, #8
 800aa68:	425b      	negs	r3, r3
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	685a      	ldr	r2, [r3, #4]
 800aa78:	4b20      	ldr	r3, [pc, #128]	; (800aafc <vPortFree+0xa8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d109      	bne.n	800aa96 <vPortFree+0x42>
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	60fb      	str	r3, [r7, #12]
 800aa94:	e7fe      	b.n	800aa94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d009      	beq.n	800aab2 <vPortFree+0x5e>
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	60bb      	str	r3, [r7, #8]
 800aab0:	e7fe      	b.n	800aab0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	4b11      	ldr	r3, [pc, #68]	; (800aafc <vPortFree+0xa8>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4013      	ands	r3, r2
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d019      	beq.n	800aaf4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d115      	bne.n	800aaf4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <vPortFree+0xa8>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	43db      	mvns	r3, r3
 800aad2:	401a      	ands	r2, r3
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aad8:	f7ff f81e 	bl	8009b18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <vPortFree+0xac>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4413      	add	r3, r2
 800aae6:	4a06      	ldr	r2, [pc, #24]	; (800ab00 <vPortFree+0xac>)
 800aae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aaea:	6938      	ldr	r0, [r7, #16]
 800aaec:	f000 f86c 	bl	800abc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aaf0:	f7ff f820 	bl	8009b34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aaf4:	bf00      	nop
 800aaf6:	3718      	adds	r7, #24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	20004068 	.word	0x20004068
 800ab00:	20004060 	.word	0x20004060

0800ab04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ab0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab10:	4b27      	ldr	r3, [pc, #156]	; (800abb0 <prvHeapInit+0xac>)
 800ab12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f003 0307 	and.w	r3, r3, #7
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00c      	beq.n	800ab38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3307      	adds	r3, #7
 800ab22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f023 0307 	bic.w	r3, r3, #7
 800ab2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	4a1f      	ldr	r2, [pc, #124]	; (800abb0 <prvHeapInit+0xac>)
 800ab34:	4413      	add	r3, r2
 800ab36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab3c:	4a1d      	ldr	r2, [pc, #116]	; (800abb4 <prvHeapInit+0xb0>)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab42:	4b1c      	ldr	r3, [pc, #112]	; (800abb4 <prvHeapInit+0xb0>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab50:	2208      	movs	r2, #8
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	1a9b      	subs	r3, r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f023 0307 	bic.w	r3, r3, #7
 800ab5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4a15      	ldr	r2, [pc, #84]	; (800abb8 <prvHeapInit+0xb4>)
 800ab64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab66:	4b14      	ldr	r3, [pc, #80]	; (800abb8 <prvHeapInit+0xb4>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab6e:	4b12      	ldr	r3, [pc, #72]	; (800abb8 <prvHeapInit+0xb4>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	1ad2      	subs	r2, r2, r3
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab84:	4b0c      	ldr	r3, [pc, #48]	; (800abb8 <prvHeapInit+0xb4>)
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	4a0a      	ldr	r2, [pc, #40]	; (800abbc <prvHeapInit+0xb8>)
 800ab92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	4a09      	ldr	r2, [pc, #36]	; (800abc0 <prvHeapInit+0xbc>)
 800ab9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab9c:	4b09      	ldr	r3, [pc, #36]	; (800abc4 <prvHeapInit+0xc0>)
 800ab9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aba2:	601a      	str	r2, [r3, #0]
}
 800aba4:	bf00      	nop
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	20000454 	.word	0x20000454
 800abb4:	20004054 	.word	0x20004054
 800abb8:	2000405c 	.word	0x2000405c
 800abbc:	20004064 	.word	0x20004064
 800abc0:	20004060 	.word	0x20004060
 800abc4:	20004068 	.word	0x20004068

0800abc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abd0:	4b28      	ldr	r3, [pc, #160]	; (800ac74 <prvInsertBlockIntoFreeList+0xac>)
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	e002      	b.n	800abdc <prvInsertBlockIntoFreeList+0x14>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d8f7      	bhi.n	800abd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	4413      	add	r3, r2
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d108      	bne.n	800ac0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	441a      	add	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	441a      	add	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d118      	bne.n	800ac50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	4b15      	ldr	r3, [pc, #84]	; (800ac78 <prvInsertBlockIntoFreeList+0xb0>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d00d      	beq.n	800ac46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	441a      	add	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	601a      	str	r2, [r3, #0]
 800ac44:	e008      	b.n	800ac58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac46:	4b0c      	ldr	r3, [pc, #48]	; (800ac78 <prvInsertBlockIntoFreeList+0xb0>)
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	e003      	b.n	800ac58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d002      	beq.n	800ac66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac66:	bf00      	nop
 800ac68:	3714      	adds	r7, #20
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	20004054 	.word	0x20004054
 800ac78:	2000405c 	.word	0x2000405c

0800ac7c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ac80:	2201      	movs	r2, #1
 800ac82:	490e      	ldr	r1, [pc, #56]	; (800acbc <MX_USB_HOST_Init+0x40>)
 800ac84:	480e      	ldr	r0, [pc, #56]	; (800acc0 <MX_USB_HOST_Init+0x44>)
 800ac86:	f7fc f845 	bl	8006d14 <USBH_Init>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ac90:	f7f5 ff36 	bl	8000b00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ac94:	490b      	ldr	r1, [pc, #44]	; (800acc4 <MX_USB_HOST_Init+0x48>)
 800ac96:	480a      	ldr	r0, [pc, #40]	; (800acc0 <MX_USB_HOST_Init+0x44>)
 800ac98:	f7fc f8f2 	bl	8006e80 <USBH_RegisterClass>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aca2:	f7f5 ff2d 	bl	8000b00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aca6:	4806      	ldr	r0, [pc, #24]	; (800acc0 <MX_USB_HOST_Init+0x44>)
 800aca8:	f7fc f976 	bl	8006f98 <USBH_Start>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800acb2:	f7f5 ff25 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800acb6:	bf00      	nop
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	0800acc9 	.word	0x0800acc9
 800acc0:	200041f8 	.word	0x200041f8
 800acc4:	2000000c 	.word	0x2000000c

0800acc8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800acd4:	78fb      	ldrb	r3, [r7, #3]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d819      	bhi.n	800ad10 <USBH_UserProcess+0x48>
 800acdc:	a201      	add	r2, pc, #4	; (adr r2, 800ace4 <USBH_UserProcess+0x1c>)
 800acde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace2:	bf00      	nop
 800ace4:	0800ad11 	.word	0x0800ad11
 800ace8:	0800ad01 	.word	0x0800ad01
 800acec:	0800ad11 	.word	0x0800ad11
 800acf0:	0800ad09 	.word	0x0800ad09
 800acf4:	0800acf9 	.word	0x0800acf9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800acf8:	4b09      	ldr	r3, [pc, #36]	; (800ad20 <USBH_UserProcess+0x58>)
 800acfa:	2203      	movs	r2, #3
 800acfc:	701a      	strb	r2, [r3, #0]
  break;
 800acfe:	e008      	b.n	800ad12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ad00:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <USBH_UserProcess+0x58>)
 800ad02:	2202      	movs	r2, #2
 800ad04:	701a      	strb	r2, [r3, #0]
  break;
 800ad06:	e004      	b.n	800ad12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <USBH_UserProcess+0x58>)
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	701a      	strb	r2, [r3, #0]
  break;
 800ad0e:	e000      	b.n	800ad12 <USBH_UserProcess+0x4a>

  default:
  break;
 800ad10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	2000406c 	.word	0x2000406c

0800ad24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08a      	sub	sp, #40	; 0x28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad2c:	f107 0314 	add.w	r3, r7, #20
 800ad30:	2200      	movs	r2, #0
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	605a      	str	r2, [r3, #4]
 800ad36:	609a      	str	r2, [r3, #8]
 800ad38:	60da      	str	r2, [r3, #12]
 800ad3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad44:	d147      	bne.n	800add6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad46:	2300      	movs	r3, #0
 800ad48:	613b      	str	r3, [r7, #16]
 800ad4a:	4b25      	ldr	r3, [pc, #148]	; (800ade0 <HAL_HCD_MspInit+0xbc>)
 800ad4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4e:	4a24      	ldr	r2, [pc, #144]	; (800ade0 <HAL_HCD_MspInit+0xbc>)
 800ad50:	f043 0301 	orr.w	r3, r3, #1
 800ad54:	6313      	str	r3, [r2, #48]	; 0x30
 800ad56:	4b22      	ldr	r3, [pc, #136]	; (800ade0 <HAL_HCD_MspInit+0xbc>)
 800ad58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	613b      	str	r3, [r7, #16]
 800ad60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ad62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ad70:	f107 0314 	add.w	r3, r7, #20
 800ad74:	4619      	mov	r1, r3
 800ad76:	481b      	ldr	r0, [pc, #108]	; (800ade4 <HAL_HCD_MspInit+0xc0>)
 800ad78:	f7f6 fa84 	bl	8001284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ad7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ad80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad82:	2302      	movs	r3, #2
 800ad84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad8e:	230a      	movs	r3, #10
 800ad90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad92:	f107 0314 	add.w	r3, r7, #20
 800ad96:	4619      	mov	r1, r3
 800ad98:	4812      	ldr	r0, [pc, #72]	; (800ade4 <HAL_HCD_MspInit+0xc0>)
 800ad9a:	f7f6 fa73 	bl	8001284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad9e:	4b10      	ldr	r3, [pc, #64]	; (800ade0 <HAL_HCD_MspInit+0xbc>)
 800ada0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada2:	4a0f      	ldr	r2, [pc, #60]	; (800ade0 <HAL_HCD_MspInit+0xbc>)
 800ada4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada8:	6353      	str	r3, [r2, #52]	; 0x34
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
 800adae:	4b0c      	ldr	r3, [pc, #48]	; (800ade0 <HAL_HCD_MspInit+0xbc>)
 800adb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb2:	4a0b      	ldr	r2, [pc, #44]	; (800ade0 <HAL_HCD_MspInit+0xbc>)
 800adb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800adb8:	6453      	str	r3, [r2, #68]	; 0x44
 800adba:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <HAL_HCD_MspInit+0xbc>)
 800adbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800adc6:	2200      	movs	r2, #0
 800adc8:	2105      	movs	r1, #5
 800adca:	2043      	movs	r0, #67	; 0x43
 800adcc:	f7f6 fa30 	bl	8001230 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800add0:	2043      	movs	r0, #67	; 0x43
 800add2:	f7f6 fa49 	bl	8001268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800add6:	bf00      	nop
 800add8:	3728      	adds	r7, #40	; 0x28
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	40023800 	.word	0x40023800
 800ade4:	40020000 	.word	0x40020000

0800ade8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fc fd7b 	bl	80078f2 <USBH_LL_IncTimer>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fc fdbf 	bl	8007996 <USBH_LL_Connect>
}
 800ae18:	bf00      	nop
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fc fdd4 	bl	80079dc <USBH_LL_Disconnect>
}
 800ae34:	bf00      	nop
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70fb      	strb	r3, [r7, #3]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fc fe09 	bl	8007a6a <USBH_LL_NotifyURBChange>
#endif
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fc fd69 	bl	8007946 <USBH_LL_PortEnabled>
}
 800ae74:	bf00      	nop
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fc fd75 	bl	800797a <USBH_LL_PortDisabled>
}
 800ae90:	bf00      	nop
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d12a      	bne.n	800af00 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aeaa:	4a18      	ldr	r2, [pc, #96]	; (800af0c <USBH_LL_Init+0x74>)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a15      	ldr	r2, [pc, #84]	; (800af0c <USBH_LL_Init+0x74>)
 800aeb6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aeba:	4b14      	ldr	r3, [pc, #80]	; (800af0c <USBH_LL_Init+0x74>)
 800aebc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aec0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aec2:	4b12      	ldr	r3, [pc, #72]	; (800af0c <USBH_LL_Init+0x74>)
 800aec4:	2208      	movs	r2, #8
 800aec6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aec8:	4b10      	ldr	r3, [pc, #64]	; (800af0c <USBH_LL_Init+0x74>)
 800aeca:	2201      	movs	r2, #1
 800aecc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aece:	4b0f      	ldr	r3, [pc, #60]	; (800af0c <USBH_LL_Init+0x74>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aed4:	4b0d      	ldr	r3, [pc, #52]	; (800af0c <USBH_LL_Init+0x74>)
 800aed6:	2202      	movs	r2, #2
 800aed8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aeda:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <USBH_LL_Init+0x74>)
 800aedc:	2200      	movs	r2, #0
 800aede:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aee0:	480a      	ldr	r0, [pc, #40]	; (800af0c <USBH_LL_Init+0x74>)
 800aee2:	f7f6 fbb5 	bl	8001650 <HAL_HCD_Init>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d001      	beq.n	800aef0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aeec:	f7f5 fe08 	bl	8000b00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aef0:	4806      	ldr	r0, [pc, #24]	; (800af0c <USBH_LL_Init+0x74>)
 800aef2:	f7f6 ffb9 	bl	8001e68 <HAL_HCD_GetCurrentFrame>
 800aef6:	4603      	mov	r3, r0
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7fc fcea 	bl	80078d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200045dc 	.word	0x200045dc

0800af10 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af26:	4618      	mov	r0, r3
 800af28:	f7f6 ff26 	bl	8001d78 <HAL_HCD_Start>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	4618      	mov	r0, r3
 800af34:	f000 f95c 	bl	800b1f0 <USBH_Get_USB_Status>
 800af38:	4603      	mov	r3, r0
 800af3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7f6 ff2e 	bl	8001dbe <HAL_HCD_Stop>
 800af62:	4603      	mov	r3, r0
 800af64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af66:	7bfb      	ldrb	r3, [r7, #15]
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 f941 	bl	800b1f0 <USBH_Get_USB_Status>
 800af6e:	4603      	mov	r3, r0
 800af70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af72:	7bbb      	ldrb	r3, [r7, #14]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800af84:	2301      	movs	r3, #1
 800af86:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af8e:	4618      	mov	r0, r3
 800af90:	f7f6 ff78 	bl	8001e84 <HAL_HCD_GetCurrentSpeed>
 800af94:	4603      	mov	r3, r0
 800af96:	2b01      	cmp	r3, #1
 800af98:	d007      	beq.n	800afaa <USBH_LL_GetSpeed+0x2e>
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d302      	bcc.n	800afa4 <USBH_LL_GetSpeed+0x28>
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d006      	beq.n	800afb0 <USBH_LL_GetSpeed+0x34>
 800afa2:	e008      	b.n	800afb6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]
    break;
 800afa8:	e008      	b.n	800afbc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800afaa:	2301      	movs	r3, #1
 800afac:	73fb      	strb	r3, [r7, #15]
    break;
 800afae:	e005      	b.n	800afbc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800afb0:	2302      	movs	r3, #2
 800afb2:	73fb      	strb	r3, [r7, #15]
    break;
 800afb4:	e002      	b.n	800afbc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800afb6:	2301      	movs	r3, #1
 800afb8:	73fb      	strb	r3, [r7, #15]
    break;
 800afba:	bf00      	nop
  }
  return  speed;
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800afdc:	4618      	mov	r0, r3
 800afde:	f7f6 ff0b 	bl	8001df8 <HAL_HCD_ResetPort>
 800afe2:	4603      	mov	r3, r0
 800afe4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 f901 	bl	800b1f0 <USBH_Get_USB_Status>
 800afee:	4603      	mov	r3, r0
 800aff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aff2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b00e:	78fa      	ldrb	r2, [r7, #3]
 800b010:	4611      	mov	r1, r2
 800b012:	4618      	mov	r0, r3
 800b014:	f7f6 ff13 	bl	8001e3e <HAL_HCD_HC_GetXferCount>
 800b018:	4603      	mov	r3, r0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b022:	b590      	push	{r4, r7, lr}
 800b024:	b089      	sub	sp, #36	; 0x24
 800b026:	af04      	add	r7, sp, #16
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	4608      	mov	r0, r1
 800b02c:	4611      	mov	r1, r2
 800b02e:	461a      	mov	r2, r3
 800b030:	4603      	mov	r3, r0
 800b032:	70fb      	strb	r3, [r7, #3]
 800b034:	460b      	mov	r3, r1
 800b036:	70bb      	strb	r3, [r7, #2]
 800b038:	4613      	mov	r3, r2
 800b03a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b04a:	787c      	ldrb	r4, [r7, #1]
 800b04c:	78ba      	ldrb	r2, [r7, #2]
 800b04e:	78f9      	ldrb	r1, [r7, #3]
 800b050:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b052:	9302      	str	r3, [sp, #8]
 800b054:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	4623      	mov	r3, r4
 800b062:	f7f6 fb57 	bl	8001714 <HAL_HCD_HC_Init>
 800b066:	4603      	mov	r3, r0
 800b068:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 f8bf 	bl	800b1f0 <USBH_Get_USB_Status>
 800b072:	4603      	mov	r3, r0
 800b074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b076:	7bbb      	ldrb	r3, [r7, #14]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd90      	pop	{r4, r7, pc}

0800b080 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b09a:	78fa      	ldrb	r2, [r7, #3]
 800b09c:	4611      	mov	r1, r2
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7f6 fbd0 	bl	8001844 <HAL_HCD_HC_Halt>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 f8a0 	bl	800b1f0 <USBH_Get_USB_Status>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b0be:	b590      	push	{r4, r7, lr}
 800b0c0:	b089      	sub	sp, #36	; 0x24
 800b0c2:	af04      	add	r7, sp, #16
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	70fb      	strb	r3, [r7, #3]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	70bb      	strb	r3, [r7, #2]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b0e6:	787c      	ldrb	r4, [r7, #1]
 800b0e8:	78ba      	ldrb	r2, [r7, #2]
 800b0ea:	78f9      	ldrb	r1, [r7, #3]
 800b0ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b0f0:	9303      	str	r3, [sp, #12]
 800b0f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b0f4:	9302      	str	r3, [sp, #8]
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	4623      	mov	r3, r4
 800b102:	f7f6 fbc3 	bl	800188c <HAL_HCD_HC_SubmitRequest>
 800b106:	4603      	mov	r3, r0
 800b108:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 f86f 	bl	800b1f0 <USBH_Get_USB_Status>
 800b112:	4603      	mov	r3, r0
 800b114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b116:	7bbb      	ldrb	r3, [r7, #14]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd90      	pop	{r4, r7, pc}

0800b120 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b132:	78fa      	ldrb	r2, [r7, #3]
 800b134:	4611      	mov	r1, r2
 800b136:	4618      	mov	r0, r3
 800b138:	f7f6 fe6c 	bl	8001e14 <HAL_HCD_HC_GetURBState>
 800b13c:	4603      	mov	r3, r0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b082      	sub	sp, #8
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	460b      	mov	r3, r1
 800b150:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d103      	bne.n	800b164 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b15c:	78fb      	ldrb	r3, [r7, #3]
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 f872 	bl	800b248 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b164:	20c8      	movs	r0, #200	; 0xc8
 800b166:	f7f5 ff89 	bl	800107c <HAL_Delay>
  return USBH_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70fb      	strb	r3, [r7, #3]
 800b180:	4613      	mov	r3, r2
 800b182:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b18a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b18c:	78fa      	ldrb	r2, [r7, #3]
 800b18e:	68f9      	ldr	r1, [r7, #12]
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	00db      	lsls	r3, r3, #3
 800b198:	440b      	add	r3, r1
 800b19a:	333b      	adds	r3, #59	; 0x3b
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00a      	beq.n	800b1b8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b1a2:	78fa      	ldrb	r2, [r7, #3]
 800b1a4:	68f9      	ldr	r1, [r7, #12]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	440b      	add	r3, r1
 800b1b0:	3350      	adds	r3, #80	; 0x50
 800b1b2:	78ba      	ldrb	r2, [r7, #2]
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	e009      	b.n	800b1cc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b1b8:	78fa      	ldrb	r2, [r7, #3]
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	00db      	lsls	r3, r3, #3
 800b1c4:	440b      	add	r3, r1
 800b1c6:	3351      	adds	r3, #81	; 0x51
 800b1c8:	78ba      	ldrb	r2, [r7, #2]
 800b1ca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b082      	sub	sp, #8
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7f5 ff4a 	bl	800107c <HAL_Delay>
}
 800b1e8:	bf00      	nop
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1fe:	79fb      	ldrb	r3, [r7, #7]
 800b200:	2b03      	cmp	r3, #3
 800b202:	d817      	bhi.n	800b234 <USBH_Get_USB_Status+0x44>
 800b204:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <USBH_Get_USB_Status+0x1c>)
 800b206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20a:	bf00      	nop
 800b20c:	0800b21d 	.word	0x0800b21d
 800b210:	0800b223 	.word	0x0800b223
 800b214:	0800b229 	.word	0x0800b229
 800b218:	0800b22f 	.word	0x0800b22f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b21c:	2300      	movs	r3, #0
 800b21e:	73fb      	strb	r3, [r7, #15]
    break;
 800b220:	e00b      	b.n	800b23a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b222:	2302      	movs	r3, #2
 800b224:	73fb      	strb	r3, [r7, #15]
    break;
 800b226:	e008      	b.n	800b23a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b228:	2301      	movs	r3, #1
 800b22a:	73fb      	strb	r3, [r7, #15]
    break;
 800b22c:	e005      	b.n	800b23a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b22e:	2302      	movs	r3, #2
 800b230:	73fb      	strb	r3, [r7, #15]
    break;
 800b232:	e002      	b.n	800b23a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b234:	2302      	movs	r3, #2
 800b236:	73fb      	strb	r3, [r7, #15]
    break;
 800b238:	bf00      	nop
  }
  return usb_status;
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b252:	79fb      	ldrb	r3, [r7, #7]
 800b254:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b256:	79fb      	ldrb	r3, [r7, #7]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d102      	bne.n	800b262 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b25c:	2301      	movs	r3, #1
 800b25e:	73fb      	strb	r3, [r7, #15]
 800b260:	e001      	b.n	800b266 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b262:	2300      	movs	r3, #0
 800b264:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b266:	7bfb      	ldrb	r3, [r7, #15]
 800b268:	461a      	mov	r2, r3
 800b26a:	2101      	movs	r1, #1
 800b26c:	4803      	ldr	r0, [pc, #12]	; (800b27c <MX_DriverVbusFS+0x34>)
 800b26e:	f7f6 f9bb 	bl	80015e8 <HAL_GPIO_WritePin>
}
 800b272:	bf00      	nop
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	40020800 	.word	0x40020800

0800b280 <__errno>:
 800b280:	4b01      	ldr	r3, [pc, #4]	; (800b288 <__errno+0x8>)
 800b282:	6818      	ldr	r0, [r3, #0]
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	20000030 	.word	0x20000030

0800b28c <__libc_init_array>:
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	4e0d      	ldr	r6, [pc, #52]	; (800b2c4 <__libc_init_array+0x38>)
 800b290:	4c0d      	ldr	r4, [pc, #52]	; (800b2c8 <__libc_init_array+0x3c>)
 800b292:	1ba4      	subs	r4, r4, r6
 800b294:	10a4      	asrs	r4, r4, #2
 800b296:	2500      	movs	r5, #0
 800b298:	42a5      	cmp	r5, r4
 800b29a:	d109      	bne.n	800b2b0 <__libc_init_array+0x24>
 800b29c:	4e0b      	ldr	r6, [pc, #44]	; (800b2cc <__libc_init_array+0x40>)
 800b29e:	4c0c      	ldr	r4, [pc, #48]	; (800b2d0 <__libc_init_array+0x44>)
 800b2a0:	f000 f8f6 	bl	800b490 <_init>
 800b2a4:	1ba4      	subs	r4, r4, r6
 800b2a6:	10a4      	asrs	r4, r4, #2
 800b2a8:	2500      	movs	r5, #0
 800b2aa:	42a5      	cmp	r5, r4
 800b2ac:	d105      	bne.n	800b2ba <__libc_init_array+0x2e>
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2b4:	4798      	blx	r3
 800b2b6:	3501      	adds	r5, #1
 800b2b8:	e7ee      	b.n	800b298 <__libc_init_array+0xc>
 800b2ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2be:	4798      	blx	r3
 800b2c0:	3501      	adds	r5, #1
 800b2c2:	e7f2      	b.n	800b2aa <__libc_init_array+0x1e>
 800b2c4:	0800b55c 	.word	0x0800b55c
 800b2c8:	0800b55c 	.word	0x0800b55c
 800b2cc:	0800b55c 	.word	0x0800b55c
 800b2d0:	0800b560 	.word	0x0800b560

0800b2d4 <malloc>:
 800b2d4:	4b02      	ldr	r3, [pc, #8]	; (800b2e0 <malloc+0xc>)
 800b2d6:	4601      	mov	r1, r0
 800b2d8:	6818      	ldr	r0, [r3, #0]
 800b2da:	f000 b86d 	b.w	800b3b8 <_malloc_r>
 800b2de:	bf00      	nop
 800b2e0:	20000030 	.word	0x20000030

0800b2e4 <free>:
 800b2e4:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <free+0xc>)
 800b2e6:	4601      	mov	r1, r0
 800b2e8:	6818      	ldr	r0, [r3, #0]
 800b2ea:	f000 b817 	b.w	800b31c <_free_r>
 800b2ee:	bf00      	nop
 800b2f0:	20000030 	.word	0x20000030

0800b2f4 <memcpy>:
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	1e43      	subs	r3, r0, #1
 800b2f8:	440a      	add	r2, r1
 800b2fa:	4291      	cmp	r1, r2
 800b2fc:	d100      	bne.n	800b300 <memcpy+0xc>
 800b2fe:	bd10      	pop	{r4, pc}
 800b300:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b304:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b308:	e7f7      	b.n	800b2fa <memcpy+0x6>

0800b30a <memset>:
 800b30a:	4402      	add	r2, r0
 800b30c:	4603      	mov	r3, r0
 800b30e:	4293      	cmp	r3, r2
 800b310:	d100      	bne.n	800b314 <memset+0xa>
 800b312:	4770      	bx	lr
 800b314:	f803 1b01 	strb.w	r1, [r3], #1
 800b318:	e7f9      	b.n	800b30e <memset+0x4>
	...

0800b31c <_free_r>:
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4605      	mov	r5, r0
 800b320:	2900      	cmp	r1, #0
 800b322:	d045      	beq.n	800b3b0 <_free_r+0x94>
 800b324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b328:	1f0c      	subs	r4, r1, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bfb8      	it	lt
 800b32e:	18e4      	addlt	r4, r4, r3
 800b330:	f000 f8ac 	bl	800b48c <__malloc_lock>
 800b334:	4a1f      	ldr	r2, [pc, #124]	; (800b3b4 <_free_r+0x98>)
 800b336:	6813      	ldr	r3, [r2, #0]
 800b338:	4610      	mov	r0, r2
 800b33a:	b933      	cbnz	r3, 800b34a <_free_r+0x2e>
 800b33c:	6063      	str	r3, [r4, #4]
 800b33e:	6014      	str	r4, [r2, #0]
 800b340:	4628      	mov	r0, r5
 800b342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b346:	f000 b8a2 	b.w	800b48e <__malloc_unlock>
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	d90c      	bls.n	800b368 <_free_r+0x4c>
 800b34e:	6821      	ldr	r1, [r4, #0]
 800b350:	1862      	adds	r2, r4, r1
 800b352:	4293      	cmp	r3, r2
 800b354:	bf04      	itt	eq
 800b356:	681a      	ldreq	r2, [r3, #0]
 800b358:	685b      	ldreq	r3, [r3, #4]
 800b35a:	6063      	str	r3, [r4, #4]
 800b35c:	bf04      	itt	eq
 800b35e:	1852      	addeq	r2, r2, r1
 800b360:	6022      	streq	r2, [r4, #0]
 800b362:	6004      	str	r4, [r0, #0]
 800b364:	e7ec      	b.n	800b340 <_free_r+0x24>
 800b366:	4613      	mov	r3, r2
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	b10a      	cbz	r2, 800b370 <_free_r+0x54>
 800b36c:	42a2      	cmp	r2, r4
 800b36e:	d9fa      	bls.n	800b366 <_free_r+0x4a>
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	1858      	adds	r0, r3, r1
 800b374:	42a0      	cmp	r0, r4
 800b376:	d10b      	bne.n	800b390 <_free_r+0x74>
 800b378:	6820      	ldr	r0, [r4, #0]
 800b37a:	4401      	add	r1, r0
 800b37c:	1858      	adds	r0, r3, r1
 800b37e:	4282      	cmp	r2, r0
 800b380:	6019      	str	r1, [r3, #0]
 800b382:	d1dd      	bne.n	800b340 <_free_r+0x24>
 800b384:	6810      	ldr	r0, [r2, #0]
 800b386:	6852      	ldr	r2, [r2, #4]
 800b388:	605a      	str	r2, [r3, #4]
 800b38a:	4401      	add	r1, r0
 800b38c:	6019      	str	r1, [r3, #0]
 800b38e:	e7d7      	b.n	800b340 <_free_r+0x24>
 800b390:	d902      	bls.n	800b398 <_free_r+0x7c>
 800b392:	230c      	movs	r3, #12
 800b394:	602b      	str	r3, [r5, #0]
 800b396:	e7d3      	b.n	800b340 <_free_r+0x24>
 800b398:	6820      	ldr	r0, [r4, #0]
 800b39a:	1821      	adds	r1, r4, r0
 800b39c:	428a      	cmp	r2, r1
 800b39e:	bf04      	itt	eq
 800b3a0:	6811      	ldreq	r1, [r2, #0]
 800b3a2:	6852      	ldreq	r2, [r2, #4]
 800b3a4:	6062      	str	r2, [r4, #4]
 800b3a6:	bf04      	itt	eq
 800b3a8:	1809      	addeq	r1, r1, r0
 800b3aa:	6021      	streq	r1, [r4, #0]
 800b3ac:	605c      	str	r4, [r3, #4]
 800b3ae:	e7c7      	b.n	800b340 <_free_r+0x24>
 800b3b0:	bd38      	pop	{r3, r4, r5, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20004070 	.word	0x20004070

0800b3b8 <_malloc_r>:
 800b3b8:	b570      	push	{r4, r5, r6, lr}
 800b3ba:	1ccd      	adds	r5, r1, #3
 800b3bc:	f025 0503 	bic.w	r5, r5, #3
 800b3c0:	3508      	adds	r5, #8
 800b3c2:	2d0c      	cmp	r5, #12
 800b3c4:	bf38      	it	cc
 800b3c6:	250c      	movcc	r5, #12
 800b3c8:	2d00      	cmp	r5, #0
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	db01      	blt.n	800b3d2 <_malloc_r+0x1a>
 800b3ce:	42a9      	cmp	r1, r5
 800b3d0:	d903      	bls.n	800b3da <_malloc_r+0x22>
 800b3d2:	230c      	movs	r3, #12
 800b3d4:	6033      	str	r3, [r6, #0]
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	bd70      	pop	{r4, r5, r6, pc}
 800b3da:	f000 f857 	bl	800b48c <__malloc_lock>
 800b3de:	4a21      	ldr	r2, [pc, #132]	; (800b464 <_malloc_r+0xac>)
 800b3e0:	6814      	ldr	r4, [r2, #0]
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	b991      	cbnz	r1, 800b40c <_malloc_r+0x54>
 800b3e6:	4c20      	ldr	r4, [pc, #128]	; (800b468 <_malloc_r+0xb0>)
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	b91b      	cbnz	r3, 800b3f4 <_malloc_r+0x3c>
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f000 f83d 	bl	800b46c <_sbrk_r>
 800b3f2:	6020      	str	r0, [r4, #0]
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f000 f838 	bl	800b46c <_sbrk_r>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d124      	bne.n	800b44a <_malloc_r+0x92>
 800b400:	230c      	movs	r3, #12
 800b402:	6033      	str	r3, [r6, #0]
 800b404:	4630      	mov	r0, r6
 800b406:	f000 f842 	bl	800b48e <__malloc_unlock>
 800b40a:	e7e4      	b.n	800b3d6 <_malloc_r+0x1e>
 800b40c:	680b      	ldr	r3, [r1, #0]
 800b40e:	1b5b      	subs	r3, r3, r5
 800b410:	d418      	bmi.n	800b444 <_malloc_r+0x8c>
 800b412:	2b0b      	cmp	r3, #11
 800b414:	d90f      	bls.n	800b436 <_malloc_r+0x7e>
 800b416:	600b      	str	r3, [r1, #0]
 800b418:	50cd      	str	r5, [r1, r3]
 800b41a:	18cc      	adds	r4, r1, r3
 800b41c:	4630      	mov	r0, r6
 800b41e:	f000 f836 	bl	800b48e <__malloc_unlock>
 800b422:	f104 000b 	add.w	r0, r4, #11
 800b426:	1d23      	adds	r3, r4, #4
 800b428:	f020 0007 	bic.w	r0, r0, #7
 800b42c:	1ac3      	subs	r3, r0, r3
 800b42e:	d0d3      	beq.n	800b3d8 <_malloc_r+0x20>
 800b430:	425a      	negs	r2, r3
 800b432:	50e2      	str	r2, [r4, r3]
 800b434:	e7d0      	b.n	800b3d8 <_malloc_r+0x20>
 800b436:	428c      	cmp	r4, r1
 800b438:	684b      	ldr	r3, [r1, #4]
 800b43a:	bf16      	itet	ne
 800b43c:	6063      	strne	r3, [r4, #4]
 800b43e:	6013      	streq	r3, [r2, #0]
 800b440:	460c      	movne	r4, r1
 800b442:	e7eb      	b.n	800b41c <_malloc_r+0x64>
 800b444:	460c      	mov	r4, r1
 800b446:	6849      	ldr	r1, [r1, #4]
 800b448:	e7cc      	b.n	800b3e4 <_malloc_r+0x2c>
 800b44a:	1cc4      	adds	r4, r0, #3
 800b44c:	f024 0403 	bic.w	r4, r4, #3
 800b450:	42a0      	cmp	r0, r4
 800b452:	d005      	beq.n	800b460 <_malloc_r+0xa8>
 800b454:	1a21      	subs	r1, r4, r0
 800b456:	4630      	mov	r0, r6
 800b458:	f000 f808 	bl	800b46c <_sbrk_r>
 800b45c:	3001      	adds	r0, #1
 800b45e:	d0cf      	beq.n	800b400 <_malloc_r+0x48>
 800b460:	6025      	str	r5, [r4, #0]
 800b462:	e7db      	b.n	800b41c <_malloc_r+0x64>
 800b464:	20004070 	.word	0x20004070
 800b468:	20004074 	.word	0x20004074

0800b46c <_sbrk_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4c06      	ldr	r4, [pc, #24]	; (800b488 <_sbrk_r+0x1c>)
 800b470:	2300      	movs	r3, #0
 800b472:	4605      	mov	r5, r0
 800b474:	4608      	mov	r0, r1
 800b476:	6023      	str	r3, [r4, #0]
 800b478:	f7f5 fd48 	bl	8000f0c <_sbrk>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d102      	bne.n	800b486 <_sbrk_r+0x1a>
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	b103      	cbz	r3, 800b486 <_sbrk_r+0x1a>
 800b484:	602b      	str	r3, [r5, #0]
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	200048a0 	.word	0x200048a0

0800b48c <__malloc_lock>:
 800b48c:	4770      	bx	lr

0800b48e <__malloc_unlock>:
 800b48e:	4770      	bx	lr

0800b490 <_init>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	bf00      	nop
 800b494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b496:	bc08      	pop	{r3}
 800b498:	469e      	mov	lr, r3
 800b49a:	4770      	bx	lr

0800b49c <_fini>:
 800b49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49e:	bf00      	nop
 800b4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4a2:	bc08      	pop	{r3}
 800b4a4:	469e      	mov	lr, r3
 800b4a6:	4770      	bx	lr
